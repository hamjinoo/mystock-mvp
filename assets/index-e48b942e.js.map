{"version":3,"mappings":"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","names":["f","require$$0","k","Symbol","for","l","m","Object","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","b","d","e","h","call","defaultProps","$$typeof","type","props","_owner","current","reactJsxRuntime_production_min","jsx","jsxs","jsxRuntimeModule","exports","client","createRoot","hydrateRoot","BanknotesIcon","title","titleId","svgRef","React.createElement","assign","xmlns","fill","viewBox","strokeWidth","stroke","id","strokeLinecap","strokeLinejoin","BanknotesIcon$1","React.forwardRef","ChartBarIcon","ChartBarIcon$1","Cog6ToothIcon","createElement","Cog6ToothIcon$1","DocumentTextIcon","DocumentTextIcon$1","HomeIcon","HomeIcon$1","PresentationChartLineIcon","PresentationChartLineIcon$1","CHART_COLORS","SPINNER_SIZES","sm","md","lg","LoadingSpinner","message","size","className","children","db","Dexie","constructor","super","this","version","stores","accounts","portfolios","positions","todos","upgrade","tx","table","toCollection","modify","todo","portfolioId","portfolioGroupId","memos","investmentPlans","investmentEntries","cashBalances","investmentRules","investmentApprovals","getAccounts","toArray","getAccountById","get","addAccount","account","accountData","createdAt","Date","now","add","updateAccount","update","deleteAccount","portfolioIds","where","equals","map","anyOf","delete","addPortfolio","portfolio","order","length","addPosition","position","positionsInPortfolio","positionWithDefaults","strategyCategory","strategyTags","entryCount","maxEntries","targetQuantity","quantity","addTodo","addMemo","memo","memoData","updatedAt","updatePortfolio","updatePosition","updateData","updateTodo","updateMemo","getPortfolioWithPositions","exportData","Promise","all","timestamp","data","error","importData","dbVersion","Error","transaction","async","clear","bulkAdd","getMemos","orderBy","reverse","getMemoById","deleteMemo","updateAccountBalance","accountId","totalBalance","getCashBalance","investedAmount","reduce","sum","pos","avgPrice","getAccountCashBalance","currentValue","currentPrice","cashBalance","utilizationRate","profitLoss","profitLossRate","addInvestmentPlan","plan","planData","executedEntries","remainingBudget","totalBudget","status","planId","entries","amountPerEntry","plannedEntries","i","push","entryNumber","plannedAmount","getInvestmentPlans","plans","executeInvestmentEntry","entryId","executionData","entry","executedAmount","price","executedAt","positionId","Math","max","addInvestmentRules","rules","getInvestmentRules","first","updateInvestmentRules","updates","createDefaultInvestmentRules","defaultRules","maxPositionSize","maxPositionAmount","maxDailyInvestment","maxMonthlyInvestment","minCashReserve","maxPortfolioRisk","maxSectorConcentration","requireConfirmationAbove","cooldownPeriod","maxConsecutiveLosses","autoStopLoss","stopLossPercentage","autoTakeProfit","takeProfitPercentage","enableWarnings","warningThreshold","rulesId","createdRules","addInvestmentApproval","approval","getInvestmentApproval","updateInvestmentApproval","getPendingApprovals","and","on","open","catch","err","name","window","location","reload","needsAutoBackup","lastBackupTime","time","localStorage","getItem","parseInt","getLastAutoBackupTime","checkAndCreateAutoBackup","date","toLocaleDateString","createBackup","setItem","toString","autoBackups","getBackupList","filter","startsWith","sort","slice","forEach","backup","deleteBackup","cleanupOldAutoBackups","isOpen","verno","validateBackupData","backupList","JSON","stringify","Array","isArray","Set","validPositions","every","has","restoreBackup","backupJson","parse","tempBackup","toLocaleString","Boolean","restoreFromTempBackup","backupListJson","removeItem","MainPage","lazy","__vitePreload","import","then","module","default","PortfolioList","NewPortfolioPage","PortfolioDetail","PortfolioConfigPage","AccountList","NewAccount","AccountDetailPage","EditAccountPage","NewPositionPage","EditPositionPage","EditPosition","ConsolidatedView","MemoListPage","MemoDetailPage","SettingsPage","TodoPage","InvestmentPlansPage","InvestmentPlanDetailPage","InvestmentRulesPage","App","useEffect","interval","setInterval","clearInterval","Suspense","fallback","Routes","Route","path","element","Navigate","to","replace","Link","ReactDOM","document","getElementById","render","React","StrictMode","BrowserRouter","basename"],"sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../node_modules/@heroicons/react/24/outline/esm/BanknotesIcon.js","../../node_modules/@heroicons/react/24/outline/esm/ChartBarIcon.js","../../node_modules/@heroicons/react/24/outline/esm/Cog6ToothIcon.js","../../node_modules/@heroicons/react/24/outline/esm/DocumentTextIcon.js","../../node_modules/@heroicons/react/24/outline/esm/HomeIcon.js","../../node_modules/@heroicons/react/24/outline/esm/PresentationChartLineIcon.js","../../src/constants/ui.ts","../../src/components/LoadingSpinner.tsx","../../src/services/db.ts","../../src/utils/backup.ts","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import * as React from \"react\";\nfunction BanknotesIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M2.25 18.75a60.07 60.07 0 0 1 15.797 2.101c.727.198 1.453-.342 1.453-1.096V18.75M3.75 4.5v.75A.75.75 0 0 1 3 6h-.75m0 0v-.375c0-.621.504-1.125 1.125-1.125H20.25M2.25 6v9m18-10.5v.75c0 .414.336.75.75.75h.75m-1.5-1.5h.375c.621 0 1.125.504 1.125 1.125v9.75c0 .621-.504 1.125-1.125 1.125h-.375m1.5-1.5H21a.75.75 0 0 0-.75.75v.75m0 0H3.75m0 0h-.375a1.125 1.125 0 0 1-1.125-1.125V15m1.5 1.5v-.75A.75.75 0 0 0 3 15h-.75M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm3 0h.008v.008H18V10.5Zm-12 0h.008v.008H6V10.5Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(BanknotesIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ChartBarIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 0 1 3 19.875v-6.75ZM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V8.625ZM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V4.125Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChartBarIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction Cog6ToothIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.325.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.241-.438.613-.43.992a7.723 7.723 0 0 1 0 .255c-.008.378.137.75.43.991l1.004.827c.424.35.534.955.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.47 6.47 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.991a6.932 6.932 0 0 1 0-.255c.007-.38-.138-.751-.43-.992l-1.004-.827a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.086.22-.128.332-.183.582-.495.644-.869l.214-1.28Z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(Cog6ToothIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction DocumentTextIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(DocumentTextIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction HomeIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(HomeIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction PresentationChartLineIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M3.75 3v11.25A2.25 2.25 0 0 0 6 16.5h2.25M3.75 3h-1.5m1.5 0h16.5m0 0h1.5m-1.5 0v11.25A2.25 2.25 0 0 1 18 16.5h-2.25m-7.5 0h7.5m-7.5 0-1 3m8.5-3 1 3m0 0 .5 1.5m-.5-1.5h-9.5m0 0-.5 1.5m.75-9 3-3 2.148 2.148A12.061 12.061 0 0 1 16.5 7.605\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(PresentationChartLineIcon);\nexport default ForwardRef;","/**\r\n * UI 관련 상수 정의\r\n */\r\n\r\n// 색상 팔레트\r\nexport const CHART_COLORS = [\r\n  \"#00C49F\",\r\n  \"#0088FE\",\r\n  \"#FFBB28\",\r\n  \"#FF8042\",\r\n  \"#8884D8\",\r\n  \"#82CA9D\",\r\n  \"#FF6B6B\",\r\n  \"#4ECDC4\",\r\n  \"#45B7D1\",\r\n  \"#96CEB4\",\r\n] as const;\r\n\r\n// 로딩 스피너 크기\r\nexport const SPINNER_SIZES = {\r\n  sm: \"h-4 w-4\",\r\n  md: \"h-8 w-8\",\r\n  lg: \"h-12 w-12\",\r\n} as const;\r\n\r\n// 투자 전략 카테고리\r\nexport const STRATEGY_CATEGORIES = {\r\n  LONG_TERM: \"장기투자\",\r\n  MID_TERM: \"중기투자\",\r\n  SHORT_TERM: \"단기투자\",\r\n  UNCATEGORIZED: \"미분류\",\r\n} as const;\r\n\r\n// 통화 기호\r\nexport const CURRENCY_SYMBOLS = {\r\n  KRW: \"₩\",\r\n  USD: \"$\",\r\n} as const;\r\n\r\n// 기본 애니메이션 클래스\r\nexport const ANIMATIONS = {\r\n  SPINNER: \"animate-spin rounded-full border-b-2 border-gray-300\",\r\n  FADE_IN: \"transition-opacity duration-200\",\r\n  SLIDE_IN: \"transition-transform duration-200\",\r\n} as const;\r\n","import React from \"react\";\r\nimport { SPINNER_SIZES } from \"../constants/ui\";\r\n\r\ninterface LoadingSpinnerProps {\r\n  message?: string;\r\n  size?: keyof typeof SPINNER_SIZES;\r\n  className?: string;\r\n}\r\n\r\nexport const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({\r\n  message = \"로딩 중...\",\r\n  size = \"md\",\r\n  className = \"\",\r\n}) => {\r\n  return (\r\n    <div className={`flex flex-col justify-center items-center ${className}`}>\r\n      <div\r\n        className={`animate-spin rounded-full border-b-2 border-gray-300 ${SPINNER_SIZES[size]}`}\r\n      ></div>\r\n      {message && <p className=\"text-gray-400 text-sm mt-2\">{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n","import Dexie, { Table, Transaction } from \"dexie\";\r\nimport {\r\n    Account,\r\n    CashBalance,\r\n    InvestmentApproval,\r\n    InvestmentEntry,\r\n    InvestmentPlan,\r\n    InvestmentRules,\r\n    Memo,\r\n    NewInvestmentPlan,\r\n    NewInvestmentRules,\r\n    NewMemo,\r\n    NewPortfolio,\r\n    NewPosition,\r\n    NewTodo,\r\n    Portfolio,\r\n    Position,\r\n    Todo,\r\n} from \"../types\";\r\n\r\ninterface BackupData {\r\n  timestamp: number;\r\n  name: string;\r\n  dbVersion: number;\r\n  data: {\r\n    portfolios: Portfolio[];\r\n    positions: Position[];\r\n    todos: Todo[];\r\n    memos: Memo[];\r\n    accounts: Account[];\r\n  };\r\n}\r\n\r\nexport class MyStockDatabase extends Dexie {\r\n  portfolios!: Table<Portfolio>;\r\n  positions!: Table<Position>;\r\n  todos!: Table<Todo>;\r\n  memos!: Table<Memo>;\r\n  accounts!: Table<Account>;\r\n  investmentPlans!: Table<InvestmentPlan>;\r\n  investmentEntries!: Table<InvestmentEntry>;\r\n  cashBalances!: Table<CashBalance>;\r\n  investmentRules!: Table<InvestmentRules>;\r\n  investmentApprovals!: Table<InvestmentApproval>;\r\n\r\n  constructor() {\r\n    super(\"MyStockDB\");\r\n\r\n    this.version(1).stores({\r\n      accounts: \"++id, broker, accountNumber, currency\",\r\n      portfolios: \"++id, accountId, name, currency\",\r\n      positions: \"++id, portfolioId, symbol, strategyCategory\",\r\n      todos: \"++id, portfolioId, completed, createdAt\",\r\n    });\r\n\r\n    this.version(7).upgrade((tx: Transaction) => {\r\n      return tx\r\n        .table(\"todos\")\r\n        .toCollection()\r\n        .modify((todo: Todo) => {\r\n          if (\"portfolioGroupId\" in todo) {\r\n            (todo as any).portfolioId = (todo as any).portfolioGroupId;\r\n            delete (todo as any).portfolioGroupId;\r\n          }\r\n        });\r\n    });\r\n\r\n    // 메모 테이블 추가\r\n    this.version(8).stores({\r\n      accounts: \"++id, broker, accountNumber, currency\",\r\n      portfolios: \"++id, accountId, name, currency\",\r\n      positions: \"++id, portfolioId, symbol, strategyCategory\",\r\n      todos: \"++id, portfolioId, completed, createdAt\",\r\n      memos: \"++id, title, content, createdAt, updatedAt\",\r\n    });\r\n\r\n    // 현금 관리와 투자 계획 테이블 추가\r\n    this.version(9).stores({\r\n      accounts: \"++id, broker, accountNumber, currency, totalBalance\",\r\n      portfolios: \"++id, accountId, name, currency\",\r\n      positions: \"++id, portfolioId, symbol, strategyCategory\",\r\n      todos: \"++id, portfolioId, completed, createdAt\",\r\n      memos: \"++id, title, content, createdAt, updatedAt\",\r\n      investmentPlans: \"++id, portfolioId, symbol, status, createdAt\",\r\n      investmentEntries: \"++id, planId, entryNumber, status, executedAt\",\r\n      cashBalances: \"++id, accountId, portfolioId, cashBalance, investedAmount, totalBalance, utilizationRate, lastUpdated\",\r\n    });\r\n\r\n    this.version(10).stores({\r\n      accounts: \"++id, name, currency, totalBalance, createdAt\",\r\n      portfolios: \"++id, accountId, name, currency, createdAt\",\r\n      positions: \"++id, portfolioId, symbol, name, quantity, avgPrice, currentPrice, tradeDate, strategyCategory\",\r\n      todos: \"++id, title, completed, createdAt, portfolioId\",\r\n      cashBalances: \"++id, accountId, portfolioId, cashBalance, investedAmount, totalBalance, utilizationRate, lastUpdated\",\r\n      investmentPlans: \"++id, portfolioId, symbol, name, totalBudget, remainingBudget, plannedEntries, executedEntries, status, createdAt\",\r\n      investmentEntries: \"++id, planId, entryNumber, plannedAmount, status, quantity, executedPrice, executedAmount, executedAt, positionId\",\r\n      investmentRules: \"++id, portfolioId, maxPositionSize, maxPositionAmount, enableWarnings, createdAt\",\r\n      investmentApprovals: \"++id, portfolioId, symbol, plannedAmount, status, approvedAt, executedAt\"\r\n    });\r\n  }\r\n\r\n  async getAccounts(): Promise<Account[]> {\r\n    return await this.accounts.toArray();\r\n  }\r\n\r\n  async getAccountById(id: number): Promise<Account | undefined> {\r\n    return await this.accounts.get(id);\r\n  }\r\n\r\n  async addAccount(account: Omit<Account, \"id\">): Promise<number> {\r\n    const accountData = {\r\n      ...account,\r\n      createdAt: Date.now(),\r\n    } as Account;\r\n    return await this.accounts.add(accountData);\r\n  }\r\n\r\n  async updateAccount(id: number, account: Partial<Account>): Promise<void> {\r\n    await this.accounts.update(id, account);\r\n  }\r\n\r\n  async deleteAccount(id: number): Promise<void> {\r\n    // 계좌에 속한 포트폴리오와 포지션도 함께 삭제\r\n    const portfolios = await this.portfolios\r\n      .where(\"accountId\")\r\n      .equals(id)\r\n      .toArray();\r\n    const portfolioIds = portfolios.map((p) => p.id);\r\n\r\n    // 포지션 삭제\r\n    await this.positions.where(\"portfolioId\").anyOf(portfolioIds).delete();\r\n    // 포트폴리오 삭제\r\n    await this.portfolios.where(\"accountId\").equals(id).delete();\r\n    // 계좌 삭제\r\n    await this.accounts.delete(id);\r\n  }\r\n\r\n  async addPortfolio(portfolio: NewPortfolio): Promise<number> {\r\n    const portfolios = await this.portfolios.toArray();\r\n    const order = portfolios.length;\r\n    return await this.portfolios.add({ ...portfolio, order } as Portfolio);\r\n  }\r\n\r\n  async addPosition(position: NewPosition): Promise<number> {\r\n    const positionsInPortfolio = await this.positions\r\n      .where(\"portfolioId\")\r\n      .equals(position.portfolioId)\r\n      .toArray();\r\n\r\n    const positionWithDefaults = {\r\n      ...position,\r\n      strategyCategory: position.strategyCategory || \"UNCATEGORIZED\",\r\n      strategyTags: position.strategyTags || [],\r\n      entryCount: position.entryCount || 1,\r\n      maxEntries: position.maxEntries || 1,\r\n      targetQuantity: position.targetQuantity || position.quantity,\r\n      order: positionsInPortfolio.length,\r\n    } as Position;\r\n\r\n    return await this.positions.add(positionWithDefaults);\r\n  }\r\n\r\n  async addTodo(todo: NewTodo): Promise<number> {\r\n    return await this.todos.add(todo as Todo);\r\n  }\r\n\r\n  async addMemo(memo: NewMemo): Promise<number> {\r\n    const memoData = {\r\n      ...memo,\r\n      createdAt: Date.now(),\r\n      updatedAt: Date.now(),\r\n    } as Memo;\r\n    return await this.memos.add(memoData);\r\n  }\r\n\r\n  async updatePortfolio(portfolio: Portfolio) {\r\n    return await this.portfolios.update(portfolio.id, portfolio);\r\n  }\r\n\r\n  async updatePosition(position: Position) {\r\n    const { id, ...updateData } = position;\r\n    return await this.positions.update(id, updateData);\r\n  }\r\n\r\n  async updateTodo(todo: Todo) {\r\n    return await this.todos.update(todo.id, todo);\r\n  }\r\n\r\n  async updateMemo(memo: Memo) {\r\n    return await this.memos.update(memo.id, {\r\n      ...memo,\r\n      updatedAt: Date.now(),\r\n    });\r\n  }\r\n\r\n  async getPortfolioWithPositions(portfolioId: number) {\r\n    const portfolio = await this.portfolios.get(portfolioId);\r\n    if (!portfolio) return null;\r\n\r\n    const positions = await this.positions\r\n      .where(\"portfolioId\")\r\n      .equals(portfolioId)\r\n      .toArray();\r\n\r\n    return {\r\n      ...portfolio,\r\n      positions,\r\n    };\r\n  }\r\n\r\n  async exportData() {\r\n    try {\r\n      const [portfolios, positions, todos, memos, accounts] = await Promise.all(\r\n        [\r\n          this.portfolios.toArray(),\r\n          this.positions.toArray(),\r\n          this.todos.toArray(),\r\n          this.memos.toArray(),\r\n          this.accounts.toArray(),\r\n        ]\r\n      );\r\n\r\n      return {\r\n        version: 7,\r\n        timestamp: Date.now(),\r\n        data: {\r\n          portfolios,\r\n          positions,\r\n          todos,\r\n          memos,\r\n          accounts,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error exporting data:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async importData(importData: BackupData) {\r\n    try {\r\n      if (!importData.data || !importData.dbVersion) {\r\n        throw new Error(\"Invalid backup data format\");\r\n      }\r\n\r\n      await this.transaction(\r\n        \"rw\",\r\n        [\r\n          this.portfolios,\r\n          this.positions,\r\n          this.todos,\r\n          this.memos,\r\n          this.accounts,\r\n        ],\r\n        async () => {\r\n          await Promise.all([\r\n            this.portfolios.clear(),\r\n            this.positions.clear(),\r\n            this.todos.clear(),\r\n            this.memos.clear(),\r\n            this.accounts.clear(),\r\n          ]);\r\n\r\n          await Promise.all([\r\n            this.portfolios.bulkAdd(importData.data.portfolios),\r\n            this.positions.bulkAdd(importData.data.positions),\r\n            this.todos.bulkAdd(importData.data.todos),\r\n            this.memos.bulkAdd(importData.data.memos),\r\n            this.accounts.bulkAdd(importData.data.accounts || []),\r\n          ]);\r\n        }\r\n      );\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error importing data:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMemos(): Promise<Memo[]> {\r\n    return await this.memos.orderBy(\"updatedAt\").reverse().toArray();\r\n  }\r\n\r\n  async getMemoById(id: number): Promise<Memo | undefined> {\r\n    return await this.memos.get(id);\r\n  }\r\n\r\n  async deleteMemo(id: number): Promise<void> {\r\n    await this.memos.delete(id);\r\n  }\r\n\r\n  // 현금 관리 메서드들\r\n  async updateAccountBalance(accountId: number, totalBalance: number): Promise<void> {\r\n    await this.accounts.update(accountId, { totalBalance });\r\n  }\r\n\r\n  async getCashBalance(accountId: number): Promise<number> {\r\n    // 계좌의 총 잔고에서 투자된 금액을 빼서 현금 잔고 계산\r\n    const account = await this.accounts.get(accountId);\r\n    if (!account?.totalBalance) return 0;\r\n\r\n    const portfolios = await this.portfolios.where(\"accountId\").equals(accountId).toArray();\r\n    const portfolioIds = portfolios.map(p => p.id);\r\n\r\n    const positions = await this.positions.where(\"portfolioId\").anyOf(portfolioIds).toArray();\r\n    const investedAmount = positions.reduce((sum, pos) => sum + (pos.quantity * pos.avgPrice), 0);\r\n\r\n    return account.totalBalance - investedAmount;\r\n  }\r\n\r\n  async getAccountCashBalance(accountId: number) {\r\n    const account = await this.accounts.get(accountId);\r\n    if (!account) return null;\r\n\r\n    const portfolios = await this.portfolios.where(\"accountId\").equals(accountId).toArray();\r\n    const portfolioIds = portfolios.map(p => p.id);\r\n\r\n    const positions = await this.positions.where(\"portfolioId\").anyOf(portfolioIds).toArray();\r\n    const investedAmount = positions.reduce((sum, pos) => sum + (pos.quantity * pos.avgPrice), 0);\r\n    const currentValue = positions.reduce((sum, pos) => sum + (pos.quantity * pos.currentPrice), 0);\r\n\r\n    const totalBalance = account.totalBalance || 0;\r\n    const cashBalance = totalBalance - investedAmount;\r\n    const utilizationRate = totalBalance > 0 ? (investedAmount / totalBalance) * 100 : 0;\r\n\r\n    return {\r\n      totalBalance,\r\n      cashBalance,\r\n      investedAmount,\r\n      currentValue,\r\n      utilizationRate,\r\n      profitLoss: currentValue - investedAmount,\r\n      profitLossRate: investedAmount > 0 ? ((currentValue - investedAmount) / investedAmount) * 100 : 0,\r\n    };\r\n  }\r\n\r\n  // 투자 계획 메서드들\r\n  async addInvestmentPlan(plan: NewInvestmentPlan): Promise<number> {\r\n    const planData: Omit<InvestmentPlan, 'id' | 'entries'> = {\r\n      ...plan,\r\n      executedEntries: 0,\r\n      remainingBudget: plan.totalBudget,\r\n      status: 'PLANNED' as const,\r\n      createdAt: Date.now(),\r\n      updatedAt: Date.now(),\r\n    };\r\n\r\n    const planId = await this.investmentPlans.add(planData as any);\r\n\r\n    // 계획된 매수 회차들을 생성\r\n    const entries: Omit<InvestmentEntry, 'id'>[] = [];\r\n    const amountPerEntry = plan.totalBudget / plan.plannedEntries;\r\n\r\n    for (let i = 1; i <= plan.plannedEntries; i++) {\r\n      entries.push({\r\n        planId: planId as number,\r\n        entryNumber: i,\r\n        plannedAmount: i === plan.plannedEntries \r\n          ? plan.totalBudget - (amountPerEntry * (plan.plannedEntries - 1)) // 마지막 회차에서 반올림 오차 조정\r\n          : amountPerEntry,\r\n        status: 'PLANNED',\r\n      });\r\n    }\r\n\r\n    await this.investmentEntries.bulkAdd(entries as any);\r\n    return planId as number;\r\n  }\r\n\r\n  async getInvestmentPlans(portfolioId?: number): Promise<InvestmentPlan[]> {\r\n    const plans = portfolioId \r\n      ? await this.investmentPlans.where(\"portfolioId\").equals(portfolioId).toArray()\r\n      : await this.investmentPlans.toArray();\r\n\r\n    // 각 계획에 대한 entries 로드\r\n    for (const plan of plans) {\r\n      plan.entries = await this.investmentEntries.where(\"planId\").equals(plan.id).toArray();\r\n    }\r\n\r\n    return plans;\r\n  }\r\n\r\n  async executeInvestmentEntry(\r\n    entryId: number, \r\n    executionData: {\r\n      quantity: number;\r\n      price: number;\r\n      positionId?: number;\r\n    }\r\n  ): Promise<void> {\r\n    const entry = await this.investmentEntries.get(entryId);\r\n    if (!entry || entry.status !== 'PLANNED') {\r\n      throw new Error('실행할 수 없는 투자 계획입니다.');\r\n    }\r\n\r\n    const executedAmount = executionData.quantity * executionData.price;\r\n\r\n    // 투자 계획 실행 기록 업데이트\r\n    await this.investmentEntries.update(entryId, {\r\n      executedAmount,\r\n      executedAt: Date.now(),\r\n      quantity: executionData.quantity,\r\n      price: executionData.price,\r\n      status: 'EXECUTED',\r\n      positionId: executionData.positionId,\r\n    });\r\n\r\n    // 투자 계획 상태 업데이트\r\n    const plan = await this.investmentPlans.get(entry.planId);\r\n    if (plan) {\r\n      const executedEntries = plan.executedEntries + 1;\r\n      const remainingBudget = Math.max(0, plan.remainingBudget - executedAmount);\r\n      const status = executedEntries >= plan.plannedEntries ? 'COMPLETED' : 'IN_PROGRESS';\r\n\r\n      await this.investmentPlans.update(entry.planId, {\r\n        executedEntries,\r\n        remainingBudget,\r\n        status,\r\n        updatedAt: Date.now(),\r\n      });\r\n    }\r\n  }\r\n\r\n  // 투자 규칙 관리\r\n  async addInvestmentRules(rules: NewInvestmentRules): Promise<number> {\r\n    const now = Date.now();\r\n    return await this.investmentRules.add({\r\n      ...rules,\r\n      id: 0, // Dexie가 자동 할당\r\n      createdAt: now,\r\n      updatedAt: now,\r\n    });\r\n  }\r\n\r\n  async getInvestmentRules(portfolioId: number): Promise<InvestmentRules | undefined> {\r\n    return await this.investmentRules.where(\"portfolioId\").equals(portfolioId).first();\r\n  }\r\n\r\n  async updateInvestmentRules(id: number, updates: Partial<InvestmentRules>): Promise<void> {\r\n    await this.investmentRules.update(id, {\r\n      ...updates,\r\n      updatedAt: Date.now(),\r\n    });\r\n  }\r\n\r\n  // 기본 투자 규칙 생성\r\n  async createDefaultInvestmentRules(portfolioId: number): Promise<InvestmentRules> {\r\n    const defaultRules: NewInvestmentRules = {\r\n      portfolioId,\r\n      // 포지션 규칙 (보수적 기본값)\r\n      maxPositionSize: 20, // 단일 종목 최대 20%\r\n      maxPositionAmount: 1000000, // 단일 종목 최대 100만원\r\n      maxDailyInvestment: 500000, // 일일 최대 50만원\r\n      maxMonthlyInvestment: 2000000, // 월간 최대 200만원\r\n      \r\n      // 포트폴리오 규칙\r\n      minCashReserve: 10, // 최소 현금 10% 보유\r\n      maxPortfolioRisk: 6, // 중간 위험도\r\n      maxSectorConcentration: 40, // 섹터별 최대 40%\r\n      \r\n      // 매수 규칙\r\n      requireConfirmationAbove: 300000, // 30만원 이상 매수 시 확인\r\n      cooldownPeriod: 24, // 24시간 대기\r\n      maxConsecutiveLosses: 3, // 연속 3회 손실 후 중단\r\n      \r\n      // 손절/익절 규칙\r\n      autoStopLoss: false, // 자동 손절 비활성화 (수동 관리)\r\n      stopLossPercentage: 10, // 10% 손절\r\n      autoTakeProfit: false, // 자동 익절 비활성화\r\n      takeProfitPercentage: 20, // 20% 익절\r\n      \r\n      // 경고 설정\r\n      enableWarnings: true, // 경고 시스템 활성화\r\n      warningThreshold: 15, // 15% 임계값\r\n    };\r\n\r\n    const rulesId = await this.addInvestmentRules(defaultRules);\r\n    const createdRules = await this.investmentRules.get(rulesId);\r\n    if (!createdRules) {\r\n      throw new Error(\"투자 규칙 생성에 실패했습니다.\");\r\n    }\r\n    return createdRules;\r\n  }\r\n\r\n  // 투자 승인 관리\r\n  async addInvestmentApproval(approval: Omit<InvestmentApproval, 'id'>): Promise<number> {\r\n    return await this.investmentApprovals.add({\r\n      ...approval,\r\n      id: 0, // Dexie가 자동 할당\r\n    });\r\n  }\r\n\r\n  async getInvestmentApproval(id: number): Promise<InvestmentApproval | undefined> {\r\n    return await this.investmentApprovals.get(id);\r\n  }\r\n\r\n  async updateInvestmentApproval(id: number, updates: Partial<InvestmentApproval>): Promise<void> {\r\n    await this.investmentApprovals.update(id, updates);\r\n  }\r\n\r\n  async getPendingApprovals(portfolioId: number): Promise<InvestmentApproval[]> {\r\n    return await this.investmentApprovals\r\n      .where(\"portfolioId\").equals(portfolioId)\r\n      .and(approval => approval.status === 'PENDING')\r\n      .toArray();\r\n  }\r\n}\r\n\r\nexport const db = new MyStockDatabase();\r\n\r\n// 데이터베이스 연결 상태 확인\r\ndb.on(\"ready\", () => console.log(\"데이터베이스가 준비되었습니다.\"));\r\n\r\n// 오류 처리\r\ndb.open().catch(async (err: Error) => {\r\n  console.error(\"데이터베이스 오류:\", err);\r\n\r\n  if (err.name === \"SchemaError\") {\r\n    console.log(\"스키마 오류로 인해 데이터베이스를 재설정합니다...\");\r\n    await db.delete();\r\n    window.location.reload();\r\n  }\r\n});\r\n\r\n// 서버 초기화 시도를 제거하고 로컬 데이터베이스만 사용\r\n// db.initializeFromServer().catch(console.error);\r\n","import { db } from \"../services/db\";\r\nimport { Account, Memo, Portfolio, Position, Todo } from \"../types\";\r\n\r\ninterface BackupData {\r\n  timestamp: number;\r\n  name: string;\r\n  dbVersion: number;\r\n  data: {\r\n    portfolios: Portfolio[];\r\n    positions: Position[];\r\n    todos: Todo[];\r\n    memos: Memo[];\r\n    accounts: Account[];\r\n  };\r\n}\r\n\r\n// 자동 백업 간격 (1일)\r\nconst AUTO_BACKUP_INTERVAL = 24 * 60 * 60 * 1000;\r\nconst MAX_AUTO_BACKUPS = 5;\r\n\r\n// 마지막 자동 백업 시간 확인\r\nconst getLastAutoBackupTime = (): number => {\r\n  const time = localStorage.getItem(\"last_auto_backup_time\");\r\n  return time ? parseInt(time) : 0;\r\n};\r\n\r\n// 자동 백업 시간 업데이트\r\nconst updateLastAutoBackupTime = () => {\r\n  localStorage.setItem(\"last_auto_backup_time\", Date.now().toString());\r\n};\r\n\r\n// 자동 백업 필요 여부 확인\r\nconst needsAutoBackup = (): boolean => {\r\n  const lastBackupTime = getLastAutoBackupTime();\r\n  return Date.now() - lastBackupTime >= AUTO_BACKUP_INTERVAL;\r\n};\r\n\r\n// 오래된 자동 백업 정리\r\nconst cleanupOldAutoBackups = () => {\r\n  const backupList = getBackupList();\r\n  const autoBackups = backupList.filter((b) => b.name.startsWith(\"자동백업_\"));\r\n  if (autoBackups.length > MAX_AUTO_BACKUPS) {\r\n    // 가장 오래된 자동 백업들 삭제\r\n    autoBackups\r\n      .sort((a, b) => b.timestamp - a.timestamp)\r\n      .slice(MAX_AUTO_BACKUPS)\r\n      .forEach((backup) => deleteBackup(backup.timestamp));\r\n  }\r\n};\r\n\r\nexport const checkAndCreateAutoBackup = async () => {\r\n  if (needsAutoBackup()) {\r\n    try {\r\n      const timestamp = Date.now();\r\n      const date = new Date().toLocaleDateString(\"ko-KR\");\r\n      await createBackup(`자동백업_${date}`);\r\n      updateLastAutoBackupTime();\r\n      cleanupOldAutoBackups();\r\n    } catch (error) {\r\n      console.error(\"자동 백업 생성 중 오류:\", error);\r\n    }\r\n  }\r\n};\r\n\r\nexport const createBackup = async (name: string): Promise<BackupData> => {\r\n  try {\r\n    // DB가 열려있는지 확인\r\n    if (!db.isOpen()) {\r\n      await db.open();\r\n    }\r\n\r\n    const [portfolios, positions, todos, memos, accounts] = await Promise.all([\r\n      db.portfolios?.toArray() || [],\r\n      db.positions?.toArray() || [],\r\n      db.todos?.toArray() || [],\r\n      db.memos?.toArray() || [],\r\n      db.accounts?.toArray() || [],\r\n    ]);\r\n\r\n    const backup: BackupData = {\r\n      timestamp: Date.now(),\r\n      name,\r\n      dbVersion: db.verno,\r\n      data: {\r\n        portfolios,\r\n        positions,\r\n        todos,\r\n        memos,\r\n        accounts,\r\n      },\r\n    };\r\n\r\n    // 백업 데이터 유효성 검사\r\n    if (!validateBackupData(backup)) {\r\n      throw new Error(\"백업 데이터 유효성 검사 실패\");\r\n    }\r\n\r\n    // 로컬 스토리지에 백업 목록 저장\r\n    const backupList = getBackupList();\r\n    backupList.push({\r\n      timestamp: backup.timestamp,\r\n      name: backup.name,\r\n    });\r\n    localStorage.setItem(\"db_backups\", JSON.stringify(backupList));\r\n\r\n    // 백업 데이터 저장\r\n    localStorage.setItem(\r\n      `db_backup_${backup.timestamp}`,\r\n      JSON.stringify(backup)\r\n    );\r\n\r\n    return backup;\r\n  } catch (error) {\r\n    console.error(\"백업 생성 중 오류:\", error);\r\n    throw new Error(\"백업 생성 중 오류가 발생했습니다.\");\r\n  }\r\n};\r\n\r\nconst validateBackupData = (backup: BackupData): boolean => {\r\n  try {\r\n    // 필수 필드 존재 확인\r\n    if (!backup.timestamp || !backup.name || !backup.data) {\r\n      return false;\r\n    }\r\n\r\n    // 데이터 형식 확인\r\n    if (\r\n      !Array.isArray(backup.data.portfolios) ||\r\n      !Array.isArray(backup.data.positions) ||\r\n      !Array.isArray(backup.data.todos) ||\r\n      !Array.isArray(backup.data.memos) ||\r\n      !Array.isArray(backup.data.accounts)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // 데이터 무결성 확인\r\n    const portfolioIds = new Set(backup.data.portfolios.map((p) => p.id));\r\n    const validPositions = backup.data.positions.every((p) =>\r\n      portfolioIds.has(p.portfolioId)\r\n    );\r\n\r\n    if (!validPositions) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"백업 데이터 유효성 검사 중 오류:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const restoreBackup = async (timestamp: number): Promise<void> => {\r\n  try {\r\n    const backupJson = localStorage.getItem(`db_backup_${timestamp}`);\r\n    if (!backupJson) {\r\n      throw new Error(\"백업을 찾을 수 없습니다.\");\r\n    }\r\n\r\n    const backup: BackupData = JSON.parse(backupJson);\r\n\r\n    // 백업 데이터 유효성 검사\r\n    if (!validateBackupData(backup)) {\r\n      throw new Error(\"유효하지 않은 백업 데이터입니다.\");\r\n    }\r\n\r\n    // DB 버전 확인\r\n    if (backup.dbVersion && backup.dbVersion !== db.verno) {\r\n      console.warn(\r\n        `백업 DB 버전(${backup.dbVersion})이 현재 DB 버전(${db.verno})과 다릅니다.`\r\n      );\r\n    }\r\n\r\n    // 현재 데이터 임시 백업 생성\r\n    const tempBackup = await createBackup(\r\n      `복원_전_백업_${new Date().toLocaleString(\"ko-KR\")}`\r\n    );\r\n\r\n    try {\r\n      // DB 초기화\r\n      await db.delete();\r\n      await db.open();\r\n\r\n      // 데이터 복원\r\n      await Promise.all(\r\n        [\r\n          db.portfolios?.bulkAdd(backup.data.portfolios || []),\r\n          db.positions?.bulkAdd(backup.data.positions || []),\r\n          db.todos?.bulkAdd(backup.data.todos || []),\r\n          db.memos?.bulkAdd(backup.data.memos || []),\r\n          db.accounts?.bulkAdd(backup.data.accounts || []),\r\n        ].filter(Boolean)\r\n      );\r\n    } catch (error) {\r\n      // 복원 실패 시 임시 백업에서 복구\r\n      console.error(\"복원 실패, 이전 상태로 복구 중:\", error);\r\n      await restoreFromTempBackup(tempBackup);\r\n      throw new Error(\"백업 복원 실패. 이전 상태로 복구되었습니다.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"백업 복원 중 오류:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst restoreFromTempBackup = async (tempBackup: BackupData) => {\r\n  try {\r\n    await db.delete();\r\n    await db.open();\r\n\r\n    await Promise.all(\r\n      [\r\n        db.portfolios?.bulkAdd(tempBackup.data.portfolios || []),\r\n        db.positions?.bulkAdd(tempBackup.data.positions || []),\r\n        db.todos?.bulkAdd(tempBackup.data.todos || []),\r\n        db.memos?.bulkAdd(tempBackup.data.memos || []),\r\n        db.accounts?.bulkAdd(tempBackup.data.accounts || []),\r\n      ].filter(Boolean)\r\n    );\r\n  } catch (error) {\r\n    console.error(\"임시 백업 복구 중 오류:\", error);\r\n    throw new Error(\"임시 백업 복구 실패\");\r\n  }\r\n};\r\n\r\nexport const getBackupList = (): Array<{ timestamp: number; name: string }> => {\r\n  const backupListJson = localStorage.getItem(\"db_backups\");\r\n  return backupListJson ? JSON.parse(backupListJson) : [];\r\n};\r\n\r\nexport const deleteBackup = (timestamp: number): void => {\r\n  // 백업 목록에서 제거\r\n  const backupList = getBackupList().filter(\r\n    (backup) => backup.timestamp !== timestamp\r\n  );\r\n  localStorage.setItem(\"db_backups\", JSON.stringify(backupList));\r\n\r\n  // 백업 데이터 삭제\r\n  localStorage.removeItem(`db_backup_${timestamp}`);\r\n};\r\n\r\nexport const exportBackup = async (): Promise<string> => {\r\n  try {\r\n    const [portfolios, positions, todos, memos, accounts] = await Promise.all([\r\n      db.portfolios?.toArray() || [],\r\n      db.positions?.toArray() || [],\r\n      db.todos?.toArray() || [],\r\n      db.memos?.toArray() || [],\r\n      db.accounts?.toArray() || [],\r\n    ]);\r\n\r\n    const backupData: BackupData = {\r\n      timestamp: Date.now(),\r\n      name: `export_${new Date().toISOString()}`,\r\n      dbVersion: db.verno,\r\n      data: {\r\n        portfolios,\r\n        positions,\r\n        todos,\r\n        memos,\r\n        accounts,\r\n      },\r\n    };\r\n\r\n    const blob = new Blob([JSON.stringify(backupData, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n\r\n    return URL.createObjectURL(blob);\r\n  } catch (error) {\r\n    console.error(\"Error creating backup:\", error);\r\n    throw new Error(\"백업 생성 중 오류가 발생했습니다.\");\r\n  }\r\n};\r\n\r\nexport const importBackup = async (file: File): Promise<void> => {\r\n  try {\r\n    const text = await file.text();\r\n    const backupData: BackupData = JSON.parse(text);\r\n\r\n    // 데이터 유효성 검사\r\n    if (!backupData.data) {\r\n      throw new Error(\"유효하지 않은 백업 파일입니다.\");\r\n    }\r\n\r\n    // 기존 데이터 삭제\r\n    await Promise.all(\r\n      [\r\n        db.portfolios?.clear(),\r\n        db.positions?.clear(),\r\n        db.todos?.clear(),\r\n        db.memos?.clear(),\r\n        db.accounts?.clear(),\r\n      ].filter(Boolean)\r\n    );\r\n\r\n    // 백업 데이터 복원\r\n    await Promise.all(\r\n      [\r\n        db.portfolios?.bulkAdd(backupData.data.portfolios || []),\r\n        db.positions?.bulkAdd(backupData.data.positions || []),\r\n        db.todos?.bulkAdd(backupData.data.todos || []),\r\n        db.memos?.bulkAdd(backupData.data.memos || []),\r\n        db.accounts?.bulkAdd(backupData.data.accounts || []),\r\n      ].filter(Boolean)\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error importing backup:\", error);\r\n    throw new Error(\"백업 복원 중 오류가 발생했습니다.\");\r\n  }\r\n};\r\n","import {\r\n    BanknotesIcon,\r\n    ChartBarIcon,\r\n    Cog6ToothIcon,\r\n    DocumentTextIcon,\r\n    HomeIcon,\r\n    PresentationChartLineIcon,\r\n} from \"@heroicons/react/24/outline\";\r\nimport React, { Suspense, lazy, useEffect } from \"react\";\r\nimport { Link, Navigate, Route, Routes } from \"react-router-dom\";\r\nimport { LoadingSpinner } from \"./components/LoadingSpinner\";\r\nimport { checkAndCreateAutoBackup } from \"./utils/backup\";\r\n\r\n// Lazy-loaded components\r\nconst MainPage = lazy(() =>\r\n  import(\"./pages/MainPage\").then((module) => ({ default: module.MainPage }))\r\n);\r\nconst PortfolioList = lazy(() =>\r\n  import(\"./pages/PortfolioList\").then((module) => ({\r\n    default: module.PortfolioList,\r\n  }))\r\n);\r\nconst NewPortfolioPage = lazy(() =>\r\n  import(\"./pages/NewPortfolio\").then((module) => ({\r\n    default: module.NewPortfolioPage,\r\n  }))\r\n);\r\nconst PortfolioDetail = lazy(() =>\r\n  import(\"./pages/PortfolioDetail\").then((module) => ({\r\n    default: module.PortfolioDetail,\r\n  }))\r\n);\r\nconst PortfolioConfigPage = lazy(() =>\r\n  import(\"./pages/PortfolioConfigPage\").then((module) => ({\r\n    default: module.PortfolioConfigPage,\r\n  }))\r\n);\r\nconst AccountList = lazy(() =>\r\n  import(\"./pages/AccountList\").then((module) => ({\r\n    default: module.AccountList,\r\n  }))\r\n);\r\nconst NewAccount = lazy(() =>\r\n  import(\"./pages/NewAccount\").then((module) => ({\r\n    default: module.NewAccount,\r\n  }))\r\n);\r\nconst AccountDetailPage = lazy(() =>\r\n  import(\"./pages/AccountDetail\").then((module) => ({\r\n    default: module.AccountDetailPage,\r\n  }))\r\n);\r\nconst EditAccountPage = lazy(() =>\r\n  import(\"./pages/EditAccount\").then((module) => ({\r\n    default: module.EditAccountPage,\r\n  }))\r\n);\r\nconst NewPositionPage = lazy(() =>\r\n  import(\"./pages/NewPosition\").then((module) => ({\r\n    default: module.NewPositionPage,\r\n  }))\r\n);\r\nconst EditPositionPage = lazy(() =>\r\n  import(\"./pages/EditPosition\").then((module) => ({\r\n    default: module.EditPosition,\r\n  }))\r\n);\r\nconst ConsolidatedView = lazy(() =>\r\n  import(\"./pages/ConsolidatedView\").then((module) => ({\r\n    default: module.ConsolidatedView,\r\n  }))\r\n);\r\nconst MemoListPage = lazy(() =>\r\n  import(\"./pages/MemoListPage\").then((module) => ({\r\n    default: module.MemoListPage,\r\n  }))\r\n);\r\nconst MemoDetailPage = lazy(() =>\r\n  import(\"./pages/MemoDetailPage\").then((module) => ({\r\n    default: module.MemoDetailPage,\r\n  }))\r\n);\r\nconst SettingsPage = lazy(() =>\r\n  import(\"./pages/SettingsPage\").then((module) => ({\r\n    default: module.SettingsPage,\r\n  }))\r\n);\r\nconst TodoPage = lazy(() =>\r\n  import(\"./pages/TodoPage\").then((module) => ({ default: module.TodoPage }))\r\n);\r\nconst InvestmentPlansPage = lazy(() =>\r\n  import(\"./pages/InvestmentPlansPage\").then((module) => ({ \r\n    default: module.InvestmentPlansPage \r\n  }))\r\n);\r\nconst InvestmentPlanDetailPage = lazy(() =>\r\n  import(\"./pages/InvestmentPlanDetailPage\").then((module) => ({ \r\n    default: module.InvestmentPlanDetailPage \r\n  }))\r\n);\r\nconst InvestmentRulesPage = lazy(() =>\r\n  import(\"./pages/InvestmentRulesPage\").then((module) => ({ \r\n    default: module.InvestmentRulesPage \r\n  }))\r\n);\r\n\r\nexport const App: React.FC = () => {\r\n  useEffect(() => {\r\n    // 앱 시작 시 자동 백업 체크\r\n    checkAndCreateAutoBackup();\r\n\r\n    // 주기적으로 자동 백업 체크 (1시간마다)\r\n    const interval = setInterval(() => {\r\n      checkAndCreateAutoBackup();\r\n    }, 60 * 60 * 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <Suspense fallback={<LoadingSpinner />}>\r\n      <div className=\"min-h-screen bg-gray-900 text-white flex flex-col\">\r\n        <main className=\"flex-1 pb-16\">\r\n          <Routes>\r\n            <Route path=\"/\" element={<MainPage />} />\r\n            <Route path=\"/portfolios\" element={<PortfolioList />} />\r\n            <Route path=\"/portfolios/new\" element={<NewPortfolioPage />} />\r\n            <Route\r\n              path=\"/portfolios/:portfolioId\"\r\n              element={<PortfolioDetail />}\r\n            />\r\n            <Route\r\n              path=\"/portfolios/:portfolioId/config\"\r\n              element={<PortfolioConfigPage />}\r\n            />\r\n            <Route path=\"/accounts\" element={<AccountList />} />\r\n            <Route path=\"/accounts/new\" element={<NewAccount />} />\r\n            <Route\r\n              path=\"/accounts/:accountId\"\r\n              element={<AccountDetailPage />}\r\n            />\r\n            <Route\r\n              path=\"/accounts/:accountId/edit\"\r\n              element={<EditAccountPage />}\r\n            />\r\n            <Route\r\n              path=\"/accounts/:accountId/positions/new\"\r\n              element={<NewPositionPage />}\r\n            />\r\n            <Route\r\n              path=\"/accounts/:accountId/positions/:positionId/edit\"\r\n              element={<EditPositionPage />}\r\n            />\r\n            <Route path=\"/consolidated\" element={<ConsolidatedView />} />\r\n            <Route path=\"/memos\" element={<MemoListPage />} />\r\n            <Route path=\"/memos/:id\" element={<MemoDetailPage />} />\r\n            <Route path=\"/settings\" element={<SettingsPage />} />\r\n            <Route path=\"/todo\" element={<TodoPage />} />\r\n            <Route \r\n              path=\"/portfolios/:portfolioId/investment-plans\" \r\n              element={<InvestmentPlansPage />} \r\n            />\r\n            <Route \r\n              path=\"/portfolios/:portfolioId/investment-plans/:planId\" \r\n              element={<InvestmentPlanDetailPage />} \r\n            />\r\n            <Route \r\n              path=\"/portfolios/:portfolioId/investment-rules\" \r\n              element={<InvestmentRulesPage />} \r\n            />\r\n            <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\r\n          </Routes>\r\n        </main>\r\n\r\n        <nav className=\"fixed bottom-0 left-0 right-0 bg-gray-800 border-t border-gray-700\">\r\n          <div className=\"max-w-md mx-auto px-4\">\r\n            <div className=\"flex justify-around py-2\">\r\n              <Link\r\n                to=\"/\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <HomeIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">홈</span>\r\n              </Link>\r\n              <Link\r\n                to=\"/portfolios\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <ChartBarIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">포트폴리오</span>\r\n              </Link>\r\n              <Link\r\n                to=\"/accounts\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <BanknotesIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">계좌</span>\r\n              </Link>\r\n              <Link\r\n                to=\"/consolidated\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <PresentationChartLineIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">전체보기</span>\r\n              </Link>\r\n              <Link\r\n                to=\"/memos\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <DocumentTextIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">메모</span>\r\n              </Link>\r\n              <Link\r\n                to=\"/settings\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <Cog6ToothIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">설정</span>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename=\"/jinwoo\">\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n);\r\n"],"file":"assets/index-e48b942e.js"}