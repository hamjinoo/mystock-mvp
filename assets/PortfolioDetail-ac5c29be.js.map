{"version":3,"file":"PortfolioDetail-ac5c29be.js","sources":["../../src/pages/PortfolioDetail.tsx"],"sourcesContent":["import { ArrowLeftIcon } from \"@heroicons/react/24/outline\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport {\r\n  Cell,\r\n  Legend,\r\n  Pie,\r\n  PieChart,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n} from \"recharts\";\r\nimport { LoadingSpinner } from \"../components/LoadingSpinner\";\r\nimport { CHART_COLORS } from \"../constants/ui\";\r\nimport { PortfolioService } from \"../services/portfolioService\";\r\nimport { Portfolio, Position } from \"../types\";\r\nimport { formatCurrency } from \"../utils/currencyUtils\";\r\n\r\ninterface PortfolioSummary {\r\n  totalValue: number;\r\n  totalCost: number;\r\n  returnRate: number;\r\n  positions: Position[];\r\n}\r\n\r\ninterface ChartData {\r\n  name: string;\r\n  symbol: string;\r\n  value: number;\r\n  percentage: number;\r\n}\r\n\r\nexport const PortfolioDetail: React.FC = () => {\r\n  const { portfolioId } = useParams<{ portfolioId: string }>();\r\n  const navigate = useNavigate();\r\n  const [portfolio, setPortfolio] = useState<Portfolio>();\r\n  const [summary, setSummary] = useState<PortfolioSummary>();\r\n  const [loading, setLoading] = useState(true);\r\n  const [chartData, setChartData] = useState<ChartData[]>([]);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [portfolioId]);\r\n\r\n  const loadData = async () => {\r\n    if (!portfolioId) return;\r\n\r\n    try {\r\n      const [portfolioData, summaryData] = await Promise.all([\r\n        PortfolioService.getById(Number(portfolioId)),\r\n        PortfolioService.getPortfolioSummary(Number(portfolioId)),\r\n      ]);\r\n\r\n      if (!portfolioData) {\r\n        throw new Error(\"포트폴리오를 찾을 수 없습니다.\");\r\n      }\r\n\r\n      setPortfolio(portfolioData);\r\n      setSummary(summaryData);\r\n\r\n      // 차트 데이터 생성\r\n      if (summaryData.positions.length > 0) {\r\n        const chartData = summaryData.positions\r\n          .map((position: Position) => {\r\n            const value = position.quantity * position.currentPrice;\r\n            return {\r\n              name: position.name,\r\n              symbol: position.symbol,\r\n              value,\r\n              percentage:\r\n                summaryData.totalValue > 0\r\n                  ? (value / summaryData.totalValue) * 100\r\n                  : 0,\r\n            };\r\n          })\r\n          .sort((a: ChartData, b: ChartData) => b.value - a.value);\r\n\r\n        setChartData(chartData);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"포트폴리오 정보 로딩 중 오류:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-screen\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!portfolio || !summary) {\r\n    return (\r\n      <div className=\"p-4\">\r\n        <div className=\"text-center\">\r\n          <p className=\"text-gray-400\">포트폴리오를 찾을 수 없습니다.</p>\r\n          <Link\r\n            to=\"/portfolios\"\r\n            className=\"inline-block mt-4 text-blue-500 hover:text-blue-400\"\r\n          >\r\n            포트폴리오 목록으로 돌아가기\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-4 pb-20\">\r\n      <div className=\"max-w-6xl mx-auto\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <button\r\n            onClick={() => navigate(\"/portfolios\")}\r\n            className=\"text-sm text-gray-400 hover:text-white flex items-center\"\r\n          >\r\n            <ArrowLeftIcon className=\"h-4 w-4 mr-1\" />\r\n            뒤로\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"bg-gray-800 rounded-lg p-6 mb-6\">\r\n          <h1 className=\"text-2xl font-bold mb-4\">{portfolio.name}</h1>\r\n          <div className=\"grid grid-cols-3 gap-4\">\r\n            <div>\r\n              <p className=\"text-sm text-gray-400\">총자산</p>\r\n              <p className=\"font-medium\">\r\n                {formatCurrency(\r\n                  summary.totalValue,\r\n                  (portfolio?.currency as \"KRW\" | \"USD\") || \"KRW\"\r\n                )}\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <p className=\"text-sm text-gray-400\">수익률</p>\r\n              <p\r\n                className={`font-medium ${\r\n                  summary.returnRate >= 0 ? \"text-green-400\" : \"text-red-400\"\r\n                }`}\r\n              >\r\n                {summary.returnRate.toFixed(2)}%\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <p className=\"text-sm text-gray-400\">투자 기간</p>\r\n              <p className=\"font-medium\">\r\n                {portfolio.config?.period || \"미설정\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\r\n          <div className=\"bg-gray-800 rounded-lg p-6\">\r\n            <h2 className=\"text-xl font-bold mb-4\">자산 구성</h2>\r\n            <div className=\"h-[400px]\">\r\n              {chartData.length > 0 ? (\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={chartData}\r\n                      dataKey=\"value\"\r\n                      nameKey=\"symbol\"\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      innerRadius={60}\r\n                      outerRadius={100}\r\n                      paddingAngle={2}\r\n                    >\r\n                      {chartData.map((entry, index) => (\r\n                        <Cell\r\n                          key={`cell-${index}`}\r\n                          fill={CHART_COLORS[index % CHART_COLORS.length]}\r\n                        />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip\r\n                      formatter={(value: number) => [\r\n                        formatCurrency(\r\n                          value,\r\n                          (portfolio?.currency as \"KRW\" | \"USD\") || \"KRW\"\r\n                        ),\r\n                        \"평가금액\",\r\n                      ]}\r\n                    />\r\n                    <Legend />\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              ) : (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                  <p className=\"text-gray-400\">보유 종목이 없습니다.</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bg-gray-800 rounded-lg p-6\">\r\n            <h2 className=\"text-xl font-bold mb-4\">보유 종목</h2>\r\n            <div className=\"space-y-4\">\r\n              {summary.positions.map((position, index) => {\r\n                const value = position.quantity * position.currentPrice;\r\n                const allocation =\r\n                  summary.totalValue > 0\r\n                    ? (value / summary.totalValue) * 100\r\n                    : 0;\r\n                const returnRate =\r\n                  ((position.currentPrice - position.avgPrice) /\r\n                    position.avgPrice) *\r\n                  100;\r\n\r\n                return (\r\n                  <div\r\n                    key={position.id}\r\n                    className=\"flex items-center justify-between p-4 bg-gray-700 rounded-lg\"\r\n                  >\r\n                    <div className=\"flex items-center\">\r\n                      <div\r\n                        className=\"w-3 h-3 rounded-full mr-2\"\r\n                        style={{\r\n                          backgroundColor:\r\n                            CHART_COLORS[index % CHART_COLORS.length],\r\n                        }}\r\n                      />\r\n                      <div>\r\n                        <p className=\"font-medium\">{position.name}</p>\r\n                        <p className=\"text-sm text-gray-400\">\r\n                          {position.symbol}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <p className=\"font-medium\">\r\n                        {formatCurrency(\r\n                          value,\r\n                          (portfolio?.currency as \"KRW\" | \"USD\") || \"KRW\"\r\n                        )}\r\n                      </p>\r\n                      <p className=\"text-sm text-gray-400\">\r\n                        {allocation.toFixed(1)}%\r\n                      </p>\r\n                      <p\r\n                        className={`text-sm ${\r\n                          returnRate >= 0 ? \"text-green-400\" : \"text-red-400\"\r\n                        }`}\r\n                      >\r\n                        {returnRate.toFixed(2)}%\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"names":["PortfolioDetail","portfolioId","useParams","navigate","useNavigate","portfolio","setPortfolio","useState","summary","setSummary","loading","setLoading","chartData","setChartData","useEffect","loadData","async","portfolioData","summaryData","Promise","all","PortfolioService","getById","Number","getPortfolioSummary","Error","positions","length","map","position","value","quantity","currentPrice","name","symbol","percentage","totalValue","sort","a","b","error","className","children","jsx","LoadingSpinner","jsxs","onClick","ArrowLeftIcon","formatCurrency","currency","returnRate","toFixed","config","period","ResponsiveContainer","width","height","PieChart","Pie","data","dataKey","nameKey","cx","cy","innerRadius","outerRadius","paddingAngle","entry","index","Cell","fill","CHART_COLORS","Tooltip","formatter","Legend","allocation","avgPrice","style","backgroundColor","id","Link","to"],"mappings":"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"}