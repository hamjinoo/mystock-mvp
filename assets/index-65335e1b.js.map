{"version":3,"mappings":"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","names":["CHART_COLORS","SPINNER_SIZES","sm","md","lg","LoadingSpinner","message","size","className","jsxs","children","jsx","db","Dexie","constructor","super","this","version","stores","accounts","portfolios","positions","todos","upgrade","tx","table","toCollection","modify","todo","portfolioId","portfolioGroupId","memos","getAccounts","toArray","getAccountById","id","get","addAccount","account","accountData","createdAt","Date","now","add","updateAccount","update","deleteAccount","portfolioIds","where","equals","map","p","anyOf","delete","addPortfolio","portfolio","order","length","addPosition","position","positionsInPortfolio","positionWithDefaults","strategyCategory","strategyTags","entryCount","maxEntries","targetQuantity","quantity","addTodo","addMemo","memo","memoData","updatedAt","updatePortfolio","updatePosition","updateData","updateTodo","updateMemo","getPortfolioWithPositions","exportData","Promise","all","timestamp","data","error","importData","dbVersion","Error","transaction","async","clear","bulkAdd","getMemos","orderBy","reverse","getMemoById","deleteMemo","on","open","catch","err","name","window","location","reload","needsAutoBackup","lastBackupTime","time","localStorage","getItem","parseInt","getLastAutoBackupTime","checkAndCreateAutoBackup","date","toLocaleDateString","createBackup","setItem","toString","autoBackups","getBackupList","filter","b","startsWith","sort","a","slice","forEach","backup","deleteBackup","cleanupOldAutoBackups","isOpen","verno","validateBackupData","backupList","push","JSON","stringify","Array","isArray","Set","every","has","restoreBackup","backupJson","parse","tempBackup","toLocaleString","Boolean","restoreFromTempBackup","backupListJson","removeItem","MainPage","lazy","__vitePreload","import","then","module","default","PortfolioList","NewPortfolioPage","PortfolioDetail","PortfolioConfigPage","AccountList","NewAccount","AccountDetailPage","EditAccountPage","NewPositionPage","EditPositionPage","EditPosition","ConsolidatedView","MemoListPage","MemoDetailPage","SettingsPage","TodoPage","App","useEffect","interval","setInterval","clearInterval","Suspense","fallback","Routes","Route","path","element","Navigate","to","replace","Link","HomeIcon","ChartBarIcon","PresentationChartLineIcon","DocumentTextIcon","Cog6ToothIcon","ReactDOM","createRoot","document","getElementById","render","React","StrictMode","BrowserRouter","basename"],"sources":["../../src/constants/ui.ts","../../src/components/LoadingSpinner.tsx","../../src/services/db.ts","../../src/utils/backup.ts","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\r\n * UI 관련 상수 정의\r\n */\r\n\r\n// 색상 팔레트\r\nexport const CHART_COLORS = [\r\n  \"#00C49F\",\r\n  \"#0088FE\",\r\n  \"#FFBB28\",\r\n  \"#FF8042\",\r\n  \"#8884D8\",\r\n  \"#82CA9D\",\r\n  \"#FF6B6B\",\r\n  \"#4ECDC4\",\r\n  \"#45B7D1\",\r\n  \"#96CEB4\",\r\n] as const;\r\n\r\n// 로딩 스피너 크기\r\nexport const SPINNER_SIZES = {\r\n  sm: \"h-4 w-4\",\r\n  md: \"h-8 w-8\",\r\n  lg: \"h-12 w-12\",\r\n} as const;\r\n\r\n// 투자 전략 카테고리\r\nexport const STRATEGY_CATEGORIES = {\r\n  LONG_TERM: \"장기투자\",\r\n  MID_TERM: \"중기투자\",\r\n  SHORT_TERM: \"단기투자\",\r\n  UNCATEGORIZED: \"미분류\",\r\n} as const;\r\n\r\n// 통화 기호\r\nexport const CURRENCY_SYMBOLS = {\r\n  KRW: \"₩\",\r\n  USD: \"$\",\r\n} as const;\r\n\r\n// 기본 애니메이션 클래스\r\nexport const ANIMATIONS = {\r\n  SPINNER: \"animate-spin rounded-full border-b-2 border-gray-300\",\r\n  FADE_IN: \"transition-opacity duration-200\",\r\n  SLIDE_IN: \"transition-transform duration-200\",\r\n} as const;\r\n","import React from \"react\";\r\nimport { SPINNER_SIZES } from \"../constants/ui\";\r\n\r\ninterface LoadingSpinnerProps {\r\n  message?: string;\r\n  size?: keyof typeof SPINNER_SIZES;\r\n  className?: string;\r\n}\r\n\r\nexport const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({\r\n  message = \"로딩 중...\",\r\n  size = \"md\",\r\n  className = \"\",\r\n}) => {\r\n  return (\r\n    <div className={`flex flex-col justify-center items-center ${className}`}>\r\n      <div\r\n        className={`animate-spin rounded-full border-b-2 border-gray-300 ${SPINNER_SIZES[size]}`}\r\n      ></div>\r\n      {message && <p className=\"text-gray-400 text-sm mt-2\">{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n","import Dexie, { Table, Transaction } from \"dexie\";\r\nimport {\r\n  Account,\r\n  Memo,\r\n  NewMemo,\r\n  NewPortfolio,\r\n  NewPosition,\r\n  NewTodo,\r\n  Portfolio,\r\n  Position,\r\n  Todo,\r\n} from \"../types\";\r\n\r\ninterface BackupData {\r\n  timestamp: number;\r\n  name: string;\r\n  dbVersion: number;\r\n  data: {\r\n    portfolios: Portfolio[];\r\n    positions: Position[];\r\n    todos: Todo[];\r\n    memos: Memo[];\r\n    accounts: Account[];\r\n  };\r\n}\r\n\r\nexport class MyStockDatabase extends Dexie {\r\n  portfolios!: Table<Portfolio>;\r\n  positions!: Table<Position>;\r\n  todos!: Table<Todo>;\r\n  memos!: Table<Memo>;\r\n  accounts!: Table<Account>;\r\n\r\n  constructor() {\r\n    super(\"MyStockDB\");\r\n\r\n    this.version(1).stores({\r\n      accounts: \"++id, broker, accountNumber, currency\",\r\n      portfolios: \"++id, accountId, name, currency\",\r\n      positions: \"++id, portfolioId, symbol, strategyCategory\",\r\n      todos: \"++id, portfolioId, completed, createdAt\",\r\n    });\r\n\r\n    this.version(7).upgrade((tx: Transaction) => {\r\n      return tx\r\n        .table(\"todos\")\r\n        .toCollection()\r\n        .modify((todo: Todo) => {\r\n          if (\"portfolioGroupId\" in todo) {\r\n            (todo as any).portfolioId = (todo as any).portfolioGroupId;\r\n            delete (todo as any).portfolioGroupId;\r\n          }\r\n        });\r\n    });\r\n\r\n    // 메모 테이블 추가\r\n    this.version(8).stores({\r\n      accounts: \"++id, broker, accountNumber, currency\",\r\n      portfolios: \"++id, accountId, name, currency\",\r\n      positions: \"++id, portfolioId, symbol, strategyCategory\",\r\n      todos: \"++id, portfolioId, completed, createdAt\",\r\n      memos: \"++id, title, content, createdAt, updatedAt\",\r\n    });\r\n  }\r\n\r\n  async getAccounts(): Promise<Account[]> {\r\n    return await this.accounts.toArray();\r\n  }\r\n\r\n  async getAccountById(id: number): Promise<Account | undefined> {\r\n    return await this.accounts.get(id);\r\n  }\r\n\r\n  async addAccount(account: Omit<Account, \"id\">): Promise<number> {\r\n    const accountData = {\r\n      ...account,\r\n      createdAt: Date.now(),\r\n    } as Account;\r\n    return await this.accounts.add(accountData);\r\n  }\r\n\r\n  async updateAccount(id: number, account: Partial<Account>): Promise<void> {\r\n    await this.accounts.update(id, account);\r\n  }\r\n\r\n  async deleteAccount(id: number): Promise<void> {\r\n    // 계좌에 속한 포트폴리오와 포지션도 함께 삭제\r\n    const portfolios = await this.portfolios\r\n      .where(\"accountId\")\r\n      .equals(id)\r\n      .toArray();\r\n    const portfolioIds = portfolios.map((p) => p.id);\r\n\r\n    // 포지션 삭제\r\n    await this.positions.where(\"portfolioId\").anyOf(portfolioIds).delete();\r\n    // 포트폴리오 삭제\r\n    await this.portfolios.where(\"accountId\").equals(id).delete();\r\n    // 계좌 삭제\r\n    await this.accounts.delete(id);\r\n  }\r\n\r\n  async addPortfolio(portfolio: NewPortfolio): Promise<number> {\r\n    const portfolios = await this.portfolios.toArray();\r\n    const order = portfolios.length;\r\n    return await this.portfolios.add({ ...portfolio, order } as Portfolio);\r\n  }\r\n\r\n  async addPosition(position: NewPosition): Promise<number> {\r\n    const positionsInPortfolio = await this.positions\r\n      .where(\"portfolioId\")\r\n      .equals(position.portfolioId)\r\n      .toArray();\r\n\r\n    const positionWithDefaults = {\r\n      ...position,\r\n      strategyCategory: position.strategyCategory || \"UNCATEGORIZED\",\r\n      strategyTags: position.strategyTags || [],\r\n      entryCount: position.entryCount || 1,\r\n      maxEntries: position.maxEntries || 1,\r\n      targetQuantity: position.targetQuantity || position.quantity,\r\n      order: positionsInPortfolio.length,\r\n    } as Position;\r\n\r\n    return await this.positions.add(positionWithDefaults);\r\n  }\r\n\r\n  async addTodo(todo: NewTodo): Promise<number> {\r\n    return await this.todos.add(todo as Todo);\r\n  }\r\n\r\n  async addMemo(memo: NewMemo): Promise<number> {\r\n    const memoData = {\r\n      ...memo,\r\n      createdAt: Date.now(),\r\n      updatedAt: Date.now(),\r\n    } as Memo;\r\n    return await this.memos.add(memoData);\r\n  }\r\n\r\n  async updatePortfolio(portfolio: Portfolio) {\r\n    return await this.portfolios.update(portfolio.id, portfolio);\r\n  }\r\n\r\n  async updatePosition(position: Position) {\r\n    const { id, ...updateData } = position;\r\n    return await this.positions.update(id, updateData);\r\n  }\r\n\r\n  async updateTodo(todo: Todo) {\r\n    return await this.todos.update(todo.id, todo);\r\n  }\r\n\r\n  async updateMemo(memo: Memo) {\r\n    return await this.memos.update(memo.id, {\r\n      ...memo,\r\n      updatedAt: Date.now(),\r\n    });\r\n  }\r\n\r\n  async getPortfolioWithPositions(portfolioId: number) {\r\n    const portfolio = await this.portfolios.get(portfolioId);\r\n    if (!portfolio) return null;\r\n\r\n    const positions = await this.positions\r\n      .where(\"portfolioId\")\r\n      .equals(portfolioId)\r\n      .toArray();\r\n\r\n    return {\r\n      ...portfolio,\r\n      positions,\r\n    };\r\n  }\r\n\r\n  async exportData() {\r\n    try {\r\n      const [portfolios, positions, todos, memos, accounts] = await Promise.all(\r\n        [\r\n          this.portfolios.toArray(),\r\n          this.positions.toArray(),\r\n          this.todos.toArray(),\r\n          this.memos.toArray(),\r\n          this.accounts.toArray(),\r\n        ]\r\n      );\r\n\r\n      return {\r\n        version: 7,\r\n        timestamp: Date.now(),\r\n        data: {\r\n          portfolios,\r\n          positions,\r\n          todos,\r\n          memos,\r\n          accounts,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error exporting data:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async importData(importData: BackupData) {\r\n    try {\r\n      if (!importData.data || !importData.dbVersion) {\r\n        throw new Error(\"Invalid backup data format\");\r\n      }\r\n\r\n      await this.transaction(\r\n        \"rw\",\r\n        [\r\n          this.portfolios,\r\n          this.positions,\r\n          this.todos,\r\n          this.memos,\r\n          this.accounts,\r\n        ],\r\n        async () => {\r\n          await Promise.all([\r\n            this.portfolios.clear(),\r\n            this.positions.clear(),\r\n            this.todos.clear(),\r\n            this.memos.clear(),\r\n            this.accounts.clear(),\r\n          ]);\r\n\r\n          await Promise.all([\r\n            this.portfolios.bulkAdd(importData.data.portfolios),\r\n            this.positions.bulkAdd(importData.data.positions),\r\n            this.todos.bulkAdd(importData.data.todos),\r\n            this.memos.bulkAdd(importData.data.memos),\r\n            this.accounts.bulkAdd(importData.data.accounts || []),\r\n          ]);\r\n        }\r\n      );\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error importing data:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMemos(): Promise<Memo[]> {\r\n    return await this.memos.orderBy(\"updatedAt\").reverse().toArray();\r\n  }\r\n\r\n  async getMemoById(id: number): Promise<Memo | undefined> {\r\n    return await this.memos.get(id);\r\n  }\r\n\r\n  async deleteMemo(id: number): Promise<void> {\r\n    await this.memos.delete(id);\r\n  }\r\n}\r\n\r\nexport const db = new MyStockDatabase();\r\n\r\n// 데이터베이스 연결 상태 확인\r\ndb.on(\"ready\", () => console.log(\"데이터베이스가 준비되었습니다.\"));\r\n\r\n// 오류 처리\r\ndb.open().catch(async (err: Error) => {\r\n  console.error(\"데이터베이스 오류:\", err);\r\n\r\n  if (err.name === \"SchemaError\") {\r\n    console.log(\"스키마 오류로 인해 데이터베이스를 재설정합니다...\");\r\n    await db.delete();\r\n    window.location.reload();\r\n  }\r\n});\r\n\r\n// 서버 초기화 시도를 제거하고 로컬 데이터베이스만 사용\r\n// db.initializeFromServer().catch(console.error);\r\n","import { db } from \"../services/db\";\r\nimport { Account, Memo, Portfolio, Position, Todo } from \"../types\";\r\n\r\ninterface BackupData {\r\n  timestamp: number;\r\n  name: string;\r\n  dbVersion: number;\r\n  data: {\r\n    portfolios: Portfolio[];\r\n    positions: Position[];\r\n    todos: Todo[];\r\n    memos: Memo[];\r\n    accounts: Account[];\r\n  };\r\n}\r\n\r\n// 자동 백업 간격 (1일)\r\nconst AUTO_BACKUP_INTERVAL = 24 * 60 * 60 * 1000;\r\nconst MAX_AUTO_BACKUPS = 5;\r\n\r\n// 마지막 자동 백업 시간 확인\r\nconst getLastAutoBackupTime = (): number => {\r\n  const time = localStorage.getItem(\"last_auto_backup_time\");\r\n  return time ? parseInt(time) : 0;\r\n};\r\n\r\n// 자동 백업 시간 업데이트\r\nconst updateLastAutoBackupTime = () => {\r\n  localStorage.setItem(\"last_auto_backup_time\", Date.now().toString());\r\n};\r\n\r\n// 자동 백업 필요 여부 확인\r\nconst needsAutoBackup = (): boolean => {\r\n  const lastBackupTime = getLastAutoBackupTime();\r\n  return Date.now() - lastBackupTime >= AUTO_BACKUP_INTERVAL;\r\n};\r\n\r\n// 오래된 자동 백업 정리\r\nconst cleanupOldAutoBackups = () => {\r\n  const backupList = getBackupList();\r\n  const autoBackups = backupList.filter((b) => b.name.startsWith(\"자동백업_\"));\r\n  if (autoBackups.length > MAX_AUTO_BACKUPS) {\r\n    // 가장 오래된 자동 백업들 삭제\r\n    autoBackups\r\n      .sort((a, b) => b.timestamp - a.timestamp)\r\n      .slice(MAX_AUTO_BACKUPS)\r\n      .forEach((backup) => deleteBackup(backup.timestamp));\r\n  }\r\n};\r\n\r\nexport const checkAndCreateAutoBackup = async () => {\r\n  if (needsAutoBackup()) {\r\n    try {\r\n      const timestamp = Date.now();\r\n      const date = new Date().toLocaleDateString(\"ko-KR\");\r\n      await createBackup(`자동백업_${date}`);\r\n      updateLastAutoBackupTime();\r\n      cleanupOldAutoBackups();\r\n    } catch (error) {\r\n      console.error(\"자동 백업 생성 중 오류:\", error);\r\n    }\r\n  }\r\n};\r\n\r\nexport const createBackup = async (name: string): Promise<BackupData> => {\r\n  try {\r\n    // DB가 열려있는지 확인\r\n    if (!db.isOpen()) {\r\n      await db.open();\r\n    }\r\n\r\n    const [portfolios, positions, todos, memos, accounts] = await Promise.all([\r\n      db.portfolios?.toArray() || [],\r\n      db.positions?.toArray() || [],\r\n      db.todos?.toArray() || [],\r\n      db.memos?.toArray() || [],\r\n      db.accounts?.toArray() || [],\r\n    ]);\r\n\r\n    const backup: BackupData = {\r\n      timestamp: Date.now(),\r\n      name,\r\n      dbVersion: db.verno,\r\n      data: {\r\n        portfolios,\r\n        positions,\r\n        todos,\r\n        memos,\r\n        accounts,\r\n      },\r\n    };\r\n\r\n    // 백업 데이터 유효성 검사\r\n    if (!validateBackupData(backup)) {\r\n      throw new Error(\"백업 데이터 유효성 검사 실패\");\r\n    }\r\n\r\n    // 로컬 스토리지에 백업 목록 저장\r\n    const backupList = getBackupList();\r\n    backupList.push({\r\n      timestamp: backup.timestamp,\r\n      name: backup.name,\r\n    });\r\n    localStorage.setItem(\"db_backups\", JSON.stringify(backupList));\r\n\r\n    // 백업 데이터 저장\r\n    localStorage.setItem(\r\n      `db_backup_${backup.timestamp}`,\r\n      JSON.stringify(backup)\r\n    );\r\n\r\n    return backup;\r\n  } catch (error) {\r\n    console.error(\"백업 생성 중 오류:\", error);\r\n    throw new Error(\"백업 생성 중 오류가 발생했습니다.\");\r\n  }\r\n};\r\n\r\nconst validateBackupData = (backup: BackupData): boolean => {\r\n  try {\r\n    // 필수 필드 존재 확인\r\n    if (!backup.timestamp || !backup.name || !backup.data) {\r\n      return false;\r\n    }\r\n\r\n    // 데이터 형식 확인\r\n    if (\r\n      !Array.isArray(backup.data.portfolios) ||\r\n      !Array.isArray(backup.data.positions) ||\r\n      !Array.isArray(backup.data.todos) ||\r\n      !Array.isArray(backup.data.memos) ||\r\n      !Array.isArray(backup.data.accounts)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // 데이터 무결성 확인\r\n    const portfolioIds = new Set(backup.data.portfolios.map((p) => p.id));\r\n    const validPositions = backup.data.positions.every((p) =>\r\n      portfolioIds.has(p.portfolioId)\r\n    );\r\n\r\n    if (!validPositions) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"백업 데이터 유효성 검사 중 오류:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const restoreBackup = async (timestamp: number): Promise<void> => {\r\n  try {\r\n    const backupJson = localStorage.getItem(`db_backup_${timestamp}`);\r\n    if (!backupJson) {\r\n      throw new Error(\"백업을 찾을 수 없습니다.\");\r\n    }\r\n\r\n    const backup: BackupData = JSON.parse(backupJson);\r\n\r\n    // 백업 데이터 유효성 검사\r\n    if (!validateBackupData(backup)) {\r\n      throw new Error(\"유효하지 않은 백업 데이터입니다.\");\r\n    }\r\n\r\n    // DB 버전 확인\r\n    if (backup.dbVersion && backup.dbVersion !== db.verno) {\r\n      console.warn(\r\n        `백업 DB 버전(${backup.dbVersion})이 현재 DB 버전(${db.verno})과 다릅니다.`\r\n      );\r\n    }\r\n\r\n    // 현재 데이터 임시 백업 생성\r\n    const tempBackup = await createBackup(\r\n      `복원_전_백업_${new Date().toLocaleString(\"ko-KR\")}`\r\n    );\r\n\r\n    try {\r\n      // DB 초기화\r\n      await db.delete();\r\n      await db.open();\r\n\r\n      // 데이터 복원\r\n      await Promise.all(\r\n        [\r\n          db.portfolios?.bulkAdd(backup.data.portfolios || []),\r\n          db.positions?.bulkAdd(backup.data.positions || []),\r\n          db.todos?.bulkAdd(backup.data.todos || []),\r\n          db.memos?.bulkAdd(backup.data.memos || []),\r\n          db.accounts?.bulkAdd(backup.data.accounts || []),\r\n        ].filter(Boolean)\r\n      );\r\n    } catch (error) {\r\n      // 복원 실패 시 임시 백업에서 복구\r\n      console.error(\"복원 실패, 이전 상태로 복구 중:\", error);\r\n      await restoreFromTempBackup(tempBackup);\r\n      throw new Error(\"백업 복원 실패. 이전 상태로 복구되었습니다.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"백업 복원 중 오류:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst restoreFromTempBackup = async (tempBackup: BackupData) => {\r\n  try {\r\n    await db.delete();\r\n    await db.open();\r\n\r\n    await Promise.all(\r\n      [\r\n        db.portfolios?.bulkAdd(tempBackup.data.portfolios || []),\r\n        db.positions?.bulkAdd(tempBackup.data.positions || []),\r\n        db.todos?.bulkAdd(tempBackup.data.todos || []),\r\n        db.memos?.bulkAdd(tempBackup.data.memos || []),\r\n        db.accounts?.bulkAdd(tempBackup.data.accounts || []),\r\n      ].filter(Boolean)\r\n    );\r\n  } catch (error) {\r\n    console.error(\"임시 백업 복구 중 오류:\", error);\r\n    throw new Error(\"임시 백업 복구 실패\");\r\n  }\r\n};\r\n\r\nexport const getBackupList = (): Array<{ timestamp: number; name: string }> => {\r\n  const backupListJson = localStorage.getItem(\"db_backups\");\r\n  return backupListJson ? JSON.parse(backupListJson) : [];\r\n};\r\n\r\nexport const deleteBackup = (timestamp: number): void => {\r\n  // 백업 목록에서 제거\r\n  const backupList = getBackupList().filter(\r\n    (backup) => backup.timestamp !== timestamp\r\n  );\r\n  localStorage.setItem(\"db_backups\", JSON.stringify(backupList));\r\n\r\n  // 백업 데이터 삭제\r\n  localStorage.removeItem(`db_backup_${timestamp}`);\r\n};\r\n\r\nexport const exportBackup = async (): Promise<string> => {\r\n  try {\r\n    const [portfolios, positions, todos, memos, accounts] = await Promise.all([\r\n      db.portfolios?.toArray() || [],\r\n      db.positions?.toArray() || [],\r\n      db.todos?.toArray() || [],\r\n      db.memos?.toArray() || [],\r\n      db.accounts?.toArray() || [],\r\n    ]);\r\n\r\n    const backupData: BackupData = {\r\n      timestamp: Date.now(),\r\n      name: `export_${new Date().toISOString()}`,\r\n      dbVersion: db.verno,\r\n      data: {\r\n        portfolios,\r\n        positions,\r\n        todos,\r\n        memos,\r\n        accounts,\r\n      },\r\n    };\r\n\r\n    const blob = new Blob([JSON.stringify(backupData, null, 2)], {\r\n      type: \"application/json\",\r\n    });\r\n\r\n    return URL.createObjectURL(blob);\r\n  } catch (error) {\r\n    console.error(\"Error creating backup:\", error);\r\n    throw new Error(\"백업 생성 중 오류가 발생했습니다.\");\r\n  }\r\n};\r\n\r\nexport const importBackup = async (file: File): Promise<void> => {\r\n  try {\r\n    const text = await file.text();\r\n    const backupData: BackupData = JSON.parse(text);\r\n\r\n    // 데이터 유효성 검사\r\n    if (!backupData.data) {\r\n      throw new Error(\"유효하지 않은 백업 파일입니다.\");\r\n    }\r\n\r\n    // 기존 데이터 삭제\r\n    await Promise.all(\r\n      [\r\n        db.portfolios?.clear(),\r\n        db.positions?.clear(),\r\n        db.todos?.clear(),\r\n        db.memos?.clear(),\r\n        db.accounts?.clear(),\r\n      ].filter(Boolean)\r\n    );\r\n\r\n    // 백업 데이터 복원\r\n    await Promise.all(\r\n      [\r\n        db.portfolios?.bulkAdd(backupData.data.portfolios || []),\r\n        db.positions?.bulkAdd(backupData.data.positions || []),\r\n        db.todos?.bulkAdd(backupData.data.todos || []),\r\n        db.memos?.bulkAdd(backupData.data.memos || []),\r\n        db.accounts?.bulkAdd(backupData.data.accounts || []),\r\n      ].filter(Boolean)\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error importing backup:\", error);\r\n    throw new Error(\"백업 복원 중 오류가 발생했습니다.\");\r\n  }\r\n};\r\n","import {\r\n  ChartBarIcon,\r\n  Cog6ToothIcon,\r\n  DocumentTextIcon,\r\n  HomeIcon,\r\n  PresentationChartLineIcon,\r\n} from \"@heroicons/react/24/outline\";\r\nimport React, { Suspense, lazy, useEffect } from \"react\";\r\nimport { Link, Navigate, Route, Routes } from \"react-router-dom\";\r\nimport { LoadingSpinner } from \"./components/LoadingSpinner\";\r\nimport { checkAndCreateAutoBackup } from \"./utils/backup\";\r\n\r\n// Lazy-loaded components\r\nconst MainPage = lazy(() =>\r\n  import(\"./pages/MainPage\").then((module) => ({ default: module.MainPage }))\r\n);\r\nconst PortfolioList = lazy(() =>\r\n  import(\"./pages/PortfolioList\").then((module) => ({\r\n    default: module.PortfolioList,\r\n  }))\r\n);\r\nconst NewPortfolioPage = lazy(() =>\r\n  import(\"./pages/NewPortfolio\").then((module) => ({\r\n    default: module.NewPortfolioPage,\r\n  }))\r\n);\r\nconst PortfolioDetail = lazy(() =>\r\n  import(\"./pages/PortfolioDetail\").then((module) => ({\r\n    default: module.PortfolioDetail,\r\n  }))\r\n);\r\nconst PortfolioConfigPage = lazy(() =>\r\n  import(\"./pages/PortfolioConfigPage\").then((module) => ({\r\n    default: module.PortfolioConfigPage,\r\n  }))\r\n);\r\nconst AccountList = lazy(() =>\r\n  import(\"./pages/AccountList\").then((module) => ({\r\n    default: module.AccountList,\r\n  }))\r\n);\r\nconst NewAccount = lazy(() =>\r\n  import(\"./pages/NewAccount\").then((module) => ({\r\n    default: module.NewAccount,\r\n  }))\r\n);\r\nconst AccountDetailPage = lazy(() =>\r\n  import(\"./pages/AccountDetail\").then((module) => ({\r\n    default: module.AccountDetailPage,\r\n  }))\r\n);\r\nconst EditAccountPage = lazy(() =>\r\n  import(\"./pages/EditAccount\").then((module) => ({\r\n    default: module.EditAccountPage,\r\n  }))\r\n);\r\nconst NewPositionPage = lazy(() =>\r\n  import(\"./pages/NewPosition\").then((module) => ({\r\n    default: module.NewPositionPage,\r\n  }))\r\n);\r\nconst EditPositionPage = lazy(() =>\r\n  import(\"./pages/EditPosition\").then((module) => ({\r\n    default: module.EditPosition,\r\n  }))\r\n);\r\nconst ConsolidatedView = lazy(() =>\r\n  import(\"./pages/ConsolidatedView\").then((module) => ({\r\n    default: module.ConsolidatedView,\r\n  }))\r\n);\r\nconst MemoListPage = lazy(() =>\r\n  import(\"./pages/MemoListPage\").then((module) => ({\r\n    default: module.MemoListPage,\r\n  }))\r\n);\r\nconst MemoDetailPage = lazy(() =>\r\n  import(\"./pages/MemoDetailPage\").then((module) => ({\r\n    default: module.MemoDetailPage,\r\n  }))\r\n);\r\nconst SettingsPage = lazy(() =>\r\n  import(\"./pages/SettingsPage\").then((module) => ({\r\n    default: module.SettingsPage,\r\n  }))\r\n);\r\nconst TodoPage = lazy(() =>\r\n  import(\"./pages/TodoPage\").then((module) => ({ default: module.TodoPage }))\r\n);\r\n\r\nexport const App: React.FC = () => {\r\n  useEffect(() => {\r\n    // 앱 시작 시 자동 백업 체크\r\n    checkAndCreateAutoBackup();\r\n\r\n    // 주기적으로 자동 백업 체크 (1시간마다)\r\n    const interval = setInterval(() => {\r\n      checkAndCreateAutoBackup();\r\n    }, 60 * 60 * 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <Suspense fallback={<LoadingSpinner />}>\r\n      <div className=\"min-h-screen bg-gray-900 text-white flex flex-col\">\r\n        <main className=\"flex-1 pb-16\">\r\n          <Routes>\r\n            <Route path=\"/\" element={<MainPage />} />\r\n            <Route path=\"/portfolios\" element={<PortfolioList />} />\r\n            <Route path=\"/portfolios/new\" element={<NewPortfolioPage />} />\r\n            <Route\r\n              path=\"/portfolios/:portfolioId\"\r\n              element={<PortfolioDetail />}\r\n            />\r\n            <Route\r\n              path=\"/portfolios/:portfolioId/config\"\r\n              element={<PortfolioConfigPage />}\r\n            />\r\n            <Route path=\"/accounts\" element={<AccountList />} />\r\n            <Route path=\"/accounts/new\" element={<NewAccount />} />\r\n            <Route\r\n              path=\"/accounts/:accountId\"\r\n              element={<AccountDetailPage />}\r\n            />\r\n            <Route\r\n              path=\"/accounts/:accountId/edit\"\r\n              element={<EditAccountPage />}\r\n            />\r\n            <Route\r\n              path=\"/accounts/:accountId/positions/new\"\r\n              element={<NewPositionPage />}\r\n            />\r\n            <Route\r\n              path=\"/accounts/:accountId/positions/:positionId/edit\"\r\n              element={<EditPositionPage />}\r\n            />\r\n            <Route path=\"/consolidated\" element={<ConsolidatedView />} />\r\n            <Route path=\"/memos\" element={<MemoListPage />} />\r\n            <Route path=\"/memos/:id\" element={<MemoDetailPage />} />\r\n            <Route path=\"/settings\" element={<SettingsPage />} />\r\n            <Route path=\"/todo\" element={<TodoPage />} />\r\n            <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\r\n          </Routes>\r\n        </main>\r\n\r\n        <nav className=\"fixed bottom-0 left-0 right-0 bg-gray-800 border-t border-gray-700\">\r\n          <div className=\"max-w-md mx-auto px-4\">\r\n            <div className=\"flex justify-around py-2\">\r\n              <Link\r\n                to=\"/\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <HomeIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">홈</span>\r\n              </Link>\r\n              <Link\r\n                to=\"/portfolios\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <ChartBarIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">포트폴리오</span>\r\n              </Link>\r\n              <Link\r\n                to=\"/consolidated\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <PresentationChartLineIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">전체보기</span>\r\n              </Link>\r\n              <Link\r\n                to=\"/memos\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <DocumentTextIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">메모</span>\r\n              </Link>\r\n              <Link\r\n                to=\"/settings\"\r\n                className=\"flex flex-col items-center p-2 text-gray-400 hover:text-white\"\r\n              >\r\n                <Cog6ToothIcon className=\"h-6 w-6\" />\r\n                <span className=\"text-xs mt-1\">설정</span>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename=\"/jinwoo\">\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n);\r\n"],"file":"assets/index-65335e1b.js"}