import{d as t}from"./index-e48b942e.js";class a{static async getAll(){return await t.getAccounts()}static async getById(a){return await t.getAccountById(a)}static async create(a){const o=await t.addAccount(a),e=await this.getById(o);if(!e)throw new Error("계좌 생성에 실패했습니다.");return e}static async update(a,o){await t.updateAccount(a,o)}static async delete(a){await t.deleteAccount(a)}static async getWithPortfolios(a){const o=await t.getAccountById(a);if(!o)throw new Error("계좌를 찾을 수 없습니다.");const e=await t.portfolios.where("accountId").equals(a).toArray(),i=e.map(t=>t.id),c=await t.positions.where("portfolioId").anyOf(i).toArray(),n=e.map(t=>({...t,positions:c.filter(a=>a.portfolioId===t.id)}));return{...o,portfolios:n}}static async getAccountSummary(t){const a=await this.getWithPortfolios(t),o=a.portfolios.reduce((t,a)=>t+a.positions.reduce((t,a)=>t+a.quantity*a.currentPrice,0),0),e=a.portfolios.reduce((t,a)=>t+a.positions.reduce((t,a)=>t+a.quantity*a.avgPrice,0),0),i=e>0?(o-e)/e*100:0;return{account:a,portfolios:a.portfolios,totalValue:o,totalCost:e,returnRate:i}}static async updateAccountBalance(a,o){await t.updateAccountBalance(a,o)}static async getCashBalance(a){return await t.getAccountCashBalance(a)}static async getAccountWithCashBalance(t){const a=await this.getWithPortfolios(t),o=await this.getCashBalance(t);if(!o)throw new Error("현금 잔고를 계산할 수 없습니다.");return{...a,cashBalance:o}}static async canAffordInvestment(t,a){const o=await this.getCashBalance(t);return!!o&&o.cashBalance>=a}static async simulateInvestment(t,a){const o=await this.getCashBalance(t);if(!o)return null;const e=o.cashBalance-a,i=o.totalBalance>0?(o.investedAmount+a)/o.totalBalance*100:0;return{...o,cashBalance:e,investedAmount:o.investedAmount+a,utilizationRate:i,canAfford:e>=0}}static async getAllWithPortfolios(){const a=await this.getAll();return await Promise.all(a.map(async a=>{const o=await t.portfolios.where("accountId").equals(a.id).toArray(),e=o.map(t=>t.id),i=await t.positions.where("portfolioId").anyOf(e).toArray(),c=o.map(t=>({...t,positions:i.filter(a=>a.portfolioId===t.id)})),n=i.reduce((t,a)=>t+a.quantity*a.currentPrice,0);return{...a,portfolios:c,totalValue:n}}))}}export{a as A};
//# sourceMappingURL=accountService-f5f42876.js.map
