import{d as t}from"./index-65335e1b.js";class o{static async getAll(){return await t.getAccounts()}static async getById(o){return await t.getAccountById(o)}static async create(o){return await t.addAccount(o)}static async update(o,a){await t.updateAccount(o,a)}static async delete(o){await t.deleteAccount(o)}static async getPortfolios(o){await t.portfolios.toArray();return await t.portfolios.where("accountId").equals(o).toArray()}static async getWithPortfolios(o){const a=await this.getById(o);if(!a)throw new Error("계좌를 찾을 수 없습니다.");const i=await t.portfolios.where("accountId").equals(o).toArray(),r=i.map((t=>t.id)),e=await t.positions.where("portfolioId").anyOf(r).toArray(),s=i.map((t=>({...t,positions:e.filter((o=>o.portfolioId===t.id))})));return{...a,portfolios:s}}static async getAllWithPortfolios(){const o=await this.getAll();return await Promise.all(o.map((async o=>{const a=await this.getPortfolios(o.id),i=a.map((t=>t.id)),r=await t.positions.where("portfolioId").anyOf(i).toArray(),e=a.map((t=>({...t,positions:r.filter((o=>o.portfolioId===t.id))}))),s=r.reduce(((t,o)=>t+o.quantity*o.currentPrice),0);return{...o,portfolios:e,totalValue:s}})))}static async getAccountSummary(o){const a=await this.getById(o);if(!a)throw new Error("계좌를 찾을 수 없습니다.");const i=await t.portfolios.where("accountId").equals(o).toArray(),r=i.map((t=>t.id)),e=await t.positions.where("portfolioId").anyOf(r).toArray(),s=i.map((t=>({...t,positions:e.filter((o=>o.portfolioId===t.id))}))),c=e.reduce(((t,o)=>t+o.quantity*o.currentPrice),0),n=e.reduce(((t,o)=>t+o.quantity*o.avgPrice),0);return{account:a,portfolios:s,totalValue:c,totalCost:n,returnRate:n>0?(c-n)/n*100:0}}}export{o as A};
//# sourceMappingURL=accountService-26154c96.js.map
