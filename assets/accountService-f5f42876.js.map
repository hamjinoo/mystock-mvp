{"version":3,"file":"accountService-f5f42876.js","sources":["../../src/services/accountService.ts"],"sourcesContent":["import { Account, Portfolio, Position } from \"../types\";\r\nimport { db } from \"./db\";\r\n\r\nexport class AccountService {\r\n  static async getAll(): Promise<Account[]> {\r\n    return await db.getAccounts();\r\n  }\r\n\r\n  static async getById(id: number): Promise<Account | undefined> {\r\n    return await db.getAccountById(id);\r\n  }\r\n\r\n  static async create(data: Omit<Account, \"id\">): Promise<Account> {\r\n    const id = await db.addAccount(data);\r\n    const account = await this.getById(id);\r\n    if (!account) throw new Error(\"계좌 생성에 실패했습니다.\");\r\n    return account;\r\n  }\r\n\r\n  static async update(id: number, data: Partial<Account>): Promise<void> {\r\n    await db.updateAccount(id, data);\r\n  }\r\n\r\n  static async delete(id: number): Promise<void> {\r\n    await db.deleteAccount(id);\r\n  }\r\n\r\n  static async getWithPortfolios(accountId: number): Promise<\r\n    Account & { portfolios: (Portfolio & { positions: Position[] })[] }\r\n  > {\r\n    const account = await db.getAccountById(accountId);\r\n    if (!account) throw new Error(\"계좌를 찾을 수 없습니다.\");\r\n\r\n    const portfolios = await db.portfolios\r\n      .where(\"accountId\")\r\n      .equals(accountId)\r\n      .toArray();\r\n\r\n    // 모든 포트폴리오의 ID를 한 번에 가져옴\r\n    const portfolioIds = portfolios.map((p) => p.id);\r\n\r\n    // 모든 포지션을 한 번에 가져옴\r\n    const positions = await db.positions\r\n      .where(\"portfolioId\")\r\n      .anyOf(portfolioIds)\r\n      .toArray();\r\n\r\n    // 포트폴리오별로 포지션 매핑\r\n    const portfoliosWithPositions = portfolios.map((portfolio) => ({\r\n      ...portfolio,\r\n      positions: positions.filter((pos) => pos.portfolioId === portfolio.id),\r\n    }));\r\n\r\n    return {\r\n      ...account,\r\n      portfolios: portfoliosWithPositions,\r\n    };\r\n  }\r\n\r\n  static async getAccountSummary(accountId: number): Promise<{\r\n    account: Account;\r\n    portfolios: (Portfolio & { positions: Position[] })[];\r\n    totalValue: number;\r\n    totalCost: number;\r\n    returnRate: number;\r\n  }> {\r\n    const accountWithPortfolios = await this.getWithPortfolios(accountId);\r\n\r\n    const totalValue = accountWithPortfolios.portfolios.reduce(\r\n      (sum, portfolio) =>\r\n        sum +\r\n        portfolio.positions.reduce(\r\n          (posSum, pos) => posSum + pos.quantity * pos.currentPrice,\r\n          0\r\n        ),\r\n      0\r\n    );\r\n\r\n    const totalCost = accountWithPortfolios.portfolios.reduce(\r\n      (sum, portfolio) =>\r\n        sum +\r\n        portfolio.positions.reduce(\r\n          (posSum, pos) => posSum + pos.quantity * pos.avgPrice,\r\n          0\r\n        ),\r\n      0\r\n    );\r\n\r\n    const returnRate = totalCost > 0 ? ((totalValue - totalCost) / totalCost) * 100 : 0;\r\n\r\n    return {\r\n      account: accountWithPortfolios,\r\n      portfolios: accountWithPortfolios.portfolios,\r\n      totalValue,\r\n      totalCost,\r\n      returnRate,\r\n    };\r\n  }\r\n\r\n  // 현금 관리 메서드들 추가\r\n  static async updateAccountBalance(accountId: number, totalBalance: number): Promise<void> {\r\n    await db.updateAccountBalance(accountId, totalBalance);\r\n  }\r\n\r\n  static async getCashBalance(accountId: number) {\r\n    return await db.getAccountCashBalance(accountId);\r\n  }\r\n\r\n  static async getAccountWithCashBalance(accountId: number) {\r\n    const account = await this.getWithPortfolios(accountId);\r\n    const cashBalance = await this.getCashBalance(accountId);\r\n    \r\n    if (!cashBalance) {\r\n      throw new Error(\"현금 잔고를 계산할 수 없습니다.\");\r\n    }\r\n\r\n    return {\r\n      ...account,\r\n      cashBalance,\r\n    };\r\n  }\r\n\r\n  // 자금 사용 가능 여부 체크\r\n  static async canAffordInvestment(accountId: number, amount: number): Promise<boolean> {\r\n    const cashBalance = await this.getCashBalance(accountId);\r\n    if (!cashBalance) return false;\r\n    \r\n    return cashBalance.cashBalance >= amount;\r\n  }\r\n\r\n  // 투자 후 현금 차감 시뮬레이션\r\n  static async simulateInvestment(accountId: number, amount: number) {\r\n    const cashBalance = await this.getCashBalance(accountId);\r\n    if (!cashBalance) return null;\r\n\r\n    const newCashBalance = cashBalance.cashBalance - amount;\r\n    const newUtilizationRate = cashBalance.totalBalance > 0 \r\n      ? ((cashBalance.investedAmount + amount) / cashBalance.totalBalance) * 100 \r\n      : 0;\r\n\r\n    return {\r\n      ...cashBalance,\r\n      cashBalance: newCashBalance,\r\n      investedAmount: cashBalance.investedAmount + amount,\r\n      utilizationRate: newUtilizationRate,\r\n      canAfford: newCashBalance >= 0,\r\n    };\r\n  }\r\n\r\n  // 모든 계좌를 포트폴리오와 함께 가져오기\r\n  static async getAllWithPortfolios(): Promise<Array<Account & { portfolios: (Portfolio & { positions: Position[] })[], totalValue: number }>> {\r\n    const accounts = await this.getAll();\r\n    \r\n    return await Promise.all(\r\n      accounts.map(async (account) => {\r\n        const portfolios = await db.portfolios\r\n          .where(\"accountId\")\r\n          .equals(account.id)\r\n          .toArray();\r\n\r\n        // 모든 포트폴리오의 ID를 한 번에 가져옴\r\n        const portfolioIds = portfolios.map((p) => p.id);\r\n\r\n        // 모든 포지션을 한 번에 가져옴\r\n        const positions = await db.positions\r\n          .where(\"portfolioId\")\r\n          .anyOf(portfolioIds)\r\n          .toArray();\r\n\r\n        // 포트폴리오별로 포지션 매핑\r\n        const portfoliosWithPositions = portfolios.map((portfolio) => ({\r\n          ...portfolio,\r\n          positions: positions.filter((pos) => pos.portfolioId === portfolio.id),\r\n        }));\r\n\r\n        // 전체 계좌 가치 계산\r\n        const totalValue = positions.reduce(\r\n          (sum, pos) => sum + pos.quantity * pos.currentPrice,\r\n          0\r\n        );\r\n\r\n        return {\r\n          ...account,\r\n          portfolios: portfoliosWithPositions,\r\n          totalValue,\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"names":["AccountService","getAll","db","getAccounts","getById","id","getAccountById","create","data","addAccount","account","this","Error","update","updateAccount","deleteAccount","getWithPortfolios","accountId","portfolios","where","equals","toArray","portfolioIds","map","p","positions","anyOf","portfoliosWithPositions","portfolio","filter","pos","portfolioId","getAccountSummary","accountWithPortfolios","totalValue","reduce","sum","posSum","quantity","currentPrice","totalCost","avgPrice","returnRate","updateAccountBalance","totalBalance","getCashBalance","getAccountCashBalance","getAccountWithCashBalance","cashBalance","canAffordInvestment","amount","simulateInvestment","newCashBalance","newUtilizationRate","investedAmount","utilizationRate","canAfford","getAllWithPortfolios","accounts","Promise","all","async"],"mappings":"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"}