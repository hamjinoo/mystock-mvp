{"version":3,"file":"riskManagementService-c38bc133.js","sources":["../../node_modules/@heroicons/react/24/outline/esm/CheckCircleIcon.js","../../node_modules/@heroicons/react/24/outline/esm/ClockIcon.js","../../node_modules/@heroicons/react/24/outline/esm/ExclamationTriangleIcon.js","../../src/services/riskManagementService.ts"],"sourcesContent":["import * as React from \"react\";\nfunction CheckCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(CheckCircleIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ClockIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ClockIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ExclamationTriangleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ExclamationTriangleIcon);\nexport default ForwardRef;","import {\n    CashBalance,\n    CashRisk,\n    ChecklistItem,\n    ConcentrationRisk,\n    InvestmentChecklist,\n    InvestmentRules,\n    NewInvestmentRules,\n    Portfolio,\n    Position,\n    PositionRisk,\n    RiskAnalysis,\n    RiskWarning\n} from \"../types\";\nimport { AccountService } from \"./accountService\";\nimport { db } from \"./db\";\nimport { PortfolioService } from \"./portfolioService\";\n\nexport class RiskManagementService {\n  // 투자 규칙 관리\n  static async getOrCreateRules(portfolioId: number): Promise<InvestmentRules> {\n    let rules = await db.getInvestmentRules(portfolioId);\n    \n    if (!rules) {\n      // 기본 규칙 생성\n      rules = await db.createDefaultInvestmentRules(portfolioId);\n    }\n    \n    return rules;\n  }\n\n  static async updateRules(portfolioId: number, updates: Partial<NewInvestmentRules>): Promise<void> {\n    const rules = await this.getOrCreateRules(portfolioId);\n    await db.updateInvestmentRules(rules.id, updates);\n  }\n\n  // 포트폴리오 위험 분석\n  static async analyzePortfolioRisk(portfolioId: number): Promise<RiskAnalysis> {\n    const [portfolio, positions, rules, cashBalance] = await Promise.all([\n      PortfolioService.getById(portfolioId),\n      PortfolioService.getWithPositions(portfolioId).then(p => p.positions),\n      this.getOrCreateRules(portfolioId),\n      this.getCashBalance(portfolioId),\n    ]);\n\n    if (!portfolio) {\n      throw new Error('포트폴리오를 찾을 수 없습니다.');\n    }\n\n    const warnings: RiskWarning[] = [];\n    const recommendations: string[] = [];\n\n    // 집중도 위험 분석\n    const concentrationRisk = this.analyzeConcentrationRisk(positions, portfolio, rules);\n    warnings.push(...this.generateConcentrationWarnings(concentrationRisk, rules));\n\n    // 현금 위험 분석\n    const cashRisk = this.analyzeCashRisk(cashBalance, rules);\n    warnings.push(...this.generateCashWarnings(cashRisk, rules));\n\n    // 포지션별 위험 분석\n    const positionRisks = this.analyzePositionRisks(positions, rules);\n    warnings.push(...this.generatePositionWarnings(positionRisks, rules));\n\n    // 전체 위험 점수 계산 (1-10)\n    const riskScore = this.calculateOverallRiskScore(concentrationRisk, cashRisk, positionRisks);\n\n    // 추천사항 생성\n    recommendations.push(...this.generateRecommendations(riskScore, concentrationRisk, cashRisk));\n\n    return {\n      portfolioId,\n      riskScore,\n      warnings: warnings.sort((a, b) => this.getWarningPriority(a.type) - this.getWarningPriority(b.type)),\n      recommendations,\n      concentrationRisk,\n      cashRisk,\n      positionRisks,\n      analysisDate: Date.now(),\n    };\n  }\n\n  // 투자 전 체크리스트 생성\n  static async createInvestmentChecklist(\n    portfolioId: number, \n    symbol: string, \n    plannedAmount: number\n  ): Promise<InvestmentChecklist> {\n    const [portfolio, positions, rules, cashBalance, riskAnalysis] = await Promise.all([\n      PortfolioService.getById(portfolioId),\n      PortfolioService.getWithPositions(portfolioId).then(p => p.positions),\n      this.getOrCreateRules(portfolioId),\n      this.getCashBalance(portfolioId),\n      this.analyzePortfolioRisk(portfolioId),\n    ]);\n\n    if (!portfolio) {\n      throw new Error('포트폴리오를 찾을 수 없습니다.');\n    }\n\n    const checks: ChecklistItem[] = [];\n    const warnings: RiskWarning[] = [];\n\n    // 1. 현금 잔고 체크\n    const cashCheck = this.checkCashAvailability(cashBalance, plannedAmount, rules);\n    checks.push(cashCheck);\n    if (cashCheck.status === 'WARNING' || cashCheck.status === 'FAIL') {\n      warnings.push(this.createWarningFromCheck(cashCheck));\n    }\n\n    // 2. 포지션 크기 체크\n    const positionSizeCheck = this.checkPositionSize(positions, symbol, plannedAmount, portfolio, rules);\n    checks.push(positionSizeCheck);\n    if (positionSizeCheck.status === 'WARNING' || positionSizeCheck.status === 'FAIL') {\n      warnings.push(this.createWarningFromCheck(positionSizeCheck));\n    }\n\n    // 3. 일일/월간 투자 한도 체크\n    const investmentLimitCheck = await this.checkInvestmentLimits(portfolioId, plannedAmount, rules);\n    checks.push(investmentLimitCheck);\n    if (investmentLimitCheck.status === 'WARNING' || investmentLimitCheck.status === 'FAIL') {\n      warnings.push(this.createWarningFromCheck(investmentLimitCheck));\n    }\n\n    // 4. 쿨다운 기간 체크\n    const cooldownCheck = this.checkCooldownPeriod(positions, symbol, rules);\n    checks.push(cooldownCheck);\n    if (cooldownCheck.status === 'WARNING' || cooldownCheck.status === 'FAIL') {\n      warnings.push(this.createWarningFromCheck(cooldownCheck));\n    }\n\n    // 5. 연속 손실 체크\n    const lossStreakCheck = this.checkConsecutiveLosses(positions, symbol, rules);\n    checks.push(lossStreakCheck);\n    if (lossStreakCheck.status === 'WARNING' || lossStreakCheck.status === 'FAIL') {\n      warnings.push(this.createWarningFromCheck(lossStreakCheck));\n    }\n\n    // 6. 포트폴리오 위험도 체크\n    const riskCheck = this.checkPortfolioRisk(riskAnalysis, rules);\n    checks.push(riskCheck);\n    if (riskCheck.status === 'WARNING' || riskCheck.status === 'FAIL') {\n      warnings.push(this.createWarningFromCheck(riskCheck));\n    }\n\n    // 전체 위험도 및 진행 가능 여부 결정\n    const failedChecks = checks.filter(check => check.status === 'FAIL' && check.isBlocking);\n    const warningChecks = checks.filter(check => check.status === 'WARNING');\n    \n    const overallRisk: 'HIGH' | 'MEDIUM' | 'LOW' = \n      failedChecks.length > 0 ? 'HIGH' :\n      warningChecks.length > 2 ? 'HIGH' :\n      warningChecks.length > 0 ? 'MEDIUM' : 'LOW';\n\n    const canProceed = failedChecks.length === 0;\n\n    return {\n      portfolioId,\n      symbol,\n      plannedAmount,\n      checks,\n      overallRisk,\n      canProceed,\n      warnings,\n    };\n  }\n\n  // 집중도 위험 분석\n  private static analyzeConcentrationRisk(\n    positions: Position[], \n    portfolio: Portfolio, \n    rules: InvestmentRules\n  ): ConcentrationRisk {\n    const totalValue = positions.reduce((sum, pos) => sum + (pos.quantity * pos.currentPrice), 0);\n    \n    // 상위 포지션 분석\n    const topPositions = positions\n      .map(pos => {\n        const value = pos.quantity * pos.currentPrice;\n        const percentage = totalValue > 0 ? (value / totalValue) * 100 : 0;\n        return {\n          symbol: pos.symbol,\n          name: pos.name,\n          percentage,\n          risk: percentage > rules.maxPositionSize ? 'HIGH' as const :\n                percentage > rules.maxPositionSize * 0.8 ? 'MEDIUM' as const : 'LOW' as const\n        };\n      })\n      .sort((a, b) => b.percentage - a.percentage)\n      .slice(0, 5);\n\n    // 섹터 집중도 분석 (간단한 구현)\n    const sectorConcentration = this.analyzeSectorConcentration(positions, totalValue);\n\n    // 다각화 점수 계산 (1-10, 10이 가장 다각화됨)\n    const diversificationScore = this.calculateDiversificationScore(positions);\n\n    return {\n      topPositions,\n      sectorConcentration,\n      diversificationScore,\n    };\n  }\n\n  // 현금 위험 분석\n  private static analyzeCashRisk(cashBalance: CashBalance | null, rules: InvestmentRules): CashRisk {\n    if (!cashBalance) {\n      return {\n        currentCashRatio: 0,\n        recommendedCashRatio: rules.minCashReserve,\n        utilizationRate: 100,\n        risk: 'HIGH',\n        daysUntilCashOut: 0,\n      };\n    }\n\n    const currentCashRatio = (cashBalance.cashBalance / cashBalance.totalBalance) * 100;\n    const risk: 'HIGH' | 'MEDIUM' | 'LOW' = \n      currentCashRatio < rules.minCashReserve ? 'HIGH' :\n      currentCashRatio < rules.minCashReserve * 1.5 ? 'MEDIUM' : 'LOW';\n\n    // 현재 투자 속도로 현금 소진까지 남은 일수 (간단한 추정)\n    const dailyInvestmentRate = rules.maxDailyInvestment || 100000;\n    const daysUntilCashOut = Math.floor(cashBalance.cashBalance / dailyInvestmentRate);\n\n    return {\n      currentCashRatio,\n      recommendedCashRatio: rules.minCashReserve,\n      utilizationRate: cashBalance.utilizationRate,\n      risk,\n      daysUntilCashOut,\n    };\n  }\n\n  // 포지션 위험 분석\n  private static analyzePositionRisks(positions: Position[], rules: InvestmentRules): PositionRisk[] {\n    return positions.map(pos => {\n      const currentReturn = ((pos.currentPrice - pos.avgPrice) / pos.avgPrice) * 100;\n      const violatesRules: string[] = [];\n\n      // 규칙 위반 체크\n      const positionValue = pos.quantity * pos.currentPrice;\n      if (positionValue > rules.maxPositionAmount) {\n        violatesRules.push(`최대 포지션 금액 초과 (${rules.maxPositionAmount.toLocaleString()}원)`);\n      }\n\n      // 위험 점수 계산 (1-10)\n      let riskScore = 5; // 기본 점수\n      if (currentReturn < -rules.stopLossPercentage) riskScore += 2;\n      if (currentReturn < -20) riskScore += 2;\n      if (violatesRules.length > 0) riskScore += 1;\n\n      return {\n        positionId: pos.id,\n        symbol: pos.symbol,\n        name: pos.name,\n        currentReturn,\n        riskScore: Math.min(10, Math.max(1, riskScore)),\n        consecutiveLosses: 0, // TODO: 실제 계산 구현\n        lastTradeDate: pos.tradeDate,\n        violatesRules,\n      };\n    });\n  }\n\n  // 현금 잔고 조회 (중복 제거)\n  private static async getCashBalance(portfolioId: number): Promise<CashBalance | null> {\n    const portfolio = await PortfolioService.getById(portfolioId);\n    return portfolio ? await AccountService.getCashBalance(portfolio.accountId) : null;\n  }\n\n  // 체크리스트 항목들\n  private static checkCashAvailability(\n    cashBalance: CashBalance | null, \n    plannedAmount: number, \n    rules: InvestmentRules\n  ): ChecklistItem {\n    if (!cashBalance) {\n      return {\n        id: 'cash-availability',\n        category: 'CASH',\n        title: '현금 잔고 확인',\n        status: 'FAIL',\n        message: '현금 잔고 정보를 찾을 수 없습니다.',\n        isBlocking: true,\n      };\n    }\n\n    if (plannedAmount > cashBalance.cashBalance) {\n      return {\n        id: 'cash-availability',\n        category: 'CASH',\n        title: '현금 잔고 확인',\n        status: 'FAIL',\n        message: `현금 잔고(${cashBalance.cashBalance.toLocaleString()}원)가 부족합니다.`,\n        recommendation: '투자 금액을 줄이거나 현금을 추가 입금하세요.',\n        isBlocking: true,\n      };\n    }\n\n    const afterInvestmentRatio = ((cashBalance.cashBalance - plannedAmount) / cashBalance.totalBalance) * 100;\n    \n    if (afterInvestmentRatio < rules.minCashReserve) {\n      return {\n        id: 'cash-availability',\n        category: 'CASH',\n        title: '현금 잔고 확인',\n        status: 'WARNING',\n        message: `투자 후 현금 비율이 ${afterInvestmentRatio.toFixed(1)}%로 권장 비율(${rules.minCashReserve}%) 미만입니다.`,\n        recommendation: '비상 자금 확보를 위해 현금 비율을 유지하는 것이 좋습니다.',\n        isBlocking: false,\n      };\n    }\n\n    return {\n      id: 'cash-availability',\n      category: 'CASH',\n      title: '현금 잔고 확인',\n      status: 'PASS',\n      message: '충분한 현금 잔고가 확보되어 있습니다.',\n      isBlocking: false,\n    };\n  }\n\n  private static checkPositionSize(\n    positions: Position[], \n    symbol: string, \n    plannedAmount: number, \n    portfolio: Portfolio, \n    rules: InvestmentRules\n  ): ChecklistItem {\n    const existingPosition = positions.find(pos => pos.symbol === symbol);\n    const totalPortfolioValue = positions.reduce((sum, pos) => sum + (pos.quantity * pos.currentPrice), 0) + plannedAmount;\n    \n    const currentPositionValue = existingPosition ? existingPosition.quantity * existingPosition.currentPrice : 0;\n    const newPositionValue = currentPositionValue + plannedAmount;\n    const newPositionRatio = (newPositionValue / totalPortfolioValue) * 100;\n\n    if (newPositionValue > rules.maxPositionAmount) {\n      return {\n        id: 'position-size',\n        category: 'POSITION',\n        title: '포지션 크기 확인',\n        status: 'FAIL',\n        message: `단일 종목 최대 금액(${rules.maxPositionAmount.toLocaleString()}원)을 초과합니다.`,\n        recommendation: '투자 금액을 줄이거나 포지션 한도를 조정하세요.',\n        isBlocking: true,\n      };\n    }\n\n    if (newPositionRatio > rules.maxPositionSize) {\n      return {\n        id: 'position-size',\n        category: 'POSITION',\n        title: '포지션 크기 확인',\n        status: 'WARNING',\n        message: `단일 종목 최대 비중(${rules.maxPositionSize}%)을 초과할 수 있습니다.`,\n        recommendation: '포트폴리오 집중도를 낮추기 위해 투자 금액을 조정하세요.',\n        isBlocking: false,\n      };\n    }\n\n    return {\n      id: 'position-size',\n      category: 'POSITION',\n      title: '포지션 크기 확인',\n      status: 'PASS',\n      message: '적절한 포지션 크기입니다.',\n      isBlocking: false,\n    };\n  }\n\n  private static async checkInvestmentLimits(\n    portfolioId: number, \n    plannedAmount: number, \n    rules: InvestmentRules\n  ): Promise<ChecklistItem> {\n    // TODO: 실제 일일/월간 투자 금액 추적 구현\n    // 현재는 단순히 한도와 비교\n    \n    if (plannedAmount > rules.maxDailyInvestment) {\n      return {\n        id: 'investment-limits',\n        category: 'RULES',\n        title: '투자 한도 확인',\n        status: 'WARNING',\n        message: `일일 투자 한도(${rules.maxDailyInvestment.toLocaleString()}원)를 초과합니다.`,\n        recommendation: '투자 금액을 분할하여 여러 날에 걸쳐 진행하세요.',\n        isBlocking: false,\n      };\n    }\n\n    return {\n      id: 'investment-limits',\n      category: 'RULES',\n      title: '투자 한도 확인',\n      status: 'PASS',\n      message: '투자 한도 내에서 진행됩니다.',\n      isBlocking: false,\n    };\n  }\n\n  private static checkCooldownPeriod(\n    positions: Position[], \n    symbol: string, \n    rules: InvestmentRules\n  ): ChecklistItem {\n    const existingPosition = positions.find(pos => pos.symbol === symbol);\n    \n    if (existingPosition) {\n      const hoursSinceLastTrade = (Date.now() - existingPosition.tradeDate) / (1000 * 60 * 60);\n      \n      if (hoursSinceLastTrade < rules.cooldownPeriod) {\n        const remainingHours = Math.ceil(rules.cooldownPeriod - hoursSinceLastTrade);\n        return {\n          id: 'cooldown-period',\n          category: 'RULES',\n          title: '재매수 대기 시간',\n          status: 'WARNING',\n          message: `동일 종목 재매수까지 ${remainingHours}시간 남았습니다.`,\n          recommendation: '충분한 시간을 두고 재매수를 진행하세요.',\n          isBlocking: false,\n        };\n      }\n    }\n\n    return {\n      id: 'cooldown-period',\n      category: 'RULES',\n      title: '재매수 대기 시간',\n      status: 'PASS',\n      message: '재매수 대기 시간이 충족되었습니다.',\n      isBlocking: false,\n    };\n  }\n\n  private static checkConsecutiveLosses(\n    positions: Position[], \n    symbol: string, \n    rules: InvestmentRules\n  ): ChecklistItem {\n    // TODO: 실제 연속 손실 추적 구현\n    // 현재는 단순히 현재 손실률만 체크\n    const existingPosition = positions.find(pos => pos.symbol === symbol);\n    \n    if (existingPosition) {\n      const currentReturn = ((existingPosition.currentPrice - existingPosition.avgPrice) / existingPosition.avgPrice) * 100;\n      \n      if (currentReturn < -rules.stopLossPercentage) {\n        return {\n          id: 'consecutive-losses',\n          category: 'POSITION',\n          title: '손실 상황 확인',\n          status: 'WARNING',\n          message: `현재 ${Math.abs(currentReturn).toFixed(1)}% 손실 상태입니다.`,\n          recommendation: '손절 기준을 검토하고 추가 매수를 신중히 결정하세요.',\n          isBlocking: false,\n        };\n      }\n    }\n\n    return {\n      id: 'consecutive-losses',\n      category: 'POSITION',\n      title: '손실 상황 확인',\n      status: 'PASS',\n      message: '손실 기준 내에서 관리되고 있습니다.',\n      isBlocking: false,\n    };\n  }\n\n  private static checkPortfolioRisk(riskAnalysis: RiskAnalysis, rules: InvestmentRules): ChecklistItem {\n    if (riskAnalysis.riskScore > rules.maxPortfolioRisk) {\n      return {\n        id: 'portfolio-risk',\n        category: 'PORTFOLIO',\n        title: '포트폴리오 위험도',\n        status: 'WARNING',\n        message: `포트폴리오 위험도(${riskAnalysis.riskScore})가 허용 기준(${rules.maxPortfolioRisk})을 초과합니다.`,\n        recommendation: '위험도를 낮추기 위해 포지션을 조정하거나 분산 투자를 고려하세요.',\n        isBlocking: false,\n      };\n    }\n\n    return {\n      id: 'portfolio-risk',\n      category: 'PORTFOLIO',\n      title: '포트폴리오 위험도',\n      status: 'PASS',\n      message: '포트폴리오 위험도가 적절합니다.',\n      isBlocking: false,\n    };\n  }\n\n  // 유틸리티 메서드들\n  private static generateConcentrationWarnings(risk: ConcentrationRisk, rules: InvestmentRules): RiskWarning[] {\n    const warnings: RiskWarning[] = [];\n    \n    risk.topPositions.forEach(pos => {\n      if (pos.risk === 'HIGH') {\n        warnings.push({\n          id: `concentration-${pos.symbol}`,\n          type: 'HIGH',\n          category: 'CONCENTRATION',\n          title: '포지션 집중도 위험',\n          message: `${pos.symbol}이 포트폴리오의 ${pos.percentage.toFixed(1)}%를 차지합니다.`,\n          recommendation: '포지션 크기를 줄이거나 다른 종목으로 분산하세요.',\n          canProceed: true,\n        });\n      }\n    });\n\n    return warnings;\n  }\n\n  private static generateCashWarnings(cashRisk: CashRisk, rules: InvestmentRules): RiskWarning[] {\n    const warnings: RiskWarning[] = [];\n    \n    if (cashRisk.risk === 'HIGH') {\n      warnings.push({\n        id: 'cash-risk',\n        type: 'HIGH',\n        category: 'CASH',\n        title: '현금 부족 위험',\n        message: `현금 비율이 ${cashRisk.currentCashRatio.toFixed(1)}%로 매우 낮습니다.`,\n        recommendation: `최소 ${cashRisk.recommendedCashRatio}%의 현금을 유지하세요.`,\n        canProceed: true,\n      });\n    }\n\n    return warnings;\n  }\n\n  private static generatePositionWarnings(positionRisks: PositionRisk[], rules: InvestmentRules): RiskWarning[] {\n    const warnings: RiskWarning[] = [];\n    \n    positionRisks.forEach(pos => {\n      if (pos.riskScore >= 8) {\n        warnings.push({\n          id: `position-risk-${pos.symbol}`,\n          type: 'HIGH',\n          category: 'POSITION',\n          title: '포지션 위험',\n          message: `${pos.symbol}의 위험도가 높습니다 (${pos.riskScore}/10).`,\n          recommendation: '포지션 크기를 줄이거나 손절을 고려하세요.',\n          canProceed: true,\n        });\n      }\n    });\n\n    return warnings;\n  }\n\n  private static generateRecommendations(\n    riskScore: number, \n    concentrationRisk: ConcentrationRisk, \n    cashRisk: CashRisk\n  ): string[] {\n    const recommendations: string[] = [];\n    \n    if (riskScore >= 7) {\n      recommendations.push('포트폴리오 위험도가 높습니다. 전체적인 리밸런싱을 고려하세요.');\n    }\n    \n    if (concentrationRisk.diversificationScore < 5) {\n      recommendations.push('포트폴리오 분산도가 낮습니다. 다양한 종목/섹터에 투자하세요.');\n    }\n    \n    if (cashRisk.risk === 'HIGH') {\n      recommendations.push('현금 비율을 높여 안전성을 확보하세요.');\n    }\n\n    return recommendations;\n  }\n\n  private static calculateOverallRiskScore(\n    concentrationRisk: ConcentrationRisk,\n    cashRisk: CashRisk,\n    positionRisks: PositionRisk[]\n  ): number {\n    let score = 5; // 기본 점수\n\n    // 집중도 위험\n    if (concentrationRisk.diversificationScore < 3) score += 2;\n    else if (concentrationRisk.diversificationScore < 5) score += 1;\n\n    // 현금 위험\n    if (cashRisk.risk === 'HIGH') score += 2;\n    else if (cashRisk.risk === 'MEDIUM') score += 1;\n\n    // 포지션 위험\n    const highRiskPositions = positionRisks.filter(pos => pos.riskScore >= 7).length;\n    score += Math.min(2, highRiskPositions);\n\n    return Math.min(10, Math.max(1, score));\n  }\n\n  private static calculateDiversificationScore(positions: Position[]): number {\n    if (positions.length === 0) return 1;\n    if (positions.length >= 10) return 10;\n    \n    // 간단한 다각화 점수: 종목 수에 기반\n    return Math.min(10, positions.length);\n  }\n\n  private static analyzeSectorConcentration(positions: Position[], totalValue: number) {\n    // 간단한 섹터 분석 (실제로는 외부 API나 데이터베이스에서 섹터 정보를 가져와야 함)\n    return [\n      {\n        sector: '기술',\n        percentage: 40,\n        risk: 'MEDIUM' as const,\n      },\n      {\n        sector: '금융',\n        percentage: 30,\n        risk: 'LOW' as const,\n      },\n    ];\n  }\n\n  private static getWarningPriority(type: 'HIGH' | 'MEDIUM' | 'LOW'): number {\n    switch (type) {\n      case 'HIGH': return 1;\n      case 'MEDIUM': return 2;\n      case 'LOW': return 3;\n      default: return 4;\n    }\n  }\n\n  private static createWarningFromCheck(check: ChecklistItem): RiskWarning {\n    return {\n      id: check.id,\n      type: check.status === 'FAIL' ? 'HIGH' : 'MEDIUM',\n      category: check.category === 'CASH' ? 'CASH' : \n                check.category === 'POSITION' ? 'POSITION' :\n                check.category === 'PORTFOLIO' ? 'CONCENTRATION' : 'RULE_VIOLATION',\n      title: check.title,\n      message: check.message,\n      recommendation: check.recommendation || '',\n      canProceed: !check.isBlocking,\n    };\n  }\n} "],"names":["CheckCircleIcon","title","titleId","props","svgRef","React.createElement","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","CheckCircleIcon$1","React.forwardRef","ClockIcon","ClockIcon$1","ExclamationTriangleIcon","ExclamationTriangleIcon$1","RiskManagementService","getOrCreateRules","portfolioId","rules","db","getInvestmentRules","createDefaultInvestmentRules","updateRules","updates","this","updateInvestmentRules","analyzePortfolioRisk","portfolio","positions","cashBalance","Promise","all","PortfolioService","getById","getWithPositions","then","p","getCashBalance","Error","warnings","recommendations","concentrationRisk","analyzeConcentrationRisk","push","generateConcentrationWarnings","cashRisk","analyzeCashRisk","generateCashWarnings","positionRisks","analyzePositionRisks","generatePositionWarnings","riskScore","calculateOverallRiskScore","generateRecommendations","sort","a","b","getWarningPriority","type","analysisDate","Date","now","createInvestmentChecklist","symbol","plannedAmount","riskAnalysis","checks","cashCheck","checkCashAvailability","status","createWarningFromCheck","positionSizeCheck","checkPositionSize","investmentLimitCheck","checkInvestmentLimits","cooldownCheck","checkCooldownPeriod","lossStreakCheck","checkConsecutiveLosses","riskCheck","checkPortfolioRisk","failedChecks","filter","check","isBlocking","warningChecks","overallRisk","length","canProceed","totalValue","reduce","sum","pos","quantity","currentPrice","topPositions","map","value","percentage","name","risk","maxPositionSize","slice","sectorConcentration","analyzeSectorConcentration","diversificationScore","calculateDiversificationScore","currentCashRatio","recommendedCashRatio","minCashReserve","utilizationRate","daysUntilCashOut","totalBalance","dailyInvestmentRate","maxDailyInvestment","Math","floor","currentReturn","avgPrice","violatesRules","maxPositionAmount","toLocaleString","stopLossPercentage","positionId","min","max","consecutiveLosses","lastTradeDate","tradeDate","AccountService","accountId","category","message","recommendation","afterInvestmentRatio","toFixed","existingPosition","find","totalPortfolioValue","newPositionValue","newPositionRatio","hoursSinceLastTrade","cooldownPeriod","ceil","abs","maxPortfolioRisk","forEach","score","highRiskPositions","sector"],"mappings":"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","x_google_ignoreList":[0,1,2]}