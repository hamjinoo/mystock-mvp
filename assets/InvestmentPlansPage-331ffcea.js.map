{"version":3,"file":"InvestmentPlansPage-331ffcea.js","sources":["../../node_modules/@heroicons/react/24/outline/esm/ChartBarSquareIcon.js","../../src/components/InvestmentPlanCard.tsx","../../src/components/InvestmentPlanModal.tsx","../../src/pages/InvestmentPlansPage.tsx"],"sourcesContent":["import * as React from \"react\";\nfunction ChartBarSquareIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M7.5 14.25v2.25m3-4.5v4.5m3-6.75v6.75m3-9v9M6 20.25h12A2.25 2.25 0 0 0 20.25 18V6A2.25 2.25 0 0 0 18 3.75H6A2.25 2.25 0 0 0 3.75 6v12A2.25 2.25 0 0 0 6 20.25Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChartBarSquareIcon);\nexport default ForwardRef;","import {\n    ChartBarIcon,\n    CheckCircleIcon,\n    ClockIcon,\n    CurrencyDollarIcon,\n    PlayIcon,\n    XCircleIcon\n} from '@heroicons/react/24/outline';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { InvestmentEntry, InvestmentPlan } from '../types';\nimport { formatCurrency } from '../utils/currencyUtils';\n\ninterface Props {\n  plan: InvestmentPlan;\n  currency: 'KRW' | 'USD';\n  portfolioId: number;\n  onExecuteEntry: (entry: InvestmentEntry) => void;\n  onCancelPlan: (planId: number) => void;\n}\n\nexport const InvestmentPlanCard: React.FC<Props> = ({\n  plan,\n  currency,\n  portfolioId,\n  onExecuteEntry,\n  onCancelPlan,\n}) => {\n  const progressRate = (plan.executedEntries / plan.plannedEntries) * 100;\n  const nextEntry = plan.entries\n    .filter(entry => entry.status === 'PLANNED')\n    .sort((a, b) => a.entryNumber - b.entryNumber)[0];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'PLANNED': return 'text-blue-400';\n      case 'IN_PROGRESS': return 'text-yellow-400';\n      case 'COMPLETED': return 'text-green-400';\n      case 'CANCELLED': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'PLANNED': return <ClockIcon className=\"h-4 w-4\" />;\n      case 'IN_PROGRESS': return <PlayIcon className=\"h-4 w-4\" />;\n      case 'COMPLETED': return <CheckCircleIcon className=\"h-4 w-4\" />;\n      case 'CANCELLED': return <XCircleIcon className=\"h-4 w-4\" />;\n      default: return <ClockIcon className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'PLANNED': return '계획됨';\n      case 'IN_PROGRESS': return '진행 중';\n      case 'COMPLETED': return '완료';\n      case 'CANCELLED': return '취소됨';\n      default: return '알 수 없음';\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-800 rounded-lg p-4 border border-gray-700\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <div>\n          <h3 className=\"font-bold text-white\">{plan.symbol}</h3>\n          <p className=\"text-sm text-gray-400\">{plan.name}</p>\n        </div>\n        <div className={`flex items-center ${getStatusColor(plan.status)}`}>\n          {getStatusIcon(plan.status)}\n          <span className=\"ml-1 text-xs font-medium\">\n            {getStatusText(plan.status)}\n          </span>\n        </div>\n      </div>\n\n      {/* 진행률 */}\n      <div className=\"mb-4\">\n        <div className=\"flex justify-between text-sm mb-1\">\n          <span className=\"text-gray-400\">진행률</span>\n          <span className=\"text-white\">{progressRate.toFixed(0)}%</span>\n        </div>\n        <div className=\"w-full bg-gray-700 rounded-full h-2\">\n          <div \n            className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${progressRate}%` }}\n          ></div>\n        </div>\n        <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n          <span>{plan.executedEntries}/{plan.plannedEntries} 회차</span>\n          <span>{formatCurrency(plan.totalBudget - plan.remainingBudget, currency)} / {formatCurrency(plan.totalBudget, currency)}</span>\n        </div>\n      </div>\n\n      {/* 투자 정보 */}\n      <div className=\"grid grid-cols-2 gap-3 mb-4\">\n        <div className=\"bg-gray-700 p-3 rounded\">\n          <div className=\"flex items-center mb-1\">\n            <CurrencyDollarIcon className=\"h-4 w-4 text-green-400 mr-1\" />\n            <span className=\"text-xs text-gray-400\">총 예산</span>\n          </div>\n          <p className=\"text-sm font-medium text-white\">\n            {formatCurrency(plan.totalBudget, currency)}\n          </p>\n        </div>\n        <div className=\"bg-gray-700 p-3 rounded\">\n          <div className=\"flex items-center mb-1\">\n            <ChartBarIcon className=\"h-4 w-4 text-blue-400 mr-1\" />\n            <span className=\"text-xs text-gray-400\">남은 예산</span>\n          </div>\n          <p className=\"text-sm font-medium text-white\">\n            {formatCurrency(plan.remainingBudget, currency)}\n          </p>\n        </div>\n      </div>\n\n      {/* 다음 회차 정보 */}\n      {nextEntry && plan.status !== 'CANCELLED' && (\n        <div className=\"bg-blue-900/20 border border-blue-500/30 p-3 rounded mb-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-blue-400\">\n              다음 회차: {nextEntry.entryNumber}회차\n            </span>\n            <span className=\"text-sm text-blue-300\">\n              {formatCurrency(nextEntry.plannedAmount, currency)}\n            </span>\n          </div>\n          <button\n            onClick={() => onExecuteEntry(nextEntry)}\n            className=\"w-full px-3 py-2 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 transition-colors\"\n          >\n            <PlayIcon className=\"h-4 w-4 inline mr-1\" />\n            {nextEntry.entryNumber}회차 매수 실행\n          </button>\n        </div>\n      )}\n\n      {/* 버튼들 */}\n      <div className=\"flex gap-2\">\n        <Link\n          to={`/portfolios/${portfolioId}/investment-plans/${plan.id}`}\n          className=\"flex-1 px-3 py-2 bg-gray-700 text-white text-sm rounded hover:bg-gray-600 transition-colors text-center\"\n        >\n          상세 보기\n        </Link>\n        {plan.status === 'PLANNED' && plan.executedEntries === 0 && (\n          <button\n            onClick={() => onCancelPlan(plan.id)}\n            className=\"px-3 py-2 bg-red-600 text-white text-sm rounded hover:bg-red-700 transition-colors\"\n          >\n            취소\n          </button>\n        )}\n      </div>\n\n      {/* 회차별 상태 */}\n      <div className=\"mt-3 pt-3 border-t border-gray-700\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <span className=\"text-xs text-gray-400\">회차별 진행 상황</span>\n        </div>\n        <div className=\"flex gap-1\">\n          {plan.entries.map((entry) => (\n            <div\n              key={entry.id}\n              className={`flex-1 h-2 rounded ${\n                entry.status === 'EXECUTED' \n                  ? 'bg-green-500' \n                  : entry.status === 'CANCELLED'\n                  ? 'bg-red-500'\n                  : 'bg-gray-600'\n              }`}\n              title={`${entry.entryNumber}회차 - ${\n                entry.status === 'EXECUTED' ? '실행됨' :\n                entry.status === 'CANCELLED' ? '취소됨' : '대기 중'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}; ","import { CalendarDaysIcon, CurrencyDollarIcon, XMarkIcon } from '@heroicons/react/24/outline';\nimport React, { useEffect, useState } from 'react';\nimport { AccountService } from '../services/accountService';\nimport { NewInvestmentPlan, Portfolio } from '../types';\nimport { formatCurrency } from '../utils/currencyUtils';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (plan: NewInvestmentPlan) => void;\n  portfolio: Portfolio;\n  initialSymbol?: string;\n  initialName?: string;\n}\n\nexport const InvestmentPlanModal: React.FC<Props> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  portfolio,\n  initialSymbol = '',\n  initialName = '',\n}) => {\n  const [symbol, setSymbol] = useState(initialSymbol);\n  const [name, setName] = useState(initialName);\n  const [totalBudget, setTotalBudget] = useState(0);\n  const [plannedEntries, setPlannedEntries] = useState(3);\n  const [cashBalance, setCashBalance] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      loadCashBalance();\n      setSymbol(initialSymbol);\n      setName(initialName);\n    }\n  }, [isOpen, portfolio.accountId, initialSymbol, initialName]);\n\n  const loadCashBalance = async () => {\n    try {\n      const balance = await AccountService.getCashBalance(portfolio.accountId);\n      setCashBalance(balance);\n    } catch (error) {\n      console.error('현금 잔고 조회 중 오류:', error);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!symbol.trim() || !name.trim() || totalBudget <= 0 || plannedEntries <= 0) {\n      alert('모든 필드를 올바르게 입력해주세요.');\n      return;\n    }\n\n    if (cashBalance && totalBudget > cashBalance.cashBalance) {\n      const confirmMessage = `현금 잔고(${formatCurrency(cashBalance.cashBalance, portfolio.currency)})를 초과하는 계획입니다. 계속하시겠습니까?`;\n      if (!window.confirm(confirmMessage)) {\n        return;\n      }\n    }\n\n    setLoading(true);\n\n    try {\n      const plan: NewInvestmentPlan = {\n        portfolioId: portfolio.id,\n        symbol: symbol.trim().toUpperCase(),\n        name: name.trim(),\n        totalBudget,\n        plannedEntries,\n        executedEntries: 0,\n        remainingBudget: totalBudget,\n        status: 'PLANNED' as const,\n      };\n\n      await onSubmit(plan);\n      onClose();\n      \n      // 폼 초기화\n      setSymbol('');\n      setName('');\n      setTotalBudget(0);\n      setPlannedEntries(3);\n    } catch (error) {\n      console.error('투자 계획 생성 중 오류:', error);\n      alert('투자 계획 생성에 실패했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const amountPerEntry = plannedEntries > 0 ? totalBudget / plannedEntries : 0;\n  const canAfford = cashBalance ? totalBudget <= cashBalance.cashBalance : false;\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-gray-800 rounded-lg p-6 w-full max-w-lg mx-4\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-bold text-white\">투자 계획 생성</h3>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-300\"\n            disabled={loading}\n          >\n            <XMarkIcon className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* 종목 정보 */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2 text-gray-300\">\n                종목 코드\n              </label>\n              <input\n                type=\"text\"\n                value={symbol}\n                onChange={(e) => setSymbol(e.target.value)}\n                className=\"w-full px-4 py-2 bg-gray-700 text-white rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"예: AAPL, 005930\"\n                required\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2 text-gray-300\">\n                종목명\n              </label>\n              <input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                className=\"w-full px-4 py-2 bg-gray-700 text-white rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"예: Apple Inc.\"\n                required\n              />\n            </div>\n          </div>\n\n          {/* 투자 금액 */}\n          <div>\n            <label className=\"block text-sm font-medium mb-2 text-gray-300\">\n              총 투자 금액 ({portfolio.currency})\n            </label>\n            <input\n              type=\"number\"\n              value={totalBudget}\n              onChange={(e) => setTotalBudget(Number(e.target.value))}\n              className={`w-full px-4 py-2 bg-gray-700 text-white rounded focus:outline-none focus:ring-2 ${\n                canAfford ? 'focus:ring-blue-500' : 'focus:ring-red-500 border border-red-500'\n              }`}\n              min=\"0\"\n              step=\"10000\"\n              required\n            />\n            {cashBalance && (\n              <p className={`text-xs mt-1 ${canAfford ? 'text-gray-400' : 'text-red-400'}`}>\n                사용 가능 현금: {formatCurrency(cashBalance.cashBalance, portfolio.currency)}\n                {!canAfford && ' (부족)'}\n              </p>\n            )}\n          </div>\n\n          {/* 분할 횟수 */}\n          <div>\n            <label className=\"block text-sm font-medium mb-2 text-gray-300\">\n              분할 매수 횟수\n            </label>\n            <select\n              value={plannedEntries}\n              onChange={(e) => setPlannedEntries(Number(e.target.value))}\n              className=\"w-full px-4 py-2 bg-gray-700 text-white rounded focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value={1}>1회 (일괄 매수)</option>\n              <option value={2}>2회 분할</option>\n              <option value={3}>3회 분할</option>\n              <option value={4}>4회 분할</option>\n              <option value={5}>5회 분할</option>\n            </select>\n          </div>\n\n          {/* 회차별 예상 금액 */}\n          {plannedEntries > 1 && (\n            <div className=\"bg-gray-700 p-4 rounded-lg\">\n              <h4 className=\"text-sm font-medium mb-2 text-gray-300 flex items-center\">\n                <CalendarDaysIcon className=\"h-4 w-4 mr-1\" />\n                회차별 예상 투자 금액\n              </h4>\n              <div className=\"space-y-1\">\n                {Array.from({ length: plannedEntries }, (_, i) => (\n                  <div key={i} className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">{i + 1}회차:</span>\n                    <span className=\"text-white\">\n                      {formatCurrency(\n                        i === plannedEntries - 1 \n                          ? totalBudget - (amountPerEntry * (plannedEntries - 1)) // 마지막 회차에서 반올림 오차 조정\n                          : amountPerEntry,\n                        portfolio.currency\n                      )}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* 현금 잔고 정보 */}\n          {cashBalance && (\n            <div className=\"bg-blue-900/20 border border-blue-500/30 p-4 rounded-lg\">\n              <div className=\"flex items-center mb-2\">\n                <CurrencyDollarIcon className=\"h-4 w-4 mr-1 text-blue-400\" />\n                <span className=\"text-sm font-medium text-blue-400\">현금 현황</span>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                <div>\n                  <span className=\"text-gray-400\">사용 가능:</span>\n                  <span className=\"ml-1 text-white\">\n                    {formatCurrency(cashBalance.cashBalance, portfolio.currency)}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-gray-400\">사용 후:</span>\n                  <span className={`ml-1 ${\n                    cashBalance.cashBalance - totalBudget >= 0 ? 'text-green-400' : 'text-red-400'\n                  }`}>\n                    {formatCurrency(cashBalance.cashBalance - totalBudget, portfolio.currency)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* 버튼 */}\n          <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-700\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 text-gray-400 hover:text-gray-300\"\n              disabled={loading}\n            >\n              취소\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading || !symbol.trim() || !name.trim() || totalBudget <= 0}\n              className=\"px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? '생성 중...' : '계획 생성'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}; ","import {\n    ArrowLeftIcon,\n    ChartBarSquareIcon,\n    CheckCircleIcon,\n    ClockIcon,\n    PlusIcon\n} from '@heroicons/react/24/outline';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { ExecuteEntryModal } from '../components/ExecuteEntryModal';\nimport { InvestmentPlanCard } from '../components/InvestmentPlanCard';\nimport { InvestmentPlanModal } from '../components/InvestmentPlanModal';\nimport { LoadingSpinner } from '../components/LoadingSpinner';\nimport { InvestmentPlanService } from '../services/investmentPlanService';\nimport { PortfolioService } from '../services/portfolioService';\nimport { InvestmentEntry, InvestmentPlan, NewInvestmentPlan, Portfolio } from '../types';\nimport { formatCurrency } from '../utils/currencyUtils';\n\nexport const InvestmentPlansPage: React.FC = () => {\n  const { portfolioId } = useParams<{ portfolioId: string }>();\n  const navigate = useNavigate();\n  \n  const [portfolio, setPortfolio] = useState<Portfolio | null>(null);\n  const [plans, setPlans] = useState<InvestmentPlan[]>([]);\n  const [stats, setStats] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  \n  // 모달 상태\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showExecuteModal, setShowExecuteModal] = useState(false);\n  const [selectedEntry, setSelectedEntry] = useState<InvestmentEntry | null>(null);\n  const [selectedPlan, setSelectedPlan] = useState<InvestmentPlan | null>(null);\n\n  useEffect(() => {\n    if (portfolioId) {\n      loadData();\n    }\n  }, [portfolioId]);\n\n  const loadData = async () => {\n    if (!portfolioId) return;\n\n    try {\n      const [portfolioData, plansData, statsData] = await Promise.all([\n        PortfolioService.getById(Number(portfolioId)),\n        InvestmentPlanService.getByPortfolioId(Number(portfolioId)),\n        InvestmentPlanService.getPlanStats(Number(portfolioId)),\n      ]);\n\n      setPortfolio(portfolioData || null);\n      setPlans(plansData);\n      setStats(statsData);\n    } catch (error) {\n      console.error('데이터 로딩 중 오류:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreatePlan = async (planData: NewInvestmentPlan) => {\n    try {\n      await InvestmentPlanService.create(planData);\n      loadData(); // 데이터 새로고침\n    } catch (error) {\n      console.error('투자 계획 생성 중 오류:', error);\n      throw error;\n    }\n  };\n\n  const handleExecuteEntry = (entry: InvestmentEntry) => {\n    const plan = plans.find(p => p.id === entry.planId);\n    if (plan) {\n      setSelectedEntry(entry);\n      setSelectedPlan(plan);\n      setShowExecuteModal(true);\n    }\n  };\n\n  const handleExecuteSubmit = async (executionData: { quantity: number; price: number }) => {\n    if (!selectedEntry) return;\n\n    try {\n      await InvestmentPlanService.executeEntry(selectedEntry.id, executionData);\n      loadData(); // 데이터 새로고침\n      setShowExecuteModal(false);\n      setSelectedEntry(null);\n      setSelectedPlan(null);\n    } catch (error) {\n      console.error('투자 실행 중 오류:', error);\n      throw error;\n    }\n  };\n\n  const handleCancelPlan = async (planId: number) => {\n    const confirmMessage = '정말 이 투자 계획을 취소하시겠습니까?';\n    if (!window.confirm(confirmMessage)) return;\n\n    try {\n      await InvestmentPlanService.cancelPlan(planId);\n      loadData(); // 데이터 새로고침\n    } catch (error) {\n      console.error('투자 계획 취소 중 오류:', error);\n      alert('투자 계획 취소에 실패했습니다.');\n    }\n  };\n\n  const handleViewDetails = (planId: number) => {\n    // 상세 페이지로 이동 (나중에 구현)\n    console.log('View plan details:', planId);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex justify-center items-center h-64\">\n          <LoadingSpinner />\n        </div>\n      </div>\n    );\n  }\n\n  if (!portfolio) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-400\">포트폴리오를 찾을 수 없습니다.</p>\n          <button\n            onClick={() => navigate('/portfolios')}\n            className=\"mt-4 text-blue-500 hover:text-blue-400\"\n          >\n            포트폴리오 목록으로 돌아가기\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* 헤더 */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center\">\n            <button\n              onClick={() => navigate(`/portfolios/${portfolio.id}`)}\n              className=\"text-sm text-gray-400 hover:text-white flex items-center mr-4\"\n            >\n              <ArrowLeftIcon className=\"h-4 w-4 mr-1\" />\n              뒤로\n            </button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-white\">투자 계획</h1>\n              <p className=\"text-gray-400\">{portfolio.name}</p>\n            </div>\n          </div>\n          <button\n            onClick={() => setShowCreateModal(true)}\n            className=\"inline-flex items-center px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n          >\n            <PlusIcon className=\"h-5 w-5 mr-1\" />\n            새 계획\n          </button>\n        </div>\n\n        {/* 통계 카드들 */}\n        {stats && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"bg-gray-800 p-4 rounded-lg\">\n              <div className=\"flex items-center mb-2\">\n                <ChartBarSquareIcon className=\"h-5 w-5 text-blue-400 mr-2\" />\n                <span className=\"text-sm text-gray-400\">총 계획</span>\n              </div>\n              <p className=\"text-2xl font-bold text-white\">{stats.totalPlans}</p>\n            </div>\n            <div className=\"bg-gray-800 p-4 rounded-lg\">\n              <div className=\"flex items-center mb-2\">\n                <ClockIcon className=\"h-5 w-5 text-yellow-400 mr-2\" />\n                <span className=\"text-sm text-gray-400\">진행 중</span>\n              </div>\n              <p className=\"text-2xl font-bold text-white\">{stats.activePlans}</p>\n            </div>\n            <div className=\"bg-gray-800 p-4 rounded-lg\">\n              <div className=\"flex items-center mb-2\">\n                <CheckCircleIcon className=\"h-5 w-5 text-green-400 mr-2\" />\n                <span className=\"text-sm text-gray-400\">완료</span>\n              </div>\n              <p className=\"text-2xl font-bold text-white\">{stats.completedPlans}</p>\n            </div>\n            <div className=\"bg-gray-800 p-4 rounded-lg\">\n              <div className=\"flex items-center mb-2\">\n                <span className=\"text-sm text-gray-400\">총 예산</span>\n              </div>\n              <p className=\"text-2xl font-bold text-white\">\n                {formatCurrency(stats.totalBudget, portfolio.currency)}\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                실행: {formatCurrency(stats.executedBudget, portfolio.currency)}\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* 투자 계획 목록 */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-bold text-white\">투자 계획 목록</h2>\n          \n          {plans.length === 0 ? (\n            <div className=\"text-center py-12 bg-gray-800 rounded-lg\">\n              <p className=\"text-gray-400 mb-4\">등록된 투자 계획이 없습니다.</p>\n              <button\n                onClick={() => setShowCreateModal(true)}\n                className=\"inline-flex items-center px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n              >\n                <PlusIcon className=\"h-5 w-5 mr-1\" />\n                첫 번째 계획 만들기\n              </button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {plans.map((plan) => (\n                <InvestmentPlanCard\n                  key={plan.id}\n                  plan={plan}\n                  currency={portfolio.currency}\n                  portfolioId={portfolio.id}\n                  onExecuteEntry={handleExecuteEntry}\n                  onCancelPlan={handleCancelPlan}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* 모달들 */}\n        <InvestmentPlanModal\n          isOpen={showCreateModal}\n          onClose={() => setShowCreateModal(false)}\n          onSubmit={handleCreatePlan}\n          portfolio={portfolio}\n        />\n\n        <ExecuteEntryModal\n          isOpen={showExecuteModal}\n          onClose={() => {\n            setShowExecuteModal(false);\n            setSelectedEntry(null);\n            setSelectedPlan(null);\n          }}\n          onSubmit={handleExecuteSubmit}\n          entry={selectedEntry}\n          plan={selectedPlan}\n          currency={portfolio.currency}\n        />\n      </div>\n    </div>\n  );\n}; "],"names":["ChartBarSquareIcon","title","titleId","props","svgRef","React.createElement","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","ChartBarSquareIcon$1","React.forwardRef","InvestmentPlanCard","plan","currency","portfolioId","onExecuteEntry","onCancelPlan","progressRate","executedEntries","plannedEntries","nextEntry","entries","filter","entry","status","sort","a","b","entryNumber","jsxs","className","children","jsx","symbol","name","getStatusColor","ClockIcon","PlayIcon","CheckCircleIcon","XCircleIcon","getStatusIcon","getStatusText","toFixed","style","width","formatCurrency","totalBudget","remainingBudget","CurrencyDollarIcon","ChartBarIcon","plannedAmount","onClick","Link","to","map","InvestmentPlanModal","isOpen","onClose","onSubmit","portfolio","initialSymbol","initialName","setSymbol","useState","setName","setTotalBudget","setPlannedEntries","cashBalance","setCashBalance","loading","setLoading","useEffect","loadCashBalance","accountId","async","balance","AccountService","getCashBalance","error","amountPerEntry","canAfford","disabled","XMarkIcon","e","preventDefault","trim","alert","confirmMessage","window","confirm","toUpperCase","type","value","onChange","target","placeholder","required","Number","min","step","CalendarDaysIcon","Array","from","length","_","i","InvestmentPlansPage","useParams","navigate","useNavigate","setPortfolio","plans","setPlans","stats","setStats","showCreateModal","setShowCreateModal","showExecuteModal","setShowExecuteModal","selectedEntry","setSelectedEntry","selectedPlan","setSelectedPlan","loadData","portfolioData","plansData","statsData","Promise","all","PortfolioService","getById","InvestmentPlanService","getByPortfolioId","getPlanStats","handleExecuteEntry","find","p","planId","handleCancelPlan","cancelPlan","LoadingSpinner","ArrowLeftIcon","PlusIcon","totalPlans","activePlans","completedPlans","executedBudget","planData","create","ExecuteEntryModal","executionData","executeEntry"],"mappings":"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","x_google_ignoreList":[0]}