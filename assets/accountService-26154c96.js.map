{"version":3,"file":"accountService-26154c96.js","sources":["../../src/services/accountService.ts"],"sourcesContent":["import { Account, AccountWithPortfolios, Portfolio, Position } from \"../types\";\r\nimport { db } from \"./db\";\r\n\r\nexport class AccountService {\r\n  static async getAll(): Promise<Account[]> {\r\n    return await db.getAccounts();\r\n  }\r\n\r\n  static async getById(id: number): Promise<Account | undefined> {\r\n    return await db.getAccountById(id);\r\n  }\r\n\r\n  static async create(account: Omit<Account, \"id\">): Promise<number> {\r\n    return await db.addAccount(account);\r\n  }\r\n\r\n  static async update(id: number, account: Partial<Account>): Promise<void> {\r\n    await db.updateAccount(id, account);\r\n  }\r\n\r\n  static async delete(id: number): Promise<void> {\r\n    await db.deleteAccount(id);\r\n  }\r\n\r\n  static async getPortfolios(accountId: number): Promise<Portfolio[]> {\r\n    console.log(\r\n      \"getPortfolios called with accountId:\",\r\n      accountId,\r\n      typeof accountId\r\n    );\r\n\r\n    // 전체 포트폴리오 데이터 확인\r\n    const allPortfolios = await db.portfolios.toArray();\r\n    console.log(\r\n      \"전체 포트폴리오 데이터:\",\r\n      allPortfolios.map((p) => ({\r\n        id: p.id,\r\n        name: p.name,\r\n        accountId: p.accountId,\r\n        type: typeof p.accountId,\r\n      }))\r\n    );\r\n\r\n    const portfolios = await db.portfolios\r\n      .where(\"accountId\")\r\n      .equals(accountId)\r\n      .toArray();\r\n\r\n    console.log(\"Found portfolios:\", portfolios);\r\n    return portfolios;\r\n  }\r\n\r\n  static async getWithPortfolios(\r\n    id: number\r\n  ): Promise<\r\n    Account & { portfolios: (Portfolio & { positions: Position[] })[] }\r\n  > {\r\n    const account = await this.getById(id);\r\n    if (!account) throw new Error(\"계좌를 찾을 수 없습니다.\");\r\n\r\n    const portfolios = await db.portfolios\r\n      .where(\"accountId\")\r\n      .equals(id)\r\n      .toArray();\r\n\r\n    // 모든 포트폴리오의 ID를 한 번에 가져옴\r\n    const portfolioIds = portfolios.map((p) => p.id);\r\n\r\n    // 모든 포지션을 한 번에 가져옴\r\n    const positions = await db.positions\r\n      .where(\"portfolioId\")\r\n      .anyOf(portfolioIds)\r\n      .toArray();\r\n\r\n    // 포트폴리오별로 포지션 매핑\r\n    const portfoliosWithPositions = portfolios.map((portfolio) => ({\r\n      ...portfolio,\r\n      positions: positions.filter((pos) => pos.portfolioId === portfolio.id),\r\n    }));\r\n\r\n    return {\r\n      ...account,\r\n      portfolios: portfoliosWithPositions,\r\n    };\r\n  }\r\n\r\n  static async getAllWithPortfolios(): Promise<AccountWithPortfolios[]> {\r\n    const accounts = await this.getAll();\r\n\r\n    return await Promise.all(\r\n      accounts.map(async (account) => {\r\n        const portfolios = await this.getPortfolios(account.id);\r\n\r\n        // 각 포트폴리오의 포지션 로드\r\n        const portfolioIds = portfolios.map((p) => p.id);\r\n        const positions = await db.positions\r\n          .where(\"portfolioId\")\r\n          .anyOf(portfolioIds)\r\n          .toArray();\r\n\r\n        // 포트폴리오별 포지션 매핑\r\n        const portfoliosWithPositions = portfolios.map((portfolio) => ({\r\n          ...portfolio,\r\n          positions: positions.filter(\r\n            (pos) => pos.portfolioId === portfolio.id\r\n          ),\r\n        }));\r\n\r\n        // 전체 계좌 가치 계산\r\n        const totalValue = positions.reduce(\r\n          (sum, pos) => sum + pos.quantity * pos.currentPrice,\r\n          0\r\n        );\r\n\r\n        return {\r\n          ...account,\r\n          portfolios: portfoliosWithPositions,\r\n          totalValue,\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  static async getAccountSummary(id: number): Promise<{\r\n    account: Account;\r\n    portfolios: (Portfolio & { positions: Position[] })[];\r\n    totalValue: number;\r\n    totalCost: number;\r\n    returnRate: number;\r\n  }> {\r\n    const account = await this.getById(id);\r\n    if (!account) throw new Error(\"계좌를 찾을 수 없습니다.\");\r\n\r\n    const portfolios = await db.portfolios\r\n      .where(\"accountId\")\r\n      .equals(id)\r\n      .toArray();\r\n\r\n    // 모든 포트폴리오의 ID를 한 번에 가져옴\r\n    const portfolioIds = portfolios.map((p) => p.id);\r\n\r\n    // 모든 포지션을 한 번에 가져옴\r\n    const positions = await db.positions\r\n      .where(\"portfolioId\")\r\n      .anyOf(portfolioIds)\r\n      .toArray();\r\n\r\n    // 포트폴리오별로 포지션 매핑\r\n    const portfoliosWithPositions = portfolios.map((portfolio) => ({\r\n      ...portfolio,\r\n      positions: positions.filter((pos) => pos.portfolioId === portfolio.id),\r\n    }));\r\n\r\n    // 전체 계좌 가치와 비용 계산\r\n    const totalValue = positions.reduce(\r\n      (sum, pos) => sum + pos.quantity * pos.currentPrice,\r\n      0\r\n    );\r\n\r\n    const totalCost = positions.reduce(\r\n      (sum, pos) => sum + pos.quantity * pos.avgPrice,\r\n      0\r\n    );\r\n\r\n    const returnRate =\r\n      totalCost > 0 ? ((totalValue - totalCost) / totalCost) * 100 : 0;\r\n\r\n    return {\r\n      account,\r\n      portfolios: portfoliosWithPositions,\r\n      totalValue,\r\n      totalCost,\r\n      returnRate,\r\n    };\r\n  }\r\n}\r\n"],"names":["AccountService","getAll","db","getAccounts","getById","id","getAccountById","create","account","addAccount","update","updateAccount","deleteAccount","getPortfolios","accountId","portfolios","toArray","where","equals","getWithPortfolios","this","Error","portfolioIds","map","p","positions","anyOf","portfoliosWithPositions","portfolio","filter","pos","portfolioId","getAllWithPortfolios","accounts","Promise","all","async","totalValue","reduce","sum","quantity","currentPrice","getAccountSummary","totalCost","avgPrice","returnRate"],"mappings":"wCAGO,MAAMA,EACX,mBAAaC,GACJ,aAAMC,EAAGC,aAClB,CAEA,oBAAaC,CAAQC,GACZ,aAAMH,EAAGI,eAAeD,EACjC,CAEA,mBAAaE,CAAOC,GACX,aAAMN,EAAGO,WAAWD,EAC7B,CAEA,mBAAaE,CAAOL,EAAYG,SACxBN,EAAGS,cAAcN,EAAIG,EAC7B,CAEA,mBAAa,CAAOH,SACZH,EAAGU,cAAcP,EACzB,CAEA,0BAAaQ,CAAcC,SAQGZ,EAAGa,WAAWC,UAiBnC,aANkBd,EAAGa,WACzBE,MAAM,aACNC,OAAOJ,GACPE,SAIL,CAEA,8BAAaG,CACXd,GAIA,MAAMG,QAAgBY,KAAKhB,QAAQC,GACnC,IAAKG,EAAe,MAAA,IAAIa,MAAM,kBAExB,MAAAN,QAAmBb,EAAGa,WACzBE,MAAM,aACNC,OAAOb,GACPW,UAGGM,EAAeP,EAAWQ,KAAKC,GAAMA,EAAEnB,KAGvCoB,QAAkBvB,EAAGuB,UACxBR,MAAM,eACNS,MAAMJ,GACNN,UAGGW,EAA0BZ,EAAWQ,KAAKK,IAAe,IAC1DA,EACHH,UAAWA,EAAUI,QAAQC,GAAQA,EAAIC,cAAgBH,EAAUvB,SAG9D,MAAA,IACFG,EACHO,WAAYY,EAEhB,CAEA,iCAAaK,GACL,MAAAC,QAAiBb,KAAKnB,SAE5B,aAAaiC,QAAQC,IACnBF,EAASV,KAAIa,MAAO5B,IAClB,MAAMO,QAAmBK,KAAKP,cAAcL,EAAQH,IAG9CiB,EAAeP,EAAWQ,KAAKC,GAAMA,EAAEnB,KACvCoB,QAAkBvB,EAAGuB,UACxBR,MAAM,eACNS,MAAMJ,GACNN,UAGGW,EAA0BZ,EAAWQ,KAAKK,IAAe,IAC1DA,EACHH,UAAWA,EAAUI,QAClBC,GAAQA,EAAIC,cAAgBH,EAAUvB,SAKrCgC,EAAaZ,EAAUa,QAC3B,CAACC,EAAKT,IAAQS,EAAMT,EAAIU,SAAWV,EAAIW,cACvC,GAGK,MAAA,IACFjC,EACHO,WAAYY,EACZU,iBAIR,CAEA,8BAAaK,CAAkBrC,GAO7B,MAAMG,QAAgBY,KAAKhB,QAAQC,GACnC,IAAKG,EAAe,MAAA,IAAIa,MAAM,kBAExB,MAAAN,QAAmBb,EAAGa,WACzBE,MAAM,aACNC,OAAOb,GACPW,UAGGM,EAAeP,EAAWQ,KAAKC,GAAMA,EAAEnB,KAGvCoB,QAAkBvB,EAAGuB,UACxBR,MAAM,eACNS,MAAMJ,GACNN,UAGGW,EAA0BZ,EAAWQ,KAAKK,IAAe,IAC1DA,EACHH,UAAWA,EAAUI,QAAQC,GAAQA,EAAIC,cAAgBH,EAAUvB,SAI/DgC,EAAaZ,EAAUa,QAC3B,CAACC,EAAKT,IAAQS,EAAMT,EAAIU,SAAWV,EAAIW,cACvC,GAGIE,EAAYlB,EAAUa,QAC1B,CAACC,EAAKT,IAAQS,EAAMT,EAAIU,SAAWV,EAAIc,UACvC,GAMK,MAAA,CACLpC,UACAO,WAAYY,EACZU,aACAM,YACAE,WAPAF,EAAY,GAAMN,EAAaM,GAAaA,EAAa,IAAM,EASnE"}