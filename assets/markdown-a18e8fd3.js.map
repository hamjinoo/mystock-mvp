{"version":3,"file":"markdown-a18e8fd3.js","sources":["../../node_modules/react-markdown/lib/uri-transformer.js","../../node_modules/is-buffer/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/vfile-message/lib/index.js","../../node_modules/vfile/lib/minpath.browser.js","../../node_modules/vfile/lib/minproc.browser.js","../../node_modules/vfile/lib/minurl.shared.js","../../node_modules/vfile/lib/minurl.browser.js","../../node_modules/vfile/lib/index.js","../../node_modules/bail/index.js","../../node_modules/extend/index.js","../../node_modules/is-plain-obj/index.js","../../node_modules/trough/lib/index.js","../../node_modules/unified/lib/index.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/micromark-util-sanitize-uri/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/unist-util-position/lib/index.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/unist-util-is/lib/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/unist-util-visit/lib/index.js","../../node_modules/mdast-util-definitions/lib/index.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/unist-util-generated/lib/index.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/remark-rehype/lib/index.js","../../node_modules/property-information/lib/util/schema.js","../../node_modules/property-information/lib/util/merge.js","../../node_modules/property-information/lib/normalize.js","../../node_modules/property-information/lib/util/info.js","../../node_modules/property-information/lib/util/types.js","../../node_modules/property-information/lib/util/defined-info.js","../../node_modules/property-information/lib/util/create.js","../../node_modules/property-information/lib/xlink.js","../../node_modules/property-information/lib/xml.js","../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/property-information/lib/xmlns.js","../../node_modules/property-information/lib/aria.js","../../node_modules/property-information/lib/html.js","../../node_modules/property-information/lib/svg.js","../../node_modules/property-information/lib/find.js","../../node_modules/property-information/lib/hast-to-react.js","../../node_modules/property-information/index.js","../../node_modules/react-markdown/lib/rehype-filter.js","../../node_modules/hast-util-whitespace/index.js","../../node_modules/inline-style-parser/index.js","../../node_modules/style-to-object/index.js","../../node_modules/react-markdown/lib/ast-to-react.js","../../node_modules/comma-separated-tokens/index.js","../../node_modules/space-separated-tokens/index.js","../../node_modules/react-markdown/lib/react-markdown.js"],"sourcesContent":["const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n"],"names":["protocols","uriTransformer","uri","url","trim","first","charAt","colon","indexOf","index","length","protocol","slice","toLowerCase","obj","constructor","isBuffer","stringifyPosition","value","position","point","line","column","pos","start","end","VFileMessage","Error","reason","place","origin","parts","super","undefined","this","name","message","stack","fatal","source","ruleId","file","actual","expected","note","prototype","path","basename","ext","TypeError","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","segments","joined","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","error","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","options","bufferLike","buffer","data","messages","history","stored","map","prop","includes","assertNonEmpty","push","assertPart","stem","toString","encoding","info","fail","part","bail","hasOwn","Object","hasOwnProperty","toStr","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","key","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","enumerable","configurable","newValue","writable","getProperty","extend","src","copy","copyIsArray","clone","arguments","i","deep","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","output","fn","middleware","called","wrapped","parameters","fnExpectsCallback","done","apply","then","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","plugin","plugins","entry","isPlainObj","parse","doc","vfile","assertParser","newable","String","node","assertCompiler","assertNode","compile","Promise","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","type","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","all","children","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","content","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","document","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","classifyCharacter","resolveAll","context","attention","attentionMarkers","marker","inside","after","open","close","_open","_close","group","text","openingSequence","closingSequence","nextEvents","sliceSerialize","movePoint","insideSpan","_bufferIndex","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","blankLine","partial","blockQuote","state","_container","contBefore","characterEscape","element","createElement","decodeNamedCharacterReference","characterReference","innerHTML","character","textContent","numeric","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","tail","sequenceOpen","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","codeIndented","afterPrefix","atBreak","furtherStart","codeText","between","tailExitIndex","headEnterIndex","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","replace","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","headingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","resolveTo","htmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","media","label","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","labelStartLink","lineEnding","thematicBreak","sequence","initialSize","kind","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","setextUnderline","paragraph","heading","initial","flowInitial","afterConstruct","resolver","createResolver","string","initializeFactory","field","notText","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveText","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","remarkParse","normalizeUri","skip","encodeURIComponent","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","pointStart","pointEnd","trimLines","last","lines","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","parent","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","convert","castFactory","typeFactory","tests","checks","any","anyFactory","propsFactory","CONTINUE","EXIT","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","concat","clean","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","props","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","remarkRehype$1","bridge","mutate","Schema","property","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","types","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","style","tabIndex","translate","typeMustMatch","useMap","width","writingSuggestions","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","valid","dash","cap","kebab","camelcase","hastToReact","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","whitespace","thing","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","lineno","updatePosition","Position","msg","err","filename","silent","re","m","comments","c","val","ret","decl","decls","declarations","StyleToObject","hasIterator","len","styleToObjectModule","exports","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","React","Fragment","ReactIs","isValidElementType","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","commas","v","styleReplacer","parseStyle","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","remarkPlugins","remarkRehype","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","PropTypes","func","arrayOf","bool","oneOfType"],"mappings":"+FAAA,MAAMA,EAAY,CAAC,OAAQ,QAAS,SAAU,OAMvC,SAASC,EAAeC,GAC7B,MAAMC,GAAOD,GAAO,IAAIE,OAClBC,EAAQF,EAAIG,OAAO,GAEzB,GAAc,MAAVD,GAA2B,MAAVA,EACnB,OAAOF,EAGT,MAAMI,EAAQJ,EAAIK,QAAQ,KAC1B,IAAe,IAAXD,EACF,OAAOJ,EAGT,IAAIM,GAAS,EAEb,OAASA,EAAQT,EAAUU,QAAQ,CACjC,MAAMC,EAAWX,EAAUS,GAE3B,GACEF,IAAUI,EAASD,QACnBP,EAAIS,MAAM,EAAGD,EAASD,QAAQG,gBAAkBF,EAEhD,OAAOR,CAEV,CAGD,OADAM,EAAQN,EAAIK,QAAQ,MACL,IAAXC,GAAgBF,EAAQE,EACnBN,GAGTM,EAAQN,EAAIK,QAAQ,MACL,IAAXC,GAAgBF,EAAQE,EACnBN,EAIF,qBACT;;;;;;aCrCiB,SAAmBW,GAClC,OAAc,MAAPA,GAAkC,MAAnBA,EAAIC,aACY,mBAA7BD,EAAIC,YAAYC,UAA2BF,EAAIC,YAAYC,SAASF,EAC/E,GC0BO,SAASG,EAAkBC,GAEhC,OAAKA,GAA0B,iBAAVA,EAKjB,aAAcA,GAAS,SAAUA,EAC5BC,EAASD,EAAMC,UAIpB,UAAWD,GAAS,QAASA,EACxBC,EAASD,GAId,SAAUA,GAAS,WAAYA,EAC1BE,EAAMF,GAIR,GAnBE,EAoBX,CAMA,SAASE,EAAMA,GACb,OAAOX,EAAMW,GAASA,EAAMC,MAAQ,IAAMZ,EAAMW,GAASA,EAAME,OACjE,CAMA,SAASH,EAASI,GAChB,OAAOH,EAAMG,GAAOA,EAAIC,OAAS,IAAMJ,EAAMG,GAAOA,EAAIE,IAC1D,CAMA,SAAShB,EAAMS,GACb,OAAOA,GAA0B,iBAAVA,EAAqBA,EAAQ,CACtD,CCvEO,MAAMQ,UAAqBC,MAmBhC,WAAAZ,CAAYa,EAAQC,EAAOC,GAEzB,MAAMC,EAAQ,CAAC,KAAM,MAErB,IAAIZ,EAAW,CAEbK,MAAO,CAACH,KAAM,KAAMC,OAAQ,MAE5BG,IAAK,CAACJ,KAAM,KAAMC,OAAQ,OAU5B,GAPAU,QAEqB,iBAAVH,IACTC,EAASD,EACTA,OAAQI,GAGY,iBAAXH,EAAqB,CAC9B,MAAMrB,EAAQqB,EAAOtB,QAAQ,MAEd,IAAXC,EACFsB,EAAM,GAAKD,GAEXC,EAAM,GAAKD,EAAOlB,MAAM,EAAGH,GAC3BsB,EAAM,GAAKD,EAAOlB,MAAMH,EAAQ,GAEnC,CAEGoB,IAEE,SAAUA,GAAS,aAAcA,EAC/BA,EAAMV,WAGRA,EAAWU,EAAMV,UAIZ,UAAWU,GAAS,QAASA,EAGpCV,EAAWU,GAGJ,SAAUA,GAAS,WAAYA,KAEtCV,EAASK,MAAQK,IAWrBK,KAAKC,KAAOlB,EAAkBY,IAAU,MAOxCK,KAAKE,QAA4B,iBAAXR,EAAsBA,EAAOQ,QAAUR,EAU7DM,KAAKG,MAAQ,GAES,iBAAXT,GAAuBA,EAAOS,QACvCH,KAAKG,MAAQT,EAAOS,OAUtBH,KAAKN,OAASM,KAAKE,QAYnBF,KAAKI,MAOLJ,KAAKb,KAAOF,EAASK,MAAMH,KAO3Ba,KAAKZ,OAASH,EAASK,MAAMF,OAO7BY,KAAKf,SAAWA,EAOhBe,KAAKK,OAASR,EAAM,GAOpBG,KAAKM,OAAST,EAAM,GAOpBG,KAAKO,KAYLP,KAAKQ,OAOLR,KAAKS,SAULT,KAAK/B,IAOL+B,KAAKU,IAEN,EAGHlB,EAAamB,UAAUJ,KAAO,GAC9Bf,EAAamB,UAAUV,KAAO,GAC9BT,EAAamB,UAAUjB,OAAS,GAChCF,EAAamB,UAAUT,QAAU,GACjCV,EAAamB,UAAUR,MAAQ,GAC/BX,EAAamB,UAAUP,MAAQ,KAC/BZ,EAAamB,UAAUvB,OAAS,KAChCI,EAAamB,UAAUxB,KAAO,KAC9BK,EAAamB,UAAUN,OAAS,KAChCb,EAAamB,UAAUL,OAAS,KAChCd,EAAamB,UAAU1B,SAAW,KC7K3B,MAAM2B,EAAO,CAACC,SAcrB,SAAkBD,EAAME,GACtB,QAAYf,IAARe,GAAoC,iBAARA,EAC9B,MAAM,IAAIC,UAAU,mCAGtBC,EAAWJ,GACX,IAIIK,EAJA3B,EAAQ,EACRC,GAAO,EACPhB,EAAQqC,EAAKpC,OAIjB,QAAYuB,IAARe,GAAoC,IAAfA,EAAItC,QAAgBsC,EAAItC,OAASoC,EAAKpC,OAAQ,CACrE,KAAOD,KACL,GAA+B,KAA3BqC,EAAKM,WAAW3C,IAGlB,GAAI0C,EAAc,CAChB3B,EAAQf,EAAQ,EAChB,KACD,OACQgB,EAAM,IAGf0B,GAAe,EACf1B,EAAMhB,EAAQ,GAIlB,OAAOgB,EAAM,EAAI,GAAKqB,EAAKlC,MAAMY,EAAOC,EACzC,CAED,GAAIuB,IAAQF,EACV,MAAO,GAGT,IAAIO,GAAoB,EACpBC,EAAWN,EAAItC,OAAS,EAE5B,KAAOD,KACL,GAA+B,KAA3BqC,EAAKM,WAAW3C,IAGlB,GAAI0C,EAAc,CAChB3B,EAAQf,EAAQ,EAChB,KACD,OAEG4C,EAAmB,IAGrBF,GAAe,EACfE,EAAmB5C,EAAQ,GAGzB6C,GAAY,IAEVR,EAAKM,WAAW3C,KAAWuC,EAAII,WAAWE,KACxCA,EAAW,IAGb7B,EAAMhB,IAKR6C,GAAY,EACZ7B,EAAM4B,IAMV7B,IAAUC,EACZA,EAAM4B,EACG5B,EAAM,IACfA,EAAMqB,EAAKpC,QAGb,OAAOoC,EAAKlC,MAAMY,EAAOC,EAC3B,EA9F+B8B,QAwG/B,SAAiBT,GAGf,GAFAI,EAAWJ,GAES,IAAhBA,EAAKpC,OACP,MAAO,IAGT,IAGI8C,EAHA/B,GAAO,EACPhB,EAAQqC,EAAKpC,OAKjB,OAASD,GACP,GAA+B,KAA3BqC,EAAKM,WAAW3C,IAClB,GAAI+C,EAAgB,CAClB/B,EAAMhB,EACN,KACD,OACS+C,IAEVA,GAAiB,GAIrB,OAAO/B,EAAM,EACc,KAAvBqB,EAAKM,WAAW,GACd,IACA,IACM,IAAR3B,GAAoC,KAAvBqB,EAAKM,WAAW,GAC7B,KACAN,EAAKlC,MAAM,EAAGa,EACpB,EAxIwCgC,QAkJxC,SAAiBX,GACfI,EAAWJ,GAEX,IASIU,EATA/C,EAAQqC,EAAKpC,OAEbe,GAAO,EACPiC,EAAY,EACZC,GAAY,EAGZC,EAAc,EAIlB,KAAOnD,KAAS,CACd,MAAMoD,EAAOf,EAAKM,WAAW3C,GAE7B,GAAa,KAAToD,EAWApC,EAAM,IAGR+B,GAAiB,EACjB/B,EAAMhB,EAAQ,GAGH,KAAToD,EAEEF,EAAW,EACbA,EAAWlD,EACc,IAAhBmD,IACTA,EAAc,GAEPD,GAAY,IAGrBC,GAAe,QAzBf,GAAIJ,EAAgB,CAClBE,EAAYjD,EAAQ,EACpB,KACD,CAwBJ,CAED,GACEkD,EAAW,GACXlC,EAAM,GAEU,IAAhBmC,GAEiB,IAAhBA,GAAqBD,IAAalC,EAAM,GAAKkC,IAAaD,EAAY,EAEvE,MAAO,GAGT,OAAOZ,EAAKlC,MAAM+C,EAAUlC,EAC9B,EA/MiDqC,KAyNjD,YAAiBC,GACf,IAEIC,EAFAvD,GAAS,EAIb,OAASA,EAAQsD,EAASrD,QACxBwC,EAAWa,EAAStD,IAEhBsD,EAAStD,KACXuD,OACa/B,IAAX+B,EAAuBD,EAAStD,GAASuD,EAAS,IAAMD,EAAStD,IAIvE,YAAkBwB,IAAX+B,EAAuB,IAahC,SAAmBlB,GACjBI,EAAWJ,GAEX,MAAMmB,EAAkC,KAAvBnB,EAAKM,WAAW,GAGjC,IAAIlC,EAuBN,SAAyB4B,EAAMoB,GAC7B,IAMIL,EAEAM,EARAC,EAAS,GACTC,EAAoB,EACpBC,GAAa,EACbC,EAAO,EACP9D,GAAS,EAMb,OAASA,GAASqC,EAAKpC,QAAQ,CAC7B,GAAID,EAAQqC,EAAKpC,OACfmD,EAAOf,EAAKM,WAAW3C,OAClB,IAAa,KAAToD,EACT,MAEAA,EAAO,EACR,CAED,GAAa,KAATA,EAAuB,CACzB,GAAIS,IAAc7D,EAAQ,GAAc,IAAT8D,QAExB,GAAID,IAAc7D,EAAQ,GAAc,IAAT8D,EAAY,CAChD,GACEH,EAAO1D,OAAS,GACM,IAAtB2D,GACyC,KAAzCD,EAAOhB,WAAWgB,EAAO1D,OAAS,IACO,KAAzC0D,EAAOhB,WAAWgB,EAAO1D,OAAS,GAElC,GAAI0D,EAAO1D,OAAS,GAGlB,GAFAyD,EAAiBC,EAAOI,YAAY,KAEhCL,IAAmBC,EAAO1D,OAAS,EAAG,CACpCyD,EAAiB,GACnBC,EAAS,GACTC,EAAoB,IAEpBD,EAASA,EAAOxD,MAAM,EAAGuD,GACzBE,EAAoBD,EAAO1D,OAAS,EAAI0D,EAAOI,YAAY,MAG7DF,EAAY7D,EACZ8D,EAAO,EACP,QACD,OACI,GAAIH,EAAO1D,OAAS,EAAG,CAC5B0D,EAAS,GACTC,EAAoB,EACpBC,EAAY7D,EACZ8D,EAAO,EACP,QACD,CAGCL,IACFE,EAASA,EAAO1D,OAAS,EAAI0D,EAAS,MAAQ,KAC9CC,EAAoB,EAE9B,MACYD,EAAO1D,OAAS,EAClB0D,GAAU,IAAMtB,EAAKlC,MAAM0D,EAAY,EAAG7D,GAE1C2D,EAAStB,EAAKlC,MAAM0D,EAAY,EAAG7D,GAGrC4D,EAAoB5D,EAAQ6D,EAAY,EAG1CA,EAAY7D,EACZ8D,EAAO,CACR,MAAmB,KAATV,GAAyBU,GAAQ,EAC1CA,IAEAA,GAAQ,CAEX,CAED,OAAOH,CACT,CAtGcK,CAAgB3B,GAAOmB,GAEd,IAAjB/C,EAAMR,QAAiBuD,IACzB/C,EAAQ,KAGNA,EAAMR,OAAS,GAA0C,KAArCoC,EAAKM,WAAWN,EAAKpC,OAAS,KACpDQ,GAAS,KAGX,OAAO+C,EAAW,IAAM/C,EAAQA,CAClC,CA9BsCwD,CAAUV,EAChD,EAxOuDW,IAAK,KA0W5D,SAASzB,EAAWJ,GAClB,GAAoB,iBAATA,EACT,MAAM,IAAIG,UACR,mCAAqC2B,KAAKC,UAAU/B,GAG1D,CChaO,MAAMgC,EAAO,CAACC,IAErB,WACE,MAAO,GACT,GCoBO,SAASC,EAAMC,GACpB,OACoB,OAAlBA,GACyB,iBAAlBA,GAEPA,EAAcC,MAEdD,EAAcnD,MAElB,CCxBO,SAASqD,EAAUrC,GACxB,GAAoB,iBAATA,EACTA,EAAO,IAAIsC,IAAItC,QACV,IAAKkC,EAAMlC,GAAO,CAEvB,MAAMuC,EAAQ,IAAIpC,UAChB,+EACEH,EACA,KAGJ,MADAuC,EAAMxB,KAAO,uBACPwB,CACP,CAED,GAAsB,UAAlBvC,EAAKnC,SAAsB,CAE7B,MAAM0E,EAAQ,IAAIpC,UAAU,kCAE5B,MADAoC,EAAMxB,KAAO,yBACPwB,CACP,CAED,OAWF,SAA6BlF,GAC3B,GAAqB,KAAjBA,EAAImF,SAAiB,CAEvB,MAAMD,EAAQ,IAAIpC,UAChB,wDAGF,MADAoC,EAAMxB,KAAO,4BACPwB,CACP,CAED,MAAME,EAAWpF,EAAIoF,SACrB,IAAI9E,GAAS,EAEb,OAASA,EAAQ8E,EAAS7E,QACxB,GACiC,KAA/B6E,EAASnC,WAAW3C,IACe,KAAnC8E,EAASnC,WAAW3C,EAAQ,GAC5B,CACA,MAAM+E,EAAQD,EAASnC,WAAW3C,EAAQ,GAC1C,GAAc,KAAV+E,GAAoC,MAAVA,EAAyB,CAErD,MAAMH,EAAQ,IAAIpC,UAChB,uDAGF,MADAoC,EAAMxB,KAAO,4BACPwB,CACP,CACF,CAGH,OAAOI,mBAAmBF,EAC5B,CA1CSG,CAAoB5C,EAC7B,CCgEA,MAAM6C,EAAQ,CAAC,UAAW,OAAQ,WAAY,OAAQ,UAAW,WAE1D,MAAMC,EAuBX,WAAA7E,CAAYG,GAEV,IAAI2E,EAKFA,EAHG3E,EAEuB,iBAAVA,GAoYtB,SAAgBA,GACd,OAAO4E,EAAW5E,EACpB,CAtY4C6E,CAAO7E,GACnC,CAACA,SACF8D,EAAM9D,GACL,CAAC4B,KAAM5B,GAEPA,EANA,CAAE,EAiBdgB,KAAK8D,KAAO,CAAE,EAOd9D,KAAK+D,SAAW,GAShB/D,KAAKgE,QAAU,GAOfhE,KAAK6C,IAAMD,EAAKC,MAQhB7C,KAAKhB,MAYLgB,KAAKiE,OAULjE,KAAKkC,OAULlC,KAAKkE,IAIL,IAkBIC,EAlBA5F,GAAS,EAEb,OAASA,EAAQkF,EAAMjF,QAAQ,CAC7B,MAAM2F,EAAOV,EAAMlF,GAKjB4F,KAAQR,QACU5D,IAAlB4D,EAAQQ,IACU,OAAlBR,EAAQQ,KAGRnE,KAAKmE,GAAiB,YAATA,EAAqB,IAAIR,EAAQQ,IAASR,EAAQQ,GAElE,CAMD,IAAKA,KAAQR,EAENF,EAAMW,SAASD,KAElBnE,KAAKmE,GAAQR,EAAQQ,GAG1B,CAOD,QAAIvD,GACF,OAAOZ,KAAKgE,QAAQhE,KAAKgE,QAAQxF,OAAS,EAC3C,CAWD,QAAIoC,CAAKA,GACHkC,EAAMlC,KACRA,EAAOqC,EAAUrC,IAGnByD,EAAezD,EAAM,QAEjBZ,KAAKY,OAASA,GAChBZ,KAAKgE,QAAQM,KAAK1D,EAErB,CAKD,WAAIS,GACF,MAA4B,iBAAdrB,KAAKY,KAAoBA,EAAKS,QAAQrB,KAAKY,WAAQb,CAClE,CAOD,WAAIsB,CAAQA,GACVL,EAAWhB,KAAKa,SAAU,WAC1Bb,KAAKY,KAAOA,EAAKgB,KAAKP,GAAW,GAAIrB,KAAKa,SAC3C,CAKD,YAAIA,GACF,MAA4B,iBAAdb,KAAKY,KAAoBA,EAAKC,SAASb,KAAKY,WAAQb,CACnE,CASD,YAAIc,CAASA,GACXwD,EAAexD,EAAU,YACzB0D,EAAW1D,EAAU,YACrBb,KAAKY,KAAOA,EAAKgB,KAAK5B,KAAKqB,SAAW,GAAIR,EAC3C,CAKD,WAAIU,GACF,MAA4B,iBAAdvB,KAAKY,KAAoBA,EAAKW,QAAQvB,KAAKY,WAAQb,CAClE,CASD,WAAIwB,CAAQA,GAIV,GAHAgD,EAAWhD,EAAS,WACpBP,EAAWhB,KAAKqB,QAAS,WAErBE,EAAS,CACX,GAA8B,KAA1BA,EAAQL,WAAW,GACrB,MAAM,IAAIzB,MAAM,iCAGlB,GAAI8B,EAAQ6C,SAAS,IAAK,GACxB,MAAM,IAAI3E,MAAM,yCAEnB,CAEDO,KAAKY,KAAOA,EAAKgB,KAAK5B,KAAKqB,QAASrB,KAAKwE,MAAQjD,GAAW,IAC7D,CAKD,QAAIiD,GACF,MAA4B,iBAAdxE,KAAKY,KACfA,EAAKC,SAASb,KAAKY,KAAMZ,KAAKuB,cAC9BxB,CACL,CASD,QAAIyE,CAAKA,GACPH,EAAeG,EAAM,QACrBD,EAAWC,EAAM,QACjBxE,KAAKY,KAAOA,EAAKgB,KAAK5B,KAAKqB,SAAW,GAAImD,GAAQxE,KAAKuB,SAAW,IACnE,CAWD,QAAAkD,CAASC,GACP,OAAQ1E,KAAKhB,OAAS,IAAIyF,SAASC,QAAY3E,EAChD,CAkBD,OAAAG,CAAQR,EAAQC,EAAOC,GACrB,MAAMM,EAAU,IAAIV,EAAaE,EAAQC,EAAOC,GAWhD,OATII,KAAKY,OACPV,EAAQD,KAAOD,KAAKY,KAAO,IAAMV,EAAQD,KACzCC,EAAQK,KAAOP,KAAKY,MAGtBV,EAAQE,OAAQ,EAEhBJ,KAAK+D,SAASO,KAAKpE,GAEZA,CACR,CAkBD,IAAAyE,CAAKjF,EAAQC,EAAOC,GAClB,MAAMM,EAAUF,KAAKE,QAAQR,EAAQC,EAAOC,GAI5C,OAFAM,EAAQE,MAAQ,KAETF,CACR,CAsBD,IAAA0E,CAAKlF,EAAQC,EAAOC,GAClB,MAAMM,EAAUF,KAAKE,QAAQR,EAAQC,EAAOC,GAI5C,MAFAM,EAAQE,OAAQ,EAEVF,CACP,EAaH,SAASqE,EAAWM,EAAM5E,GACxB,GAAI4E,GAAQA,EAAKT,SAASxD,EAAK6B,KAC7B,MAAM,IAAIhD,MACR,IAAMQ,EAAO,uCAAyCW,EAAK6B,IAAM,IAGvE,CAYA,SAAS4B,EAAeQ,EAAM5E,GAC5B,IAAK4E,EACH,MAAM,IAAIpF,MAAM,IAAMQ,EAAO,oBAEjC,CAYA,SAASe,EAAWJ,EAAMX,GACxB,IAAKW,EACH,MAAM,IAAInB,MAAM,YAAcQ,EAAO,kCAEzC,CCpfO,SAAS6E,EAAK3B,GACnB,GAAIA,EACF,MAAMA,CAEV,CCTA,IAAI4B,EAASC,OAAOrE,UAAUsE,eAC1BC,EAAQF,OAAOrE,UAAU8D,SACzBU,EAAiBH,OAAOG,eACxBC,EAAOJ,OAAOK,yBAEdC,EAAU,SAAiBC,GAC9B,MAA6B,mBAAlBC,MAAMF,QACTE,MAAMF,QAAQC,GAGK,mBAApBL,EAAMO,KAAKF,EACnB,EAEIG,EAAgB,SAAuB9G,GAC1C,IAAKA,GAA2B,oBAApBsG,EAAMO,KAAK7G,GACtB,OAAO,EAGR,IASI+G,EATAC,EAAoBb,EAAOU,KAAK7G,EAAK,eACrCiH,EAAmBjH,EAAIC,aAAeD,EAAIC,YAAY8B,WAAaoE,EAAOU,KAAK7G,EAAIC,YAAY8B,UAAW,iBAE9G,GAAI/B,EAAIC,cAAgB+G,IAAsBC,EAC7C,OAAO,EAMR,IAAKF,KAAO/G,GAEZ,YAAsB,IAAR+G,GAAuBZ,EAAOU,KAAK7G,EAAK+G,EACvD,EAGIG,EAAc,SAAqBC,EAAQpC,GAC1CwB,GAAmC,cAAjBxB,EAAQ1D,KAC7BkF,EAAeY,EAAQpC,EAAQ1D,KAAM,CACpC+F,YAAY,EACZC,cAAc,EACdjH,MAAO2E,EAAQuC,SACfC,UAAU,IAGXJ,EAAOpC,EAAQ1D,MAAQ0D,EAAQuC,QAEjC,EAGIE,EAAc,SAAqBxH,EAAKqB,GAC3C,GAAa,cAATA,EAAsB,CACzB,IAAK8E,EAAOU,KAAK7G,EAAKqB,GACrB,OACM,GAAImF,EAGV,OAAOA,EAAKxG,EAAKqB,GAAMjB,KAExB,CAED,OAAOJ,EAAIqB,EACZ,YAEiB,SAASoG,IACzB,IAAI1C,EAAS1D,EAAMqG,EAAKC,EAAMC,EAAaC,EACvCV,EAASW,UAAU,GACnBC,EAAI,EACJnI,EAASkI,UAAUlI,OACnBoI,GAAO,EAaX,IAVsB,kBAAXb,IACVa,EAAOb,EACPA,EAASW,UAAU,IAAM,GAEzBC,EAAI,IAES,MAAVZ,GAAqC,iBAAXA,GAAyC,mBAAXA,KAC3DA,EAAS,CAAA,GAGHY,EAAInI,IAAUmI,EAGpB,GAAe,OAFfhD,EAAU+C,UAAUC,IAInB,IAAK1G,KAAQ0D,EACZ2C,EAAMF,EAAYL,EAAQ9F,GAItB8F,KAHJQ,EAAOH,EAAYzC,EAAS1D,MAKvB2G,GAAQL,IAASb,EAAca,KAAUC,EAAclB,EAAQiB,MAC9DC,GACHA,GAAc,EACdC,EAAQH,GAAOhB,EAAQgB,GAAOA,EAAM,IAEpCG,EAAQH,GAAOZ,EAAcY,GAAOA,EAAM,CAAA,EAI3CR,EAAYC,EAAQ,CAAE9F,KAAMA,EAAMiG,SAAUG,EAAOO,EAAMH,EAAOF,WAGtC,IAATA,GACjBT,EAAYC,EAAQ,CAAE9F,KAAMA,EAAMiG,SAAUK,KAQjD,OAAOR,CACR,GCpHe,SAASL,EAAc1G,GACrC,GAAqB,iBAAVA,GAAgC,OAAVA,EAChC,OAAO,EAGR,MAAM2B,EAAYqE,OAAO6B,eAAe7H,GACxC,QAAsB,OAAd2B,GAAsBA,IAAcqE,OAAOrE,WAAkD,OAArCqE,OAAO6B,eAAelG,IAA0BmG,OAAOC,eAAe/H,GAAY8H,OAAOE,YAAYhI,EACtK,CC+BO,SAASiI,IAEd,MAAMC,EAAM,GAENC,EAAW,CAACC,IAKlB,YAAgBC,GACd,IAAIC,GAAmB,EAEvB,MAAMC,EAAWF,EAAOG,MAExB,GAAwB,mBAAbD,EACT,MAAM,IAAIxG,UAAU,2CAA6CwG,IAWnE,SAASE,EAAKtE,KAAUuE,GACtB,MAAMC,EAAKT,IAAMI,GACjB,IAAI/I,GAAS,EAEb,GAAI4E,EACFoE,EAASpE,OADX,CAMA,OAAS5E,EAAQ8I,EAAO7I,QACA,OAAlBkJ,EAAOnJ,SAAqCwB,IAAlB2H,EAAOnJ,KACnCmJ,EAAOnJ,GAAS8I,EAAO9I,IAK3B8I,EAASK,EAGLC,EAqDH,SAAcC,EAAYL,GAE/B,IAAIM,EAEJ,OAAOC,EAQP,SAASA,KAAWC,GAClB,MAAMC,EAAoBJ,EAAWpJ,OAASuJ,EAAWvJ,OAEzD,IAAI0D,EAEA8F,GACFD,EAAWzD,KAAK2D,GAGlB,IACE/F,EAAS0F,EAAWM,MAAMlI,KAAM+H,EACjC,CAAC,MAAO5E,GAOP,GAAI6E,GAAqBH,EACvB,MAPsC,EAUxC,OAAOI,EAViC,EAWzC,CAEID,IACC9F,GAAUA,EAAOiG,MAA+B,mBAAhBjG,EAAOiG,KACzCjG,EAAOiG,KAAKA,EAAMF,GACT/F,aAAkBzC,MAC3BwI,EAAK/F,GAELiG,EAAKjG,GAGV,CAOD,SAAS+F,EAAK9E,KAAUuE,GACjBG,IACHA,GAAS,EACTN,EAASpE,KAAUuE,GAEtB,CAOD,SAASS,EAAKnJ,GACZiJ,EAAK,KAAMjJ,EACZ,CACH,CAxHQoJ,CAAKT,EAAIF,EAATW,IAAkBV,GAElBH,EAAS,QAASG,EAhBnB,CAkBF,CAjCDD,CAAK,QAASJ,EAkCf,EAhDsBgB,IAmDvB,SAAaC,GACX,GAA0B,mBAAfA,EACT,MAAM,IAAIvH,UACR,+CAAiDuH,GAKrD,OADApB,EAAI5C,KAAKgE,GACFnB,CACR,GA1DD,OAAOA,CA2DT,CC3EO,MAAMoB,EAQb,SAASC,IACP,MAAMC,EAAexB,IAEfyB,EAAY,GAElB,IAEIC,EAFAC,EAAY,CAAE,EAGdC,GAAe,EA2BnB,OAvBAC,EAAUhF,KA6CV,SAAc6B,EAAK3G,GACjB,GAAmB,iBAAR2G,EAET,OAAyB,IAArBe,UAAUlI,QACZuK,EAAe,OAAQJ,GACvBC,EAAUjD,GAAO3G,EACV8J,GAIDE,EAAIvD,KAAKmD,EAAWjD,IAAQiD,EAAUjD,IAAS,KAIzD,GAAIA,EAGF,OAFAoD,EAAe,OAAQJ,GACvBC,EAAYjD,EACLmD,EAIT,OAAOF,CACR,EAlEDE,EAAUG,YAASlJ,EACnB+I,EAAUI,cAAWnJ,EAGrB+I,EAAUK,OAiEV,WACE,GAAIR,EACF,OAAOG,EAGT,OAASD,EAAcH,EAAUlK,QAAQ,CACvC,MAAO4K,KAAazF,GAAW+E,EAAUG,GAEzC,IAAmB,IAAflF,EAAQ,GACV,UAGiB,IAAfA,EAAQ,KACVA,EAAQ,QAAK5D,GAIf,MAAMsJ,EAAcD,EAAS3D,KAAKqD,KAAcnF,GAErB,mBAAhB0F,GACTZ,EAAaJ,IAAIgB,EAEpB,CAKD,OAHAV,GAAS,EACTE,EAAcS,OAAOC,kBAEdT,CACR,EA1FDA,EAAUJ,UAAYA,EAEtBI,EAAUT,IA+FV,SAAarJ,KAAU2E,GAErB,IAAI6F,EAIJ,GAFAT,EAAe,MAAOJ,GAElB3J,cAEG,GAAqB,mBAAVA,EAChByK,EAAUzK,KAAU2E,OACf,IAAqB,iBAAV3E,EAOhB,MAAM,IAAI+B,UAAU,+BAAiC/B,EAAQ,KANzDwG,MAAMF,QAAQtG,GAChB0K,EAAQ1K,GAER2K,EAAU3K,EAIb,CAEGwK,IACFZ,EAAUY,SAAWxE,OAAO4E,OAAOhB,EAAUY,UAAY,CAAE,EAAEA,IAG/D,OAAOV,EAMP,SAASe,EAAI7K,GACX,GAAqB,mBAAVA,EACTyK,EAAUzK,OACL,IAAqB,iBAAVA,EAQhB,MAAM,IAAI+B,UAAU,+BAAiC/B,EAAQ,KAP7D,GAAIwG,MAAMF,QAAQtG,GAAQ,CACxB,MAAO8K,KAAWnG,GAAW3E,EAC7ByK,EAAUK,KAAWnG,EAC/B,MACUgG,EAAU3K,EAIb,CACF,CAMD,SAAS2K,EAAUzH,GACjBwH,EAAQxH,EAAO6H,SAEX7H,EAAOsH,WACTA,EAAWxE,OAAO4E,OAAOJ,GAAY,CAAE,EAAEtH,EAAOsH,UAEnD,CAMD,SAASE,EAAQK,GACf,IAAIxL,GAAS,EAEb,GAAIwL,aAEG,KAAIvE,MAAMF,QAAQyE,GAMvB,MAAM,IAAIhJ,UAAU,oCAAsCgJ,EAAU,KALpE,OAASxL,EAAQwL,EAAQvL,QAAQ,CAE/BqL,EADcE,EAAQxL,GAEvB,CAGF,CACF,CAOD,SAASkL,EAAUK,EAAQ9K,GACzB,IAEIgL,EAFAzL,GAAS,EAIb,OAASA,EAAQmK,EAAUlK,QACzB,GAAIkK,EAAUnK,GAAO,KAAOuL,EAAQ,CAClCE,EAAQtB,EAAUnK,GAClB,KACD,CAGCyL,GACEC,EAAWD,EAAM,KAAOC,EAAWjL,KACrCA,EAAQqH,GAAO,EAAM2D,EAAM,GAAIhL,IAGjCgL,EAAM,GAAKhL,GAGX0J,EAAUpE,KAAK,IAAIoC,WAEtB,CACF,EApMDoC,EAAUoB,MAuMV,SAAeC,GACbrB,EAAUK,SACV,MAAM5I,EAAO6J,EAAMD,GACblB,EAASH,EAAUG,OAGzB,GAFAoB,EAAa,QAASpB,GAElBqB,EAAQrB,EAAQ,SAElB,OAAO,IAAIA,EAAOsB,OAAOhK,GAAOA,GAAM2J,QAIxC,OAAOjB,EAAOsB,OAAOhK,GAAOA,EAC7B,EAnNDuI,EAAUnG,UAsNV,SAAmB6H,EAAML,GACvBrB,EAAUK,SACV,MAAM5I,EAAO6J,EAAMD,GACbjB,EAAWJ,EAAUI,SAI3B,GAHAuB,EAAe,YAAavB,GAC5BwB,EAAWF,GAEPF,EAAQpB,EAAU,WAEpB,OAAO,IAAIA,EAASsB,EAAMjK,GAAMoK,UAIlC,OAAOzB,EAASsB,EAAMjK,EACvB,EAlODuI,EAAU1B,IA0OV,SAAaoD,EAAML,EAAK5C,GACtBmD,EAAWF,GACX1B,EAAUK,SAEL5B,GAA2B,mBAAR4C,IACtB5C,EAAW4C,EACXA,OAAMpK,GAGR,IAAKwH,EACH,OAAO,IAAIqD,QAAQC,GAUrB,SAASA,EAASC,EAASC,GAUzB,SAAS9C,EAAK9E,EAAO6H,EAAMzK,GACzByK,EAAOA,GAAQR,EACXrH,EACF4H,EAAO5H,GACE2H,EACTA,EAAQE,GAGRzD,EAAS,KAAMyD,EAAMzK,EAExB,CAlBDkI,EAAarB,IAAIoD,EAAMJ,EAAMD,GAAMlC,EAmBpC,CA5BD4C,EAAS,KAAMtD,EA6BhB,EAnRDuB,EAAUmC,QAsRV,SAAiBT,EAAMjK,GAErB,IAAI2B,EAEAgJ,EAOJ,OALApC,EAAU1B,IAAIoD,EAAMjK,EAAM0H,GAE1BkD,EAAW,UAAW,MAAOD,GAGtBhJ,EAOP,SAAS+F,EAAK9E,EAAO6H,GACnBlG,EAAK3B,GACLjB,EAAS8I,EACTE,GAAW,CACZ,CACF,EA3SDpC,EAAUsC,QAkTV,SAAiBjB,EAAK5C,GAKpB,GAJAuB,EAAUK,SACVkB,EAAa,UAAWvB,EAAUG,QAClCwB,EAAe,UAAW3B,EAAUI,WAE/B3B,EACH,OAAO,IAAIqD,QAAQC,GAUrB,SAASA,EAASC,EAASC,GACzB,MAAMxK,EAAO6J,EAAMD,GA0BnB,SAASlC,EAAK9E,EAAO5C,GACf4C,IAAU5C,EACZwK,EAAO5H,GACE2H,EACTA,EAAQvK,GAGRgH,EAAS,KAAMhH,EAElB,CAjCDuI,EAAU1B,IAAI0B,EAAUoB,MAAM3J,GAAOA,EAAM,CAAC4C,EAAO6H,EAAMzK,KACvD,IAAI4C,GAAU6H,GAASzK,EAEhB,CAEL,MAAM2B,EAAS4G,EAAUnG,UAAUqI,EAAMzK,GAErC2B,UAsMY,iBADIlD,EAnMYkD,IAoMJpD,EAASE,GAnMnCuB,EAAKvB,MAAQkD,EAEb3B,EAAK2B,OAASA,GAGhB+F,EAAK9E,EAAO5C,EACb,MAdC0H,EAAK9E,GA0Mf,IAA8BnE,GA1KzB,CA5CD6L,EAAS,KAAMtD,EA6ChB,EAvWDuB,EAAUuC,YA0WV,SAAqBlB,GAEnB,IAAIe,EAEJpC,EAAUK,SACVkB,EAAa,cAAevB,EAAUG,QACtCwB,EAAe,cAAe3B,EAAUI,UAExC,MAAM3I,EAAO6J,EAAMD,GAMnB,OAJArB,EAAUsC,QAAQ7K,EAAM0H,GAExBkD,EAAW,cAAe,UAAWD,GAE9B3K,EAMP,SAAS0H,EAAK9E,GACZ+H,GAAW,EACXpG,EAAK3B,EACN,CACF,EA/XM2F,EAIP,SAASA,IACP,MAAMwC,EAAc9C,IACpB,IAAIjK,GAAS,EAEb,OAASA,EAAQmK,EAAUlK,QACzB8M,EAAYjD,OAAOK,EAAUnK,IAK/B,OAFA+M,EAAYxH,KAAKuC,GAAO,EAAM,CAAE,EAAEuC,IAE3B0C,CACR,CAiXH,CA3auB9C,GAAOW,SAExBH,EAAM,CAAE,EAAC/D,eAkbf,SAASqF,EAAQtL,EAAOiB,GACtB,MACmB,mBAAVjB,GAGPA,EAAM2B,YAeV,SAAc3B,GAEZ,IAAI2G,EAEJ,IAAKA,KAAO3G,EACV,GAAIgK,EAAIvD,KAAKzG,EAAO2G,GAClB,OAAO,EAIX,OAAO,CACT,CArBK4F,CAAKvM,EAAM2B,YAAcV,KAAQjB,EAAM2B,UAE5C,CA4BA,SAAS0J,EAAapK,EAAMjB,GAC1B,GAAqB,mBAAVA,EACT,MAAM,IAAI+B,UAAU,WAAad,EAAO,qBAE5C,CASA,SAASwK,EAAexK,EAAMjB,GAC5B,GAAqB,mBAAVA,EACT,MAAM,IAAI+B,UAAU,WAAad,EAAO,uBAE5C,CASA,SAAS8I,EAAe9I,EAAM0I,GAC5B,GAAIA,EACF,MAAM,IAAIlJ,MACR,gBACEQ,EACA,mHAGR,CAQA,SAASyK,EAAWF,GAGlB,IAAKP,EAAWO,IAA8B,iBAAdA,EAAKgB,KACnC,MAAM,IAAIzK,UAAU,uBAAyByJ,EAAO,IAGxD,CAUA,SAASW,EAAWlL,EAAMwL,EAAWP,GACnC,IAAKA,EACH,MAAM,IAAIzL,MACR,IAAMQ,EAAO,0BAA4BwL,EAAY,YAG3D,CAMA,SAASrB,EAAMpL,GACb,OAOF,SAAyBA,GACvB,OAAO0M,QACL1M,GACmB,iBAAVA,GACP,YAAaA,GACb,aAAcA,EAEpB,CAdS2M,CAAgB3M,GAASA,EAAQ,IAAI0E,EAAM1E,EACpD,CCrjBA,MAAM4M,EAAe,CAAE,EAuCvB,SAASC,EAAI7M,EAAO8M,EAAiBC,GACnC,GAqDF,SAAc/M,GACZ,OAAO0M,QAAQ1M,GAA0B,iBAAVA,EACjC,CAvDMwL,CAAKxL,GAAQ,CACf,GAAI,UAAWA,EACb,MAAsB,SAAfA,EAAMwM,MAAoBO,EAAmB/M,EAAMA,MAAX,GAGjD,GAAI8M,GAAmB,QAAS9M,GAASA,EAAMgN,IAC7C,OAAOhN,EAAMgN,IAGf,GAAI,aAAchN,EAChB,OAAOiN,EAAIjN,EAAMkN,SAAUJ,EAAiBC,EAE/C,CAED,OAAIvG,MAAMF,QAAQtG,GACTiN,EAAIjN,EAAO8M,EAAiBC,GAG9B,EACT,CAcA,SAASE,EAAI5E,EAAQyE,EAAiBC,GAEpC,MAAM7J,EAAS,GACf,IAAI3D,GAAS,EAEb,OAASA,EAAQ8I,EAAO7I,QACtB0D,EAAO3D,GAASsN,EAAIxE,EAAO9I,GAAQuN,EAAiBC,GAGtD,OAAO7J,EAAON,KAAK,GACrB,CCzEO,SAASuK,EAAOC,EAAM9M,EAAO+M,EAAQC,GAC1C,MAAM/M,EAAM6M,EAAK5N,OACjB,IAEIuJ,EAFAwE,EAAa,EAajB,GAPEjN,EADEA,EAAQ,GACDA,EAAQC,EAAM,EAAIA,EAAMD,EAEzBA,EAAQC,EAAMA,EAAMD,EAE9B+M,EAASA,EAAS,EAAIA,EAAS,EAG3BC,EAAM9N,OAAS,IACjBuJ,EAAavC,MAAMgH,KAAKF,GACxBvE,EAAW0E,QAAQnN,EAAO+M,GAE1BD,EAAKD,UAAUpE,QAMf,IAHIsE,GAAQD,EAAKD,OAAO7M,EAAO+M,GAGxBE,EAAaD,EAAM9N,QACxBuJ,EAAauE,EAAM5N,MAAM6N,EAAYA,EAAa,KAClDxE,EAAW0E,QAAQnN,EAAO,GAE1B8M,EAAKD,UAAUpE,GACfwE,GAAc,IACdjN,GAAS,GAGf,CAkBO,SAASgF,EAAK8H,EAAME,GACzB,OAAIF,EAAK5N,OAAS,GAChB2N,EAAOC,EAAMA,EAAK5N,OAAQ,EAAG8N,GACtBF,GAEFE,CACT,CCvEA,MAAMrH,EAAiB,CAAE,EAACA,eA+B1B,SAASyH,EAAgBT,EAAKU,GAE5B,IAAIC,EAEJ,IAAKA,KAAQD,EAAW,CACtB,MAEME,GAFQ5H,EAAeQ,KAAKwG,EAAKW,GAAQX,EAAIW,QAAQ7M,KAEpCkM,EAAIW,GAAQ,CAAA,GAE7BE,EAAQH,EAAUC,GAExB,IAAIjL,EAEJ,GAAImL,EACF,IAAKnL,KAAQmL,EAAO,CACb7H,EAAeQ,KAAKoH,EAAMlL,KAAOkL,EAAKlL,GAAQ,IACnD,MAAM3C,EAAQ8N,EAAMnL,GACpBoL,EAEEF,EAAKlL,GACL6D,MAAMF,QAAQtG,GAASA,EAAQA,EAAQ,CAACA,GAAS,GAEpD,CAEJ,CACH,CAUA,SAAS+N,EAAWC,EAAUZ,GAC5B,IAAI7N,GAAS,EAEb,MAAM0O,EAAS,GAEf,OAAS1O,EAAQ6N,EAAK5N,SAEE,UAApB4N,EAAK7N,GAAOsL,IAAkBmD,EAAWC,GAAQ3I,KAAK8H,EAAK7N,IAG/D4N,EAAOa,EAAU,EAAG,EAAGC,EACzB,CC5EO,MCaMC,EAAaC,GAAW,YAcxBC,EAAoBD,GAAW,cAuB/BE,EAAaF,GAAW,uBAa9B,SAASG,GAAa3L,GAC3B,OAGW,OAATA,IAAkBA,EAAO,IAAe,MAATA,EAEnC,CAaO,MAAM4L,GAAaJ,GAAW,MAoBxBK,GAAgBL,GAAW,cAe3BM,GAAmBN,GAAW,kBAiBpC,SAASO,GAAmB/L,GACjC,OAAgB,OAATA,GAAiBA,GAAQ,CAClC,CAWO,SAASgM,GAA0BhM,GACxC,OAAgB,OAATA,IAAkBA,EAAO,GAAc,KAATA,EACvC,CAiBO,SAASiM,GAAcjM,GAC5B,OAAiB,IAAVA,IAAyB,IAAVA,GAAwB,KAATA,CACvC,CAuBO,MAAMkM,GAAqBV,GD9LhC,wwCCoNWW,GAAoBX,GAAW,MAQ5C,SAASA,GAAWY,GAClB,OAUA,SAAepM,GACb,OAAgB,OAATA,GAAiBoM,EAAMC,KAAKzD,OAAO0D,aAAatM,GACxD,CACH,CC3MO,SAASuM,GAAaC,EAASC,EAAI5C,EAAM6C,GAC9C,MAAMC,EAAQD,EAAMA,EAAM,EAAI/E,OAAOC,kBACrC,IAAIgF,EAAO,EACX,OAGA,SAAe5M,GACb,GAAIiM,GAAcjM,GAEhB,OADAwM,EAAQK,MAAMhD,GACPiD,EAAO9M,GAEhB,OAAOyM,EAAGzM,EACX,EAGD,SAAS8M,EAAO9M,GACd,OAAIiM,GAAcjM,IAAS4M,IAASD,GAClCH,EAAQO,QAAQ/M,GACT8M,IAETN,EAAQQ,KAAKnD,GACN4C,EAAGzM,GACX,CACH,CCtDO,MAAMiN,GAAU,CACrBC,SAOF,SAA2BV,GACzB,MAAMW,EAAeX,EAAQY,QAC3B/O,KAAKgP,OAAOjC,WAAWkC,eASzB,SAAoCtN,GAClC,GAAa,OAATA,EAEF,YADAwM,EAAQO,QAAQ/M,GAMlB,OAHAwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNT,GAAaC,EAASW,EAAc,aAC5C,EAGD,SAA0BnN,GAExB,OADAwM,EAAQK,MAAM,aACPU,EAAUvN,EAClB,GAnBD,IAAIwN,EACJ,OAAOL,EAqBP,SAASI,EAAUvN,GACjB,MAAMyN,EAAQjB,EAAQK,MAAM,YAAa,CACvCa,YAAa,OACbF,aAMF,OAJIA,IACFA,EAAS1H,KAAO2H,GAElBD,EAAWC,EACJtL,EAAKnC,EACb,CAGD,SAASmC,EAAKnC,GACZ,OAAa,OAATA,GACFwM,EAAQQ,KAAK,aACbR,EAAQQ,KAAK,kBACbR,EAAQO,QAAQ/M,IAGd+L,GAAmB/L,IACrBwM,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,aACNO,IAITf,EAAQO,QAAQ/M,GACTmC,EACR,CACH,GC1DO,MAAMwL,GAAW,CACtBT,SAYF,SAA4BV,GAC1B,MAAMoB,EAAOvP,KAEPG,EAAQ,GACd,IAEIqP,EAEAC,EAEAC,EANAC,EAAY,EAOhB,OAAOrQ,EAGP,SAASA,EAAMqC,GAWb,GAAIgO,EAAYxP,EAAM3B,OAAQ,CAC5B,MAAMoR,EAAOzP,EAAMwP,GAEnB,OADAJ,EAAKM,eAAiBD,EAAK,GACpBzB,EAAQY,QACba,EAAK,GAAGE,aACRC,EACAC,EAHK7B,CAILxM,EACH,CAGD,OAAOqO,EAAmBrO,EAC3B,CAGD,SAASoO,EAAiBpO,GAMxB,GALAgO,IAKIJ,EAAKM,eAAeI,WAAY,CAClCV,EAAKM,eAAeI,gBAAalQ,EAC7ByP,GACFU,IAKF,MAAMC,EAAmBZ,EAAKa,OAAO5R,OACrC,IAEIU,EAFAmR,EAAkBF,EAKtB,KAAOE,KACL,GACsC,SAApCd,EAAKa,OAAOC,GAAiB,IACY,cAAzCd,EAAKa,OAAOC,GAAiB,GAAG7E,KAChC,CACAtM,EAAQqQ,EAAKa,OAAOC,GAAiB,GAAG9Q,IACxC,KACD,CAEH+Q,EAAeX,GAGf,IAAIpR,EAAQ4R,EACZ,KAAO5R,EAAQgR,EAAKa,OAAO5R,QACzB+Q,EAAKa,OAAO7R,GAAO,GAAGgB,IAAMyF,OAAO4E,OAAO,CAAE,EAAE1K,GAC9CX,IAaF,OATA4N,EACEoD,EAAKa,OACLC,EAAkB,EAClB,EACAd,EAAKa,OAAO1R,MAAMyR,IAIpBZ,EAAKa,OAAO5R,OAASD,EACdyR,EAAmBrO,EAC3B,CACD,OAAOrC,EAAMqC,EACd,CAGD,SAASqO,EAAmBrO,GAM1B,GAAIgO,IAAcxP,EAAM3B,OAAQ,CAI9B,IAAKgR,EACH,OAAOe,EAAkB5O,GAM3B,GAAI6N,EAAUgB,kBAAoBhB,EAAUgB,iBAAiBC,SAC3D,OAAOC,EAAU/O,GAQnB4N,EAAKoB,UAAYjF,QACf8D,EAAUgB,mBAAqBhB,EAAUoB,8BAE5C,CAID,OADArB,EAAKM,eAAiB,CAAE,EACjB1B,EAAQ0C,MACbC,GACAC,EACAC,EAHK7C,CAILxM,EACH,CAGD,SAASoP,EAAqBpP,GAG5B,OAFI6N,GAAWU,IACfI,EAAeX,GACRY,EAAkB5O,EAC1B,CAGD,SAASqP,EAAsBrP,GAG7B,OAFA4N,EAAKP,OAAOiC,KAAK1B,EAAK2B,MAAM/R,MAAQwQ,IAAcxP,EAAM3B,OACxDkR,EAAkBH,EAAK2B,MAAMC,OACtBT,EAAU/O,EAClB,CAGD,SAAS4O,EAAkB5O,GAGzB,OADA4N,EAAKM,eAAiB,CAAE,EACjB1B,EAAQY,QACb+B,GACAM,EACAV,EAHKvC,CAILxM,EACH,CAGD,SAASyP,EAAkBzP,GAIzB,OAHAgO,IACAxP,EAAMmE,KAAK,CAACiL,EAAKiB,iBAAkBjB,EAAKM,iBAEjCU,EAAkB5O,EAC1B,CAGD,SAAS+O,EAAU/O,GACjB,OAAa,OAATA,GACE6N,GAAWU,IACfI,EAAe,QACfnC,EAAQO,QAAQ/M,KAGlB6N,EAAYA,GAAaD,EAAKP,OAAOqC,KAAK9B,EAAK2B,OAC/C/C,EAAQK,MAAM,YAAa,CACzBa,YAAa,OACbF,SAAUM,EACV6B,WAAY9B,IAEP+B,EAAa5P,GACrB,CAGD,SAAS4P,EAAa5P,GACpB,OAAa,OAATA,GACF6P,EAAarD,EAAQQ,KAAK,cAAc,GACxC2B,EAAe,QACfnC,EAAQO,QAAQ/M,IAGd+L,GAAmB/L,IACrBwM,EAAQO,QAAQ/M,GAChB6P,EAAarD,EAAQQ,KAAK,cAE1BgB,EAAY,EACZJ,EAAKoB,eAAY5Q,EACVT,IAET6O,EAAQO,QAAQ/M,GACT4P,EACR,CAOD,SAASC,EAAapC,EAAOqC,GAC3B,MAAMC,EAASnC,EAAKoC,YAAYvC,GAyChC,GAxCIqC,GAAKC,EAAOpN,KAAK,MACrB8K,EAAMD,SAAWM,EACbA,IAAYA,EAAWhI,KAAO2H,GAClCK,EAAaL,EACbI,EAAUoC,WAAWxC,EAAM9P,OAC3BkQ,EAAUqC,MAAMH,GAmCZnC,EAAKP,OAAOiC,KAAK7B,EAAM9P,MAAMH,MAAO,CACtC,IAAIZ,EAAQiR,EAAUY,OAAO5R,OAC7B,KAAOD,KACL,GAEEiR,EAAUY,OAAO7R,GAAO,GAAGe,MAAM6R,OAASzB,KAExCF,EAAUY,OAAO7R,GAAO,GAAGgB,KAE3BiQ,EAAUY,OAAO7R,GAAO,GAAGgB,IAAI4R,OAASzB,GAI1C,OAMJ,MAAMS,EAAmBZ,EAAKa,OAAO5R,OACrC,IAEIsT,EAEA5S,EAJAmR,EAAkBF,EAOtB,KAAOE,KACL,GACsC,SAApCd,EAAKa,OAAOC,GAAiB,IACY,cAAzCd,EAAKa,OAAOC,GAAiB,GAAG7E,KAChC,CACA,GAAIsG,EAAM,CACR5S,EAAQqQ,EAAKa,OAAOC,GAAiB,GAAG9Q,IACxC,KACD,CACDuS,GAAO,CACR,CAMH,IAJAxB,EAAeX,GAGfpR,EAAQ4R,EACD5R,EAAQgR,EAAKa,OAAO5R,QACzB+Q,EAAKa,OAAO7R,GAAO,GAAGgB,IAAMyF,OAAO4E,OAAO,CAAE,EAAE1K,GAC9CX,IAIF4N,EACEoD,EAAKa,OACLC,EAAkB,EAClB,EACAd,EAAKa,OAAO1R,MAAMyR,IAIpBZ,EAAKa,OAAO5R,OAASD,CACtB,CACF,CAMD,SAAS+R,EAAe/B,GACtB,IAAIhQ,EAAQ4B,EAAM3B,OAGlB,KAAOD,KAAUgQ,GAAM,CACrB,MAAMvE,EAAQ7J,EAAM5B,GACpBgR,EAAKM,eAAiB7F,EAAM,GAC5BA,EAAM,GAAG2E,KAAKlJ,KAAK8J,EAAMpB,EAC1B,CACDhO,EAAM3B,OAAS+P,CAChB,CACD,SAAS2B,IACPV,EAAUqC,MAAM,CAAC,OACjBpC,OAAa1P,EACbyP,OAAYzP,EACZwP,EAAKM,eAAeI,gBAAalQ,CAClC,CACH,GArVM+Q,GAAqB,CACzBjC,SA0VF,SAA2BV,EAASC,EAAI2D,GAGtC,OAAO7D,GACLC,EACAA,EAAQY,QAAQ/O,KAAKgP,OAAOjC,WAAWuC,SAAUlB,EAAI2D,GACrD,aACA/R,KAAKgP,OAAOjC,WAAWiF,QAAQC,KAAK7N,SAAS,qBAAkBrE,EAAY,EAE/E,GCtWO,SAASmS,GAAkBvQ,GAChC,OACW,OAATA,GACAgM,GAA0BhM,IAC1BmM,GAAkBnM,GAEX,EAELkM,GAAmBlM,GACd,OADT,CAGF,CChBO,SAASwQ,GAAWpF,EAAYqD,EAAQgC,GAE7C,MAAMvK,EAAS,GACf,IAAItJ,GAAS,EAEb,OAASA,EAAQwO,EAAWvO,QAAQ,CAClC,MAAMsM,EAAUiC,EAAWxO,GAAO4T,WAE9BrH,IAAYjD,EAAOzD,SAAS0G,KAC9BsF,EAAStF,EAAQsF,EAAQgC,GACzBvK,EAAOvD,KAAKwG,GAEf,CAED,OAAOsF,CACT,CCjBO,MAAMiC,GAAY,CACvBpS,KAAM,YACN4O,SA4KF,SAA2BV,EAASC,GAClC,MAAMkE,EAAmBtS,KAAKgP,OAAOjC,WAAWuF,iBAAiBL,KAC3D9C,EAAWnP,KAAKmP,SAChBlC,EAASiF,GAAkB/C,GAGjC,IAAIoD,EACJ,OAYA,SAAe5Q,GAGb,OAFA4Q,EAAS5Q,EACTwM,EAAQK,MAAM,qBACPgE,EAAO7Q,EACf,EAYD,SAAS6Q,EAAO7Q,GACd,GAAIA,IAAS4Q,EAEX,OADApE,EAAQO,QAAQ/M,GACT6Q,EAET,MAAMpD,EAAQjB,EAAQQ,KAAK,qBAGrB8D,EAAQP,GAAkBvQ,GAI1B+Q,GACHD,GAAoB,IAAVA,GAAexF,GAAWqF,EAAiBlO,SAASzC,GAC3DgR,GACH1F,GAAsB,IAAXA,GAAgBwF,GAAUH,EAAiBlO,SAAS+K,GAGlE,OAFAC,EAAMwD,MAAQlH,QAAmB,KAAX6G,EAAgBG,EAAOA,IAASzF,IAAW0F,IACjEvD,EAAMyD,OAASnH,QAAmB,KAAX6G,EAAgBI,EAAQA,IAAUF,IAAUC,IAC5DtE,EAAGzM,EACX,CACH,EAlOEwQ,WAQF,SAA6B/B,EAAQgC,GACnC,IAEIM,EAEAI,EAEAC,EAEAC,EAEAC,EAEA5K,EAEA6K,EAEA/B,EAhBA5S,GAAS,EAsBb,OAASA,EAAQ6R,EAAO5R,QAEtB,GACuB,UAArB4R,EAAO7R,GAAO,IACY,sBAA1B6R,EAAO7R,GAAO,GAAGiN,MACjB4E,EAAO7R,GAAO,GAAGsU,OAKjB,IAHAH,EAAOnU,EAGAmU,KAEL,GACsB,SAApBtC,EAAOsC,GAAM,IACY,sBAAzBtC,EAAOsC,GAAM,GAAGlH,MAChB4E,EAAOsC,GAAM,GAAGE,OAEhBR,EAAQe,eAAe/C,EAAOsC,GAAM,IAAIxR,WAAW,KACjDkR,EAAQe,eAAe/C,EAAO7R,GAAO,IAAI2C,WAAW,GACtD,CAKA,IACGkP,EAAOsC,GAAM,GAAGG,QAAUzC,EAAO7R,GAAO,GAAGqU,SAC3CxC,EAAO7R,GAAO,GAAGgB,IAAI4R,OAASf,EAAO7R,GAAO,GAAGe,MAAM6R,QAAU,MAE7Df,EAAOsC,GAAM,GAAGnT,IAAI4R,OACnBf,EAAOsC,GAAM,GAAGpT,MAAM6R,OACtBf,EAAO7R,GAAO,GAAGgB,IAAI4R,OACrBf,EAAO7R,GAAO,GAAGe,MAAM6R,QACzB,GAGF,SAIF9I,EACE+H,EAAOsC,GAAM,GAAGnT,IAAI4R,OAASf,EAAOsC,GAAM,GAAGpT,MAAM6R,OAAS,GAC5Df,EAAO7R,GAAO,GAAGgB,IAAI4R,OAASf,EAAO7R,GAAO,GAAGe,MAAM6R,OAAS,EAC1D,EACA,EACN,MAAM7R,EAAQ0F,OAAO4E,OAAO,CAAE,EAAEwG,EAAOsC,GAAM,GAAGnT,KAC1CA,EAAMyF,OAAO4E,OAAO,CAAE,EAAEwG,EAAO7R,GAAO,GAAGe,OAC/C8T,GAAU9T,GAAQ+I,GAClB+K,GAAU7T,EAAK8I,GACf2K,EAAkB,CAChBxH,KAAMnD,EAAM,EAAI,iBAAmB,mBACnC/I,QACAC,IAAKyF,OAAO4E,OAAO,CAAE,EAAEwG,EAAOsC,GAAM,GAAGnT,MAEzC0T,EAAkB,CAChBzH,KAAMnD,EAAM,EAAI,iBAAmB,mBACnC/I,MAAO0F,OAAO4E,OAAO,CAAE,EAAEwG,EAAO7R,GAAO,GAAGe,OAC1CC,OAEFwT,EAAO,CACLvH,KAAMnD,EAAM,EAAI,aAAe,eAC/B/I,MAAO0F,OAAO4E,OAAO,CAAE,EAAEwG,EAAOsC,GAAM,GAAGnT,KACzCA,IAAKyF,OAAO4E,OAAO,CAAE,EAAEwG,EAAO7R,GAAO,GAAGe,QAE1CwT,EAAQ,CACNtH,KAAMnD,EAAM,EAAI,SAAW,WAC3B/I,MAAO0F,OAAO4E,OAAO,CAAA,EAAIoJ,EAAgB1T,OACzCC,IAAKyF,OAAO4E,OAAO,CAAA,EAAIqJ,EAAgB1T,MAEzC6Q,EAAOsC,GAAM,GAAGnT,IAAMyF,OAAO4E,OAAO,CAAA,EAAIoJ,EAAgB1T,OACxD8Q,EAAO7R,GAAO,GAAGe,MAAQ0F,OAAO4E,OAAO,CAAA,EAAIqJ,EAAgB1T,KAC3D2T,EAAa,GAGT9C,EAAOsC,GAAM,GAAGnT,IAAI4R,OAASf,EAAOsC,GAAM,GAAGpT,MAAM6R,SACrD+B,EAAa5O,EAAK4O,EAAY,CAC5B,CAAC,QAAS9C,EAAOsC,GAAM,GAAIN,GAC3B,CAAC,OAAQhC,EAAOsC,GAAM,GAAIN,MAK9Bc,EAAa5O,EAAK4O,EAAY,CAC5B,CAAC,QAASJ,EAAOV,GACjB,CAAC,QAASY,EAAiBZ,GAC3B,CAAC,OAAQY,EAAiBZ,GAC1B,CAAC,QAASW,EAAMX,KAMlBc,EAAa5O,EACX4O,EACAf,GACEC,EAAQpD,OAAOjC,WAAWsG,WAAWpB,KACrC7B,EAAO1R,MAAMgU,EAAO,EAAGnU,GACvB6T,IAKJc,EAAa5O,EAAK4O,EAAY,CAC5B,CAAC,OAAQH,EAAMX,GACf,CAAC,QAASa,EAAiBb,GAC3B,CAAC,OAAQa,EAAiBb,GAC1B,CAAC,OAAQU,EAAOV,KAIdhC,EAAO7R,GAAO,GAAGgB,IAAI4R,OAASf,EAAO7R,GAAO,GAAGe,MAAM6R,QACvDA,EAAS,EACT+B,EAAa5O,EAAK4O,EAAY,CAC5B,CAAC,QAAS9C,EAAO7R,GAAO,GAAI6T,GAC5B,CAAC,OAAQhC,EAAO7R,GAAO,GAAI6T,MAG7BjB,EAAS,EAEXhF,EAAOiE,EAAQsC,EAAO,EAAGnU,EAAQmU,EAAO,EAAGQ,GAC3C3U,EAAQmU,EAAOQ,EAAW1U,OAAS2S,EAAS,EAC5C,KACD,CAMP5S,GAAS,EACT,OAASA,EAAQ6R,EAAO5R,QACQ,sBAA1B4R,EAAO7R,GAAO,GAAGiN,OACnB4E,EAAO7R,GAAO,GAAGiN,KAAO,QAG5B,OAAO4E,CACT,GAyEA,SAASgD,GAAUlU,EAAOiS,GACxBjS,EAAME,QAAU+R,EAChBjS,EAAMiS,QAAUA,EAChBjS,EAAMoU,cAAgBnC,CACxB,CCvPO,MAAMoC,GAAW,CACtBtT,KAAM,WACN4O,SAOF,SAA0BV,EAASC,EAAI2D,GACrC,IAAIxD,EAAO,EACX,OAcA,SAAe5M,GAMb,OALAwM,EAAQK,MAAM,YACdL,EAAQK,MAAM,kBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,kBACbR,EAAQK,MAAM,oBACPkE,CACR,EAcD,SAASA,EAAK/Q,GACZ,OAAIuL,EAAWvL,IACbwM,EAAQO,QAAQ/M,GACT6R,GAEFC,EAAW9R,EACnB,CAcD,SAAS6R,EAAmB7R,GAE1B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAeyL,EAAkBzL,IAEjE4M,EAAO,EACAmF,EAAyB/R,IAE3B8R,EAAW9R,EACnB,CAcD,SAAS+R,EAAyB/R,GAChC,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GAChB4M,EAAO,EACAoF,IAKG,KAAThS,GAAwB,KAATA,GAAwB,KAATA,GAAeyL,EAAkBzL,KAChE4M,IAAS,IAETJ,EAAQO,QAAQ/M,GACT+R,IAETnF,EAAO,EACAkF,EAAW9R,GACnB,CAYD,SAASgS,EAAUhS,GACjB,OAAa,KAATA,GACFwM,EAAQQ,KAAK,oBACbR,EAAQK,MAAM,kBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,kBACbR,EAAQQ,KAAK,YACNP,GAII,OAATzM,GAA0B,KAATA,GAAwB,KAATA,GAAe2L,GAAa3L,GACvDoQ,EAAIpQ,IAEbwM,EAAQO,QAAQ/M,GACTgS,EACR,CAYD,SAASF,EAAW9R,GAClB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTiS,GAELvG,EAAW1L,IACbwM,EAAQO,QAAQ/M,GACT8R,GAEF1B,EAAIpQ,EACZ,CAYD,SAASiS,EAAiBjS,GACxB,OAAOyL,EAAkBzL,GAAQkS,EAAWlS,GAAQoQ,EAAIpQ,EACzD,CAYD,SAASkS,EAAWlS,GAClB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GAChB4M,EAAO,EACAqF,GAEI,KAATjS,GAEFwM,EAAQQ,KAAK,oBAAoBnD,KAAO,gBACxC2C,EAAQK,MAAM,kBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,kBACbR,EAAQQ,KAAK,YACNP,GAEF0F,EAAWnS,EACnB,CAcD,SAASmS,EAAWnS,GAElB,IAAc,KAATA,GAAeyL,EAAkBzL,KAAU4M,IAAS,GAAI,CAC3D,MAAM9G,EAAgB,KAAT9F,EAAcmS,EAAaD,EAExC,OADA1F,EAAQO,QAAQ/M,GACT8F,CACR,CACD,OAAOsK,EAAIpQ,EACZ,CACH,GChOO,MAAMoS,GAAY,CACvBlF,SAQF,SAA2BV,EAASC,EAAI2D,GACtC,OAgBA,SAAepQ,GACb,OAAOiM,GAAcjM,GACjBuM,GAAaC,EAASsE,EAAO,aAA7BvE,CAA2CvM,GAC3C8Q,EAAM9Q,EACX,EAgBD,SAAS8Q,EAAM9Q,GACb,OAAgB,OAATA,GAAiB+L,GAAmB/L,GAAQyM,EAAGzM,GAAQoQ,EAAIpQ,EACnE,CACH,EA/CEqS,SAAS,GCDJ,MAAMC,GAAa,CACxBhU,KAAM,aACN4O,SAWF,SAAiCV,EAASC,EAAI2D,GAC5C,MAAMxC,EAAOvP,KACb,OAYA,SAAe2B,GACb,GAAa,KAATA,EAAa,CACf,MAAMuS,EAAQ3E,EAAKM,eAWnB,OAVKqE,EAAMxB,OACTvE,EAAQK,MAAM,aAAc,CAC1B2F,YAAY,IAEdD,EAAMxB,MAAO,GAEfvE,EAAQK,MAAM,oBACdL,EAAQK,MAAM,oBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,oBACN8D,CACR,CACD,OAAOV,EAAIpQ,EACZ,EAYD,SAAS8Q,EAAM9Q,GACb,OAAIiM,GAAcjM,IAChBwM,EAAQK,MAAM,8BACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,8BACbR,EAAQQ,KAAK,oBACNP,IAETD,EAAQQ,KAAK,oBACNP,EAAGzM,GACX,CACH,EA/DEmO,aAAc,CACZjB,SA4EJ,SAAwCV,EAASC,EAAI2D,GACnD,MAAMxC,EAAOvP,KACb,OAeA,SAAmB2B,GACjB,GAAIiM,GAAcjM,GAGhB,OAAOuM,GACLC,EACAiG,EACA,aACA7E,EAAKP,OAAOjC,WAAWiF,QAAQC,KAAK7N,SAAS,qBACzCrE,EACA,EANCmO,CAOLvM,GAEJ,OAAOyS,EAAWzS,EACnB,EAeD,SAASyS,EAAWzS,GAClB,OAAOwM,EAAQY,QAAQkF,GAAY7F,EAAI2D,EAAhC5D,CAAqCxM,EAC7C,CACH,GA3HEgN,KA8HF,SAAcR,GACZA,EAAQQ,KAAK,aACf,GCxIO,MAAM0F,GAAkB,CAC7BpU,KAAM,kBACN4O,SAOF,SAAiCV,EAASC,EAAI2D,GAC5C,OAYA,SAAepQ,GAKb,OAJAwM,EAAQK,MAAM,mBACdL,EAAQK,MAAM,gBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,gBACN6D,CACR,EAYD,SAASA,EAAO7Q,GAEd,OAAI8L,GAAiB9L,IACnBwM,EAAQK,MAAM,wBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,wBACbR,EAAQQ,KAAK,mBACNP,GAEF2D,EAAIpQ,EACZ,CACH,GCxDA,MAAM2S,GAAUhF,SAASiF,cAAc,KAMhC,SAASC,GAA8BxV,GAC5C,MAAMyV,EAAqB,IAAMzV,EAAQ,IACzCsV,GAAQI,UAAYD,EACpB,MAAME,EAAYL,GAAQM,YAQ1B,OAGiD,KAA/CD,EAAUzT,WAAWyT,EAAUnW,OAAS,IAC9B,SAAVQ,KASK2V,IAAcF,GAA6BE,EACpD,CCpBO,MAAMF,GAAqB,CAChCxU,KAAM,qBACN4O,SAOF,SAAoCV,EAASC,EAAI2D,GAC/C,MAAMxC,EAAOvP,KACb,IAEIqO,EAEAL,EAJAO,EAAO,EAKX,OAgBA,SAAe5M,GAKb,OAJAwM,EAAQK,MAAM,sBACdL,EAAQK,MAAM,4BACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,4BACN+D,CACR,EAiBD,SAASA,EAAK/Q,GACZ,OAAa,KAATA,GACFwM,EAAQK,MAAM,mCACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,mCACNkG,IAET1G,EAAQK,MAAM,2BACdH,EAAM,GACNL,EAAOZ,EACApO,EAAM2C,GACd,CAcD,SAASkT,EAAQlT,GACf,OAAa,KAATA,GAAwB,MAATA,GACjBwM,EAAQK,MAAM,uCACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,uCACbR,EAAQK,MAAM,2BACdH,EAAM,EACNL,EAAOR,GACAxO,IAETmP,EAAQK,MAAM,2BACdH,EAAM,EACNL,EAAOT,GACAvO,EAAM2C,GACd,CAmBD,SAAS3C,EAAM2C,GACb,GAAa,KAATA,GAAe4M,EAAM,CACvB,MAAMa,EAAQjB,EAAQQ,KAAK,2BAC3B,OACEX,IAASZ,GACRoH,GAA8BjF,EAAK4D,eAAe/D,KAOrDjB,EAAQK,MAAM,4BACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,4BACbR,EAAQQ,KAAK,sBACNP,GATE2D,EAAIpQ,EAUd,CACD,OAAIqM,EAAKrM,IAAS4M,IAASF,GACzBF,EAAQO,QAAQ/M,GACT3C,GAEF+S,EAAIpQ,EACZ,CACH,GC7IA,MAAMmT,GAAsB,CAC1BjG,SAwbF,SAAqCV,EAASC,EAAI2D,GAChD,MAAMxC,EAAOvP,KACb,OAOA,SAAe2B,GACb,GAAa,OAATA,EACF,OAAOoQ,EAAIpQ,GAKb,OAHAwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNO,CACR,EAOD,SAASA,EAAUvN,GACjB,OAAO4N,EAAKP,OAAOiC,KAAK1B,EAAK2B,MAAM/R,MAAQ4S,EAAIpQ,GAAQyM,EAAGzM,EAC3D,CACH,EAldEqS,SAAS,GAIEe,GAAa,CACxB9U,KAAM,aACN4O,SAQF,SAA4BV,EAASC,EAAI2D,GACvC,MAAMxC,EAAOvP,KAEPgV,EAAa,CACjBnG,SA+SF,SAA4BV,EAASC,EAAI2D,GACvC,IAAIxD,EAAO,EACX,OAAO0G,EAOP,SAASA,EAAYtT,GAInB,OAHAwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNrP,CACR,CAcD,SAASA,EAAMqC,GAKb,OADAwM,EAAQK,MAAM,mBACPZ,GAAcjM,GACjBuM,GACEC,EACA+G,EACA,aACA3F,EAAKP,OAAOjC,WAAWiF,QAAQC,KAAK7N,SAAS,qBACzCrE,EACA,EANNmO,CAOEvM,GACFuT,EAAoBvT,EACzB,CAcD,SAASuT,EAAoBvT,GAC3B,OAAIA,IAAS4Q,GACXpE,EAAQK,MAAM,2BACP2G,EAAcxT,IAEhBoQ,EAAIpQ,EACZ,CAcD,SAASwT,EAAcxT,GACrB,OAAIA,IAAS4Q,GACXhE,IACAJ,EAAQO,QAAQ/M,GACTwT,GAEL5G,GAAQ6G,GACVjH,EAAQQ,KAAK,2BACNf,GAAcjM,GACjBuM,GAAaC,EAASkH,EAAoB,aAA1CnH,CAAwDvM,GACxD0T,EAAmB1T,IAElBoQ,EAAIpQ,EACZ,CAcD,SAAS0T,EAAmB1T,GAC1B,OAAa,OAATA,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,mBACNP,EAAGzM,IAELoQ,EAAIpQ,EACZ,CACF,EA7ZCqS,SAAS,GAEX,IAGIzB,EAHA+C,EAAgB,EAChBF,EAAW,EAGf,OAcA,SAAezT,GAEb,OAeF,SAA4BA,GAC1B,MAAM4T,EAAOhG,EAAKa,OAAOb,EAAKa,OAAO5R,OAAS,GAS9C,OARA8W,EACEC,GAAyB,eAAjBA,EAAK,GAAG/J,KACZ+J,EAAK,GAAGpC,eAAeoC,EAAK,IAAI,GAAM/W,OACtC,EACN+T,EAAS5Q,EACTwM,EAAQK,MAAM,cACdL,EAAQK,MAAM,mBACdL,EAAQK,MAAM,2BACPgH,EAAa7T,EACrB,CA1BQ8T,CAAmB9T,EAC3B,EAuCD,SAAS6T,EAAa7T,GACpB,OAAIA,IAAS4Q,GACX6C,IACAjH,EAAQO,QAAQ/M,GACT6T,GAELJ,EAAW,EACNrD,EAAIpQ,IAEbwM,EAAQQ,KAAK,2BACNf,GAAcjM,GACjBuM,GAAaC,EAASuH,EAAY,aAAlCxH,CAAgDvM,GAChD+T,EAAW/T,GAChB,CAcD,SAAS+T,EAAW/T,GAClB,OAAa,OAATA,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,mBACNY,EAAKoB,UACRvC,EAAGzM,GACHwM,EAAQ0C,MAAMiE,GAAqBa,EAAgBlD,EAAnDtE,CAA0DxM,KAEhEwM,EAAQK,MAAM,uBACdL,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAER1K,EAAKhD,GACb,CAcD,SAASgD,EAAKhD,GACZ,OAAa,OAATA,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,uBACN+G,EAAW/T,IAEhBiM,GAAcjM,IAChBwM,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,uBACNT,GAAaC,EAASyH,EAAY,aAAlC1H,CAAgDvM,IAE5C,KAATA,GAAeA,IAAS4Q,EACnBR,EAAIpQ,IAEbwM,EAAQO,QAAQ/M,GACTgD,EACR,CAcD,SAASiR,EAAWjU,GAClB,OAAa,OAATA,GAAiB+L,GAAmB/L,GAC/B+T,EAAW/T,IAEpBwM,EAAQK,MAAM,uBACdL,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAERwG,EAAKlU,GACb,CAcD,SAASkU,EAAKlU,GACZ,OAAa,OAATA,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,uBACN+G,EAAW/T,IAEP,KAATA,GAAeA,IAAS4Q,EACnBR,EAAIpQ,IAEbwM,EAAQO,QAAQ/M,GACTkU,EACR,CAeD,SAASF,EAAehU,GACtB,OAAOwM,EAAQY,QAAQiG,EAAYvC,EAAOqD,EAAnC3H,CAAkDxM,EAC1D,CAcD,SAASmU,EAAcnU,GAIrB,OAHAwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNG,CACR,CAcD,SAASA,EAAanN,GACpB,OAAO2T,EAAgB,GAAK1H,GAAcjM,GACtCuM,GACEC,EACA4H,EACA,aACAT,EAAgB,EAJlBpH,CAKEvM,GACFoU,EAAmBpU,EACxB,CAcD,SAASoU,EAAmBpU,GAC1B,OAAa,OAATA,GAAiB+L,GAAmB/L,GAC/BwM,EAAQ0C,MAAMiE,GAAqBa,EAAgBlD,EAAnDtE,CAA0DxM,IAEnEwM,EAAQK,MAAM,iBACPwH,EAAarU,GACrB,CAcD,SAASqU,EAAarU,GACpB,OAAa,OAATA,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,iBACNoH,EAAmBpU,KAE5BwM,EAAQO,QAAQ/M,GACTqU,EACR,CAcD,SAASvD,EAAM9Q,GAEb,OADAwM,EAAQQ,KAAK,cACNP,EAAGzM,EACX,CAsHH,EA1aE8O,UAAU,GCVL,MAAMwF,GAAe,CAC1BhW,KAAM,eACN4O,SAaF,SAA8BV,EAASC,EAAI2D,GACzC,MAAMxC,EAAOvP,KACb,OAgBA,SAAe2B,GAMb,OAHAwM,EAAQK,MAAM,gBAGPN,GAAaC,EAAS+H,EAAa,aAAc,EAAjDhI,CAAwDvM,EAChE,EAYD,SAASuU,EAAYvU,GACnB,MAAM4T,EAAOhG,EAAKa,OAAOb,EAAKa,OAAO5R,OAAS,GAC9C,OAAO+W,GACY,eAAjBA,EAAK,GAAG/J,MACR+J,EAAK,GAAGpC,eAAeoC,EAAK,IAAI,GAAM/W,QAAU,EAC9C2X,EAAQxU,GACRoQ,EAAIpQ,EACT,CAYD,SAASwU,EAAQxU,GACf,OAAa,OAATA,EACK8Q,EAAM9Q,GAEX+L,GAAmB/L,GACdwM,EAAQY,QAAQqH,GAAcD,EAAS1D,EAAvCtE,CAA8CxM,IAEvDwM,EAAQK,MAAM,iBACPgE,EAAO7Q,GACf,CAYD,SAAS6Q,EAAO7Q,GACd,OAAa,OAATA,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,iBACNwH,EAAQxU,KAEjBwM,EAAQO,QAAQ/M,GACT6Q,EACR,CAGD,SAASC,EAAM9Q,GAKb,OAJAwM,EAAQQ,KAAK,gBAINP,EAAGzM,EACX,CACH,GAvGMyU,GAAe,CACnBvH,SA4GF,SAA8BV,EAASC,EAAI2D,GACzC,MAAMxC,EAAOvP,KACb,OAAOoW,EAaP,SAASA,EAAazU,GAGpB,OAAI4N,EAAKP,OAAOiC,KAAK1B,EAAK2B,MAAM/R,MACvB4S,EAAIpQ,GAET+L,GAAmB/L,IACrBwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNyH,GASFlI,GAAaC,EAAS+H,EAAa,aAAc,EAAjDhI,CAAwDvM,EAChE,CAYD,SAASuU,EAAYvU,GACnB,MAAM4T,EAAOhG,EAAKa,OAAOb,EAAKa,OAAO5R,OAAS,GAC9C,OAAO+W,GACY,eAAjBA,EAAK,GAAG/J,MACR+J,EAAK,GAAGpC,eAAeoC,EAAK,IAAI,GAAM/W,QAAU,EAC9C4P,EAAGzM,GACH+L,GAAmB/L,GACnByU,EAAazU,GACboQ,EAAIpQ,EACT,CACH,EApKEqS,SAAS,GCNJ,MAAMqC,GAAW,CACtBpW,KAAM,WACN4O,SA8EF,SAA0BV,EAASC,EAAI2D,GAErC,IAEIxD,EAEAa,EAJAgG,EAAW,EAKf,OAcA,SAAezT,GAGb,OAFAwM,EAAQK,MAAM,YACdL,EAAQK,MAAM,oBACPgH,EAAa7T,EACrB,EAYD,SAAS6T,EAAa7T,GACpB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GAChByT,IACOI,IAETrH,EAAQQ,KAAK,oBACN2H,EAAQ3U,GAChB,CAYD,SAAS2U,EAAQ3U,GAEf,OAAa,OAATA,EACKoQ,EAAIpQ,GAMA,KAATA,GACFwM,EAAQK,MAAM,SACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,SACN2H,GAII,KAAT3U,GACFyN,EAAQjB,EAAQK,MAAM,oBACtBD,EAAO,EACA4G,EAAcxT,IAEnB+L,GAAmB/L,IACrBwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACN2H,IAITnI,EAAQK,MAAM,gBACP1K,EAAKnC,GACb,CAYD,SAASmC,EAAKnC,GACZ,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACA+L,GAAmB/L,IAEnBwM,EAAQQ,KAAK,gBACN2H,EAAQ3U,KAEjBwM,EAAQO,QAAQ/M,GACTmC,EACR,CAYD,SAASqR,EAAcxT,GAErB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GAChB4M,IACO4G,GAIL5G,IAAS6G,GACXjH,EAAQQ,KAAK,oBACbR,EAAQQ,KAAK,YACNP,EAAGzM,KAIZyN,EAAM5D,KAAO,eACN1H,EAAKnC,GACb,CACH,EA7NEmJ,QAMF,SAAyBsF,GACvB,IAGI7R,EAEAiQ,EALA+H,EAAgBnG,EAAO5R,OAAS,EAChCgY,EAAiB,EAOrB,KACsC,eAAnCpG,EAAOoG,GAAgB,GAAGhL,MACU,UAAnC4E,EAAOoG,GAAgB,GAAGhL,MACO,eAAlC4E,EAAOmG,GAAe,GAAG/K,MACU,UAAlC4E,EAAOmG,GAAe,GAAG/K,MAK3B,IAHAjN,EAAQiY,IAGCjY,EAAQgY,GACf,GAA8B,iBAA1BnG,EAAO7R,GAAO,GAAGiN,KAAyB,CAE5C4E,EAAOoG,GAAgB,GAAGhL,KAAO,kBACjC4E,EAAOmG,GAAe,GAAG/K,KAAO,kBAChCgL,GAAkB,EAClBD,GAAiB,EACjB,KACD,CAKLhY,EAAQiY,EAAiB,EACzBD,IACA,OAAShY,GAASgY,QACFxW,IAAVyO,EACEjQ,IAAUgY,GAA2C,eAA1BnG,EAAO7R,GAAO,GAAGiN,OAC9CgD,EAAQjQ,GAGVA,IAAUgY,GACgB,eAA1BnG,EAAO7R,GAAO,GAAGiN,OAEjB4E,EAAO5B,GAAO,GAAGhD,KAAO,eACpBjN,IAAUiQ,EAAQ,IACpB4B,EAAO5B,GAAO,GAAGjP,IAAM6Q,EAAO7R,EAAQ,GAAG,GAAGgB,IAC5C6Q,EAAOjE,OAAOqC,EAAQ,EAAGjQ,EAAQiQ,EAAQ,GACzC+H,GAAiBhY,EAAQiQ,EAAQ,EACjCjQ,EAAQiQ,EAAQ,GAElBA,OAAQzO,GAGZ,OAAOqQ,CACT,EA1DEjB,SAgEF,SAAkBxN,GAEhB,OACW,KAATA,GACgD,oBAAhD3B,KAAKoQ,OAAOpQ,KAAKoQ,OAAO5R,OAAS,GAAG,GAAGgN,IAE3C,GCvEO,SAASiL,GAAYrG,GAE1B,MAAMsG,EAAQ,CAAE,EAChB,IAEIC,EAEAC,EAEAC,EAEAC,EAEA/O,EAEAgP,EAEAC,EAdAzY,GAAS,EAeb,OAASA,EAAQ6R,EAAO5R,QAAQ,CAC9B,KAAOD,KAASmY,GACdnY,EAAQmY,EAAMnY,GAMhB,GAJAoY,EAAQvG,EAAO7R,GAKbA,GACkB,cAAlBoY,EAAM,GAAGnL,MACqB,mBAA9B4E,EAAO7R,EAAQ,GAAG,GAAGiN,OAErBuL,EAAYJ,EAAM,GAAGrF,WAAWlB,OAChCyG,EAAa,EAEXA,EAAaE,EAAUvY,QACW,oBAAlCuY,EAAUF,GAAY,GAAGrL,OAEzBqL,GAAc,GAGdA,EAAaE,EAAUvY,QACW,YAAlCuY,EAAUF,GAAY,GAAGrL,MAEzB,OAASqL,EAAaE,EAAUvY,QACQ,YAAlCuY,EAAUF,GAAY,GAAGrL,MAGS,cAAlCuL,EAAUF,GAAY,GAAGrL,OAC3BuL,EAAUF,GAAY,GAAGI,6BAA8B,EACvDJ,KAOR,GAAiB,UAAbF,EAAM,GACJA,EAAM,GAAGtH,cACXrK,OAAO4E,OAAO8M,EAAOQ,GAAW9G,EAAQ7R,IACxCA,EAAQmY,EAAMnY,GACdyY,GAAO,QAIN,GAAIL,EAAM,GAAGxC,WAAY,CAG5B,IAFA0C,EAAatY,EACbqY,OAAY7W,EACL8W,MACLC,EAAa1G,EAAOyG,GAEK,eAAvBC,EAAW,GAAGtL,MACS,oBAAvBsL,EAAW,GAAGtL,OAEQ,UAAlBsL,EAAW,KACTF,IACFxG,EAAOwG,GAAW,GAAGpL,KAAO,mBAE9BsL,EAAW,GAAGtL,KAAO,aACrBoL,EAAYC,GAMdD,IAEFD,EAAM,GAAGpX,IAAMyF,OAAO4E,OAAO,GAAIwG,EAAOwG,GAAW,GAAGtX,OAGtDyI,EAAaqI,EAAO1R,MAAMkY,EAAWrY,GACrCwJ,EAAW0E,QAAQkK,GACnBxK,EAAOiE,EAAQwG,EAAWrY,EAAQqY,EAAY,EAAG7O,GAEpD,CACF,CACD,OAAQiP,CACV,CASA,SAASE,GAAW9G,EAAQ+G,GAC1B,MAAM/H,EAAQgB,EAAO+G,GAAY,GAC3B/E,EAAUhC,EAAO+G,GAAY,GACnC,IAAIC,EAAgBD,EAAa,EAEjC,MAAME,EAAiB,GACjBC,EACJlI,EAAMkC,YAAcc,EAAQpD,OAAOI,EAAMC,aAAaD,EAAM9P,OACxDiY,EAAcD,EAAUlH,OAExBsG,EAAQ,GAERc,EAAO,CAAE,EAEf,IAAI9F,EAEAvC,EACA5Q,GAAS,EAETkZ,EAAUrI,EACVsI,EAAS,EACTpY,EAAQ,EACZ,MAAMqY,EAAS,CAACrY,GAIhB,KAAOmY,GAAS,CAEd,KAAOrH,IAASgH,GAAe,KAAOK,IAGtCJ,EAAe/S,KAAK8S,GACfK,EAAQnG,aACXI,EAASU,EAAQT,YAAY8F,GACxBA,EAAQhQ,MACXiK,EAAOpN,KAAK,MAEV6K,GACFmI,EAAU1F,WAAW6F,EAAQnY,OAE3BmY,EAAQR,8BACVK,EAAUM,oCAAqC,GAEjDN,EAAUzF,MAAMH,GACZ+F,EAAQR,8BACVK,EAAUM,wCAAqC7X,IAKnDoP,EAAWsI,EACXA,EAAUA,EAAQhQ,IACnB,CAKD,IADAgQ,EAAUrI,IACD7Q,EAAQgZ,EAAY/Y,QAGC,SAA1B+Y,EAAYhZ,GAAO,IACW,UAA9BgZ,EAAYhZ,EAAQ,GAAG,IACvBgZ,EAAYhZ,GAAO,GAAGiN,OAAS+L,EAAYhZ,EAAQ,GAAG,GAAGiN,MACzD+L,EAAYhZ,GAAO,GAAGe,MAAMH,OAASoY,EAAYhZ,GAAO,GAAGgB,IAAIJ,OAE/DG,EAAQf,EAAQ,EAChBoZ,EAAOrT,KAAKhF,GAEZmY,EAAQnG,gBAAavR,EACrB0X,EAAQtI,cAAWpP,EACnB0X,EAAUA,EAAQhQ,MAqBtB,IAhBA6P,EAAUlH,OAAS,GAKfqH,GAEFA,EAAQnG,gBAAavR,EACrB0X,EAAQtI,cAAWpP,GAEnB4X,EAAOnQ,MAKTjJ,EAAQoZ,EAAOnZ,OACRD,KAAS,CACd,MAAMG,EAAQ6Y,EAAY7Y,MAAMiZ,EAAOpZ,GAAQoZ,EAAOpZ,EAAQ,IACxDe,EAAQ+X,EAAe7P,MAC7BkP,EAAMjK,QAAQ,CAACnN,EAAOA,EAAQZ,EAAMF,OAAS,IAC7C2N,EAAOiE,EAAQ9Q,EAAO,EAAGZ,EAC1B,CAED,IADAH,GAAS,IACAA,EAAQmY,EAAMlY,QACrBgZ,EAAKE,EAAShB,EAAMnY,GAAO,IAAMmZ,EAAShB,EAAMnY,GAAO,GACvDmZ,GAAUhB,EAAMnY,GAAO,GAAKmY,EAAMnY,GAAO,GAAK,EAEhD,OAAOiZ,CACT,CC/MO,MAAM5I,GAAU,CACrBC,SAyBF,SAAyBV,EAASC,GAEhC,IAAIe,EACJ,OAYA,SAAoBxN,GAKlB,OAJAwM,EAAQK,MAAM,WACdW,EAAWhB,EAAQK,MAAM,eAAgB,CACvCa,YAAa,YAERwI,EAAYlW,EACpB,EAYD,SAASkW,EAAYlW,GACnB,OAAa,OAATA,EACKmW,EAAWnW,GAKhB+L,GAAmB/L,GACdwM,EAAQ0C,MACbkH,GACAC,EACAF,EAHK3J,CAILxM,IAIJwM,EAAQO,QAAQ/M,GACTkW,EACR,CAOD,SAASC,EAAWnW,GAGlB,OAFAwM,EAAQQ,KAAK,gBACbR,EAAQQ,KAAK,WACNP,EAAGzM,EACX,CAOD,SAASqW,EAAgBrW,GAQvB,OAPAwM,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,gBACbQ,EAAS1H,KAAO0G,EAAQK,MAAM,eAAgB,CAC5Ca,YAAa,UACbF,aAEFA,EAAWA,EAAS1H,KACboQ,CACR,CACH,EAvGE/M,QAeF,SAAwBsF,GAEtB,OADAqG,GAAYrG,GACLA,CACT,GAdM2H,GAAwB,CAC5BlJ,SAwGF,SAA8BV,EAASC,EAAI2D,GACzC,MAAMxC,EAAOvP,KACb,OAOA,SAAwB2B,GAKtB,OAJAwM,EAAQQ,KAAK,gBACbR,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNT,GAAaC,EAAS8J,EAAU,aACxC,EAOD,SAASA,EAAStW,GAChB,GAAa,OAATA,GAAiB+L,GAAmB/L,GACtC,OAAOoQ,EAAIpQ,GAKb,MAAM4T,EAAOhG,EAAKa,OAAOb,EAAKa,OAAO5R,OAAS,GAC9C,OACG+Q,EAAKP,OAAOjC,WAAWiF,QAAQC,KAAK7N,SAAS,iBAC9CmR,GACiB,eAAjBA,EAAK,GAAG/J,MACR+J,EAAK,GAAGpC,eAAeoC,EAAK,IAAI,GAAM/W,QAAU,EAEzC4P,EAAGzM,GAELwM,EAAQwC,UAAUpB,EAAKP,OAAOjC,WAAWsE,KAAMU,EAAK3D,EAApDD,CAAwDxM,EAChE,CACH,EA/IEqS,SAAS,GCwBJ,SAASkE,GACd/J,EACAC,EACA2D,EACAvG,EACA2M,EACAC,EACAC,EACAC,EACAjK,GAEA,MAAMC,EAAQD,GAAO/E,OAAOC,kBAC5B,IAAIgP,EAAU,EACd,OAcA,SAAe5W,GACb,GAAa,KAATA,EAMF,OALAwM,EAAQK,MAAMhD,GACd2C,EAAQK,MAAM2J,GACdhK,EAAQK,MAAM4J,GACdjK,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAKyJ,GACNI,EAIT,GAAa,OAAT7W,GAA0B,KAATA,GAAwB,KAATA,GAAe2L,GAAa3L,GAC9D,OAAOoQ,EAAIpQ,GAQb,OANAwM,EAAQK,MAAMhD,GACd2C,EAAQK,MAAM6J,GACdlK,EAAQK,MAAM8J,GACdnK,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAERoJ,EAAI9W,EACZ,EAYD,SAAS6W,EAAe7W,GACtB,OAAa,KAATA,GACFwM,EAAQK,MAAM4J,GACdjK,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAKyJ,GACbjK,EAAQQ,KAAKwJ,GACbhK,EAAQQ,KAAKnD,GACN4C,IAETD,EAAQK,MAAM8J,GACdnK,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAERqJ,EAAS/W,GACjB,CAYD,SAAS+W,EAAS/W,GAChB,OAAa,KAATA,GACFwM,EAAQQ,KAAK,eACbR,EAAQQ,KAAK2J,GACNE,EAAe7W,IAEX,OAATA,GAA0B,KAATA,GAAe+L,GAAmB/L,GAC9CoQ,EAAIpQ,IAEbwM,EAAQO,QAAQ/M,GACA,KAATA,EAAcgX,EAAiBD,EACvC,CAYD,SAASC,EAAehX,GACtB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCwM,EAAQO,QAAQ/M,GACT+W,GAEFA,EAAS/W,EACjB,CAYD,SAAS8W,EAAI9W,GACX,OACG4W,GACS,OAAT5W,GAA0B,KAATA,IAAegM,GAA0BhM,GAQzD4W,EAAUjK,GAAkB,KAAT3M,GACrBwM,EAAQO,QAAQ/M,GAChB4W,IACOE,GAEI,KAAT9W,GACFwM,EAAQO,QAAQ/M,GAChB4W,IACOE,GAMI,OAAT9W,GAA0B,KAATA,GAAwB,KAATA,GAAe2L,GAAa3L,GACvDoQ,EAAIpQ,IAEbwM,EAAQO,QAAQ/M,GACA,KAATA,EAAciX,EAAYH,IAxB/BtK,EAAQQ,KAAK,eACbR,EAAQQ,KAAK2J,GACbnK,EAAQQ,KAAK0J,GACblK,EAAQQ,KAAKnD,GACN4C,EAAGzM,GAqBb,CAYD,SAASiX,EAAUjX,GACjB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCwM,EAAQO,QAAQ/M,GACT8W,GAEFA,EAAI9W,EACZ,CACH,CCzLO,SAASkX,GAAa1K,EAASC,EAAI2D,EAAKvG,EAAMsN,EAAYR,GAC/D,MAAM/I,EAAOvP,KACb,IAEI8R,EAFAvD,EAAO,EAGX,OAYA,SAAe5M,GAMb,OALAwM,EAAQK,MAAMhD,GACd2C,EAAQK,MAAMsK,GACd3K,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAKmK,GACb3K,EAAQK,MAAM8J,GACPnC,CACR,EAYD,SAASA,EAAQxU,GACf,OACE4M,EAAO,KACE,OAAT5M,GACS,KAATA,GACU,KAATA,IAAgBmQ,GAMP,KAATnQ,IACE4M,GACD,2BAA4BgB,EAAKP,OAAOjC,WAEnCgF,EAAIpQ,GAEA,KAATA,GACFwM,EAAQQ,KAAK2J,GACbnK,EAAQK,MAAMsK,GACd3K,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAKmK,GACb3K,EAAQQ,KAAKnD,GACN4C,GAILV,GAAmB/L,IACrBwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNwH,IAEThI,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAER0J,EAAYpX,GACpB,CAYD,SAASoX,EAAYpX,GACnB,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACA+L,GAAmB/L,IACnB4M,IAAS,KAETJ,EAAQQ,KAAK,eACNwH,EAAQxU,KAEjBwM,EAAQO,QAAQ/M,GACXmQ,IAAMA,GAAQlE,GAAcjM,IACjB,KAATA,EAAcqX,EAAcD,EACpC,CAYD,SAASC,EAAYrX,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCwM,EAAQO,QAAQ/M,GAChB4M,IACOwK,GAEFA,EAAYpX,EACpB,CACH,CCtHO,SAASsX,GAAa9K,EAASC,EAAI2D,EAAKvG,EAAMsN,EAAYR,GAE/D,IAAI/F,EACJ,OAYA,SAAe5Q,GACb,GAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EAMhC,OALAwM,EAAQK,MAAMhD,GACd2C,EAAQK,MAAMsK,GACd3K,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAKmK,GACbvG,EAAkB,KAAT5Q,EAAc,GAAKA,EACrBuX,EAET,OAAOnH,EAAIpQ,EACZ,EAcD,SAASuX,EAAMvX,GACb,OAAIA,IAAS4Q,GACXpE,EAAQK,MAAMsK,GACd3K,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAKmK,GACb3K,EAAQQ,KAAKnD,GACN4C,IAETD,EAAQK,MAAM8J,GACPnC,EAAQxU,GAChB,CAYD,SAASwU,EAAQxU,GACf,OAAIA,IAAS4Q,GACXpE,EAAQQ,KAAK2J,GACNY,EAAM3G,IAEF,OAAT5Q,EACKoQ,EAAIpQ,GAIT+L,GAAmB/L,IAErBwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNT,GAAaC,EAASgI,EAAS,gBAExChI,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAERmD,EAAO7Q,GACf,CAOD,SAAS6Q,EAAO7Q,GACd,OAAIA,IAAS4Q,GAAmB,OAAT5Q,GAAiB+L,GAAmB/L,IACzDwM,EAAQQ,KAAK,eACNwH,EAAQxU,KAEjBwM,EAAQO,QAAQ/M,GACA,KAATA,EAAcwX,EAAS3G,EAC/B,CAYD,SAAS2G,EAAOxX,GACd,OAAIA,IAAS4Q,GAAmB,KAAT5Q,GACrBwM,EAAQO,QAAQ/M,GACT6Q,GAEFA,EAAO7Q,EACf,CACH,CClIO,SAASyX,GAAkBjL,EAASC,GAEzC,IAAI0D,EACJ,OAGA,SAASxS,EAAMqC,GACb,GAAI+L,GAAmB/L,GAKrB,OAJAwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACbmD,GAAO,EACAxS,EAET,GAAIsO,GAAcjM,GAChB,OAAOuM,GACLC,EACA7O,EACAwS,EAAO,aAAe,aAHjB5D,CAILvM,GAEJ,OAAOyM,EAAGzM,EACX,CACH,CC7BO,SAAS0X,GAAoBra,GAClC,OACEA,EAEGsa,QAAQ,cAAe,KAEvBA,QAAQ,SAAU,IAOlB3a,cACA4a,aAEP,CChBO,MAAMC,GAAa,CACxBvZ,KAAM,aACN4O,SAaF,SAA4BV,EAASC,EAAI2D,GACvC,MAAMxC,EAAOvP,KAEb,IAAIyZ,EACJ,OAYA,SAAe9X,GAKb,OADAwM,EAAQK,MAAM,cAchB,SAAgB7M,GAGd,OAAOkX,GAAapT,KAClB8J,EACApB,EACAuL,EAEA3H,EACA,kBACA,wBACA,wBARK8G,CASLlX,EACH,CA1BQsL,CAAOtL,EACf,EAqCD,SAAS+X,EAAW/X,GAIlB,OAHA8X,EAAaJ,GACX9J,EAAK4D,eAAe5D,EAAKa,OAAOb,EAAKa,OAAO5R,OAAS,GAAG,IAAIE,MAAM,GAAI,IAE3D,KAATiD,GACFwM,EAAQK,MAAM,oBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,oBACNgL,GAEF5H,EAAIpQ,EACZ,CAYD,SAASgY,EAAYhY,GAEnB,OAAOgM,GAA0BhM,GAC7ByX,GAAkBjL,EAASyL,EAA3BR,CAA8CzX,GAC9CiY,EAAkBjY,EACvB,CAYD,SAASiY,EAAkBjY,GACzB,OAAOuW,GACL/J,EACA0L,EAEA9H,EACA,wBACA,+BACA,qCACA,2BACA,8BATKmG,CAULvW,EACH,CAYD,SAASkY,EAAiBlY,GACxB,OAAOwM,EAAQY,QAAQ+K,GAAarH,EAAOA,EAApCtE,CAA2CxM,EACnD,CAcD,SAAS8Q,EAAM9Q,GACb,OAAOiM,GAAcjM,GACjBuM,GAAaC,EAAS4L,EAAiB,aAAvC7L,CAAqDvM,GACrDoY,EAAgBpY,EACrB,CAcD,SAASoY,EAAgBpY,GACvB,OAAa,OAATA,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,cAKbY,EAAKP,OAAOgL,QAAQ1V,KAAKmV,GAKlBrL,EAAGzM,IAELoQ,EAAIpQ,EACZ,CACH,GAtLMmY,GAAc,CAClBjL,SA2LF,SAA6BV,EAASC,EAAI2D,GACxC,OAcA,SAAqBpQ,GACnB,OAAOgM,GAA0BhM,GAC7ByX,GAAkBjL,EAAS8L,EAA3Bb,CAAyCzX,GACzCoQ,EAAIpQ,EACT,EAaD,SAASsY,EAAatY,GACpB,OAAOsX,GACL9K,EACA+L,EACAnI,EACA,kBACA,wBACA,wBANKkH,CAOLtX,EACH,CAYD,SAASuY,EAAWvY,GAClB,OAAOiM,GAAcjM,GACjBuM,GAAaC,EAASgM,EAA8B,aAApDjM,CAAkEvM,GAClEwY,EAA6BxY,EAClC,CAYD,SAASwY,EAA6BxY,GACpC,OAAgB,OAATA,GAAiB+L,GAAmB/L,GAAQyM,EAAGzM,GAAQoQ,EAAIpQ,EACnE,CACH,EAlQEqS,SAAS,GClBJ,MAAMoG,GAAkB,CAC7Bna,KAAM,kBACN4O,SAOF,SAAiCV,EAASC,EAAI2D,GAC5C,OAaA,SAAepQ,GAGb,OAFAwM,EAAQK,MAAM,mBACdL,EAAQO,QAAQ/M,GACT8Q,CACR,EAaD,SAASA,EAAM9Q,GACb,OAAI+L,GAAmB/L,IACrBwM,EAAQQ,KAAK,mBACNP,EAAGzM,IAELoQ,EAAIpQ,EACZ,CACH,GCvCO,MAAM0Y,GAAa,CACxBpa,KAAM,aACN4O,SA2DF,SAA4BV,EAASC,EAAI2D,GACvC,IAAIxD,EAAO,EACX,OAYA,SAAe5M,GAGb,OADAwM,EAAQK,MAAM,cAchB,SAAgB7M,GAEd,OADAwM,EAAQK,MAAM,sBACPgH,EAAa7T,EACrB,CAhBQsL,CAAOtL,EACf,EA2BD,SAAS6T,EAAa7T,GACpB,OAAa,KAATA,GAAe4M,IAAS,GAC1BJ,EAAQO,QAAQ/M,GACT6T,GAII,OAAT7T,GAAiBgM,GAA0BhM,IAC7CwM,EAAQQ,KAAK,sBACNwH,EAAQxU,IAEVoQ,EAAIpQ,EACZ,CAYD,SAASwU,EAAQxU,GACf,OAAa,KAATA,GACFwM,EAAQK,MAAM,sBACP8L,EAAgB3Y,IAEZ,OAATA,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,cAINP,EAAGzM,IAERiM,GAAcjM,GACTuM,GAAaC,EAASgI,EAAS,aAA/BjI,CAA6CvM,IAKtDwM,EAAQK,MAAM,kBACP1K,EAAKnC,GACb,CAcD,SAAS2Y,EAAgB3Y,GACvB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACT2Y,IAETnM,EAAQQ,KAAK,sBACNwH,EAAQxU,GAChB,CAYD,SAASmC,EAAKnC,GACZ,OAAa,OAATA,GAA0B,KAATA,GAAegM,GAA0BhM,IAC5DwM,EAAQQ,KAAK,kBACNwH,EAAQxU,KAEjBwM,EAAQO,QAAQ/M,GACTmC,EACR,CACH,EA5LEgH,QAIF,SAA2BsF,EAAQgC,GACjC,IAGIxD,EAEAmE,EALA+E,EAAa1H,EAAO5R,OAAS,EAC7BsQ,EAAe,EAOkB,eAAjCsB,EAAOtB,GAAc,GAAGtD,OAC1BsD,GAAgB,GAKhBgJ,EAAa,EAAIhJ,GACc,eAA/BsB,EAAO0H,GAAY,GAAGtM,OAEtBsM,GAAc,GAGiB,uBAA/B1H,EAAO0H,GAAY,GAAGtM,OACrBsD,IAAiBgJ,EAAa,GAC5BA,EAAa,EAAIhJ,GACmB,eAAnCsB,EAAO0H,EAAa,GAAG,GAAGtM,QAE9BsM,GAAchJ,EAAe,IAAMgJ,EAAa,EAAI,GAElDA,EAAahJ,IACfF,EAAU,CACRpD,KAAM,iBACNlM,MAAO8Q,EAAOtB,GAAc,GAAGxP,MAC/BC,IAAK6Q,EAAO0H,GAAY,GAAGvY,KAE7BwT,EAAO,CACLvH,KAAM,YACNlM,MAAO8Q,EAAOtB,GAAc,GAAGxP,MAC/BC,IAAK6Q,EAAO0H,GAAY,GAAGvY,IAC3B8P,YAAa,QAEflD,EAAOiE,EAAQtB,EAAcgJ,EAAahJ,EAAe,EAAG,CAC1D,CAAC,QAASF,EAASwD,GACnB,CAAC,QAASW,EAAMX,GAChB,CAAC,OAAQW,EAAMX,GACf,CAAC,OAAQxD,EAASwD,MAGtB,OAAOhC,CACT,GCzDO,MAAMmK,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAeWC,GAAe,CAAC,MAAO,SAAU,QAAS,YCxE1CC,GAAW,CACtBxa,KAAM,WACN4O,SAsCF,SAA0BV,EAASC,EAAI2D,GACrC,MAAMxC,EAAOvP,KAEb,IAAIuS,EAEAmI,EAEA7W,EAEAtF,EAEAoc,EACJ,OAYA,SAAehZ,GAEb,OAaF,SAAgBA,GAId,OAHAwM,EAAQK,MAAM,YACdL,EAAQK,MAAM,gBACdL,EAAQO,QAAQ/M,GACT+Q,CACR,CAlBQzF,CAAOtL,EACf,EAiCD,SAAS+Q,EAAK/Q,GACZ,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTiZ,GAEI,KAATjZ,GACFwM,EAAQO,QAAQ/M,GAChB+Y,GAAa,EACNG,GAEI,KAATlZ,GACFwM,EAAQO,QAAQ/M,GAChB4Q,EAAS,EAMFhD,EAAKoB,UAAYvC,EAAK0M,GAI3B5N,EAAWvL,IACbwM,EAAQO,QAAQ/M,GAEhBkC,EAAS0G,OAAO0D,aAAatM,GACtBoZ,GAEFhJ,EAAIpQ,EACZ,CAgBD,SAASiZ,EAAgBjZ,GACvB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GAChB4Q,EAAS,EACFyI,GAEI,KAATrZ,GACFwM,EAAQO,QAAQ/M,GAChB4Q,EAAS,EACThU,EAAQ,EACD0c,GAIL/N,EAAWvL,IACbwM,EAAQO,QAAQ/M,GAChB4Q,EAAS,EAGFhD,EAAKoB,UAAYvC,EAAK0M,GAExB/I,EAAIpQ,EACZ,CAYD,SAASqZ,EAAkBrZ,GACzB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GAGT4N,EAAKoB,UAAYvC,EAAK0M,GAExB/I,EAAIpQ,EACZ,CAYD,SAASsZ,EAAgBtZ,GACvB,MAAM3C,EAAQ,SACd,OAAI2C,IAAS3C,EAAMkC,WAAW3C,MAC5B4P,EAAQO,QAAQ/M,GACF3C,IAAVT,EAGKgR,EAAKoB,UAAYvC,EAAK0B,EAExBmL,GAEFlJ,EAAIpQ,EACZ,CAYD,SAASkZ,EAAclZ,GACrB,OAAIuL,EAAWvL,IACbwM,EAAQO,QAAQ/M,GAEhBkC,EAAS0G,OAAO0D,aAAatM,GACtBoZ,GAEFhJ,EAAIpQ,EACZ,CAcD,SAASoZ,EAAQpZ,GACf,GACW,OAATA,GACS,KAATA,GACS,KAATA,GACAgM,GAA0BhM,GAC1B,CACA,MAAMuZ,EAAiB,KAATvZ,EACR1B,EAAO4D,EAAOlF,cACpB,OAAKuc,GAAUR,IAAcF,GAAapW,SAASnE,GAM/Csa,GAAenW,SAASP,EAAOlF,gBACjC4T,EAAS,EACL2I,GACF/M,EAAQO,QAAQ/M,GACTwZ,GAKF5L,EAAKoB,UAAYvC,EAAGzM,GAAQmO,EAAanO,KAElD4Q,EAAS,EAEFhD,EAAKoB,YAAcpB,EAAKP,OAAOiC,KAAK1B,EAAK2B,MAAM/R,MAClD4S,EAAIpQ,GACJ+Y,EACAU,EAAwBzZ,GACxB0Z,EAA4B1Z,KAtB9B4Q,EAAS,EAGFhD,EAAKoB,UAAYvC,EAAGzM,GAAQmO,EAAanO,GAoBnD,CAGD,OAAa,KAATA,GAAeyL,EAAkBzL,IACnCwM,EAAQO,QAAQ/M,GAChBkC,GAAU0G,OAAO0D,aAAatM,GACvBoZ,GAEFhJ,EAAIpQ,EACZ,CAYD,SAASwZ,EAAiBxZ,GACxB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GAGT4N,EAAKoB,UAAYvC,EAAK0B,GAExBiC,EAAIpQ,EACZ,CAYD,SAASyZ,EAAwBzZ,GAC/B,OAAIiM,GAAcjM,IAChBwM,EAAQO,QAAQ/M,GACTyZ,GAEFE,EAAY3Z,EACpB,CAyBD,SAAS0Z,EAA4B1Z,GACnC,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACT2Z,GAII,KAAT3Z,GAAwB,KAATA,GAAeuL,EAAWvL,IAC3CwM,EAAQO,QAAQ/M,GACT4Z,GAEL3N,GAAcjM,IAChBwM,EAAQO,QAAQ/M,GACT0Z,GAEFC,EAAY3Z,EACpB,CAgBD,SAAS4Z,EAAsB5Z,GAE7B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACAyL,EAAkBzL,IAElBwM,EAAQO,QAAQ/M,GACT4Z,GAEFC,EAA2B7Z,EACnC,CAeD,SAAS6Z,EAA2B7Z,GAClC,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACT8Z,GAEL7N,GAAcjM,IAChBwM,EAAQO,QAAQ/M,GACT6Z,GAEFH,EAA4B1Z,EACpC,CAeD,SAAS8Z,EAA6B9Z,GACpC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOoQ,EAAIpQ,GAEA,KAATA,GAAwB,KAATA,GACjBwM,EAAQO,QAAQ/M,GAChBgZ,EAAUhZ,EACH+Z,GAEL9N,GAAcjM,IAChBwM,EAAQO,QAAQ/M,GACT8Z,GAEFE,EAA+Bha,EACvC,CAcD,SAAS+Z,EAA6B/Z,GACpC,OAAIA,IAASgZ,GACXxM,EAAQO,QAAQ/M,GAChBgZ,EAAU,KACHiB,GAEI,OAATja,GAAiB+L,GAAmB/L,GAC/BoQ,EAAIpQ,IAEbwM,EAAQO,QAAQ/M,GACT+Z,EACR,CAYD,SAASC,EAA+Bha,GACtC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACAgM,GAA0BhM,GAEnB6Z,EAA2B7Z,IAEpCwM,EAAQO,QAAQ/M,GACTga,EACR,CAaD,SAASC,EAAkCja,GACzC,OAAa,KAATA,GAAwB,KAATA,GAAeiM,GAAcjM,GACvC0Z,EAA4B1Z,GAE9BoQ,EAAIpQ,EACZ,CAYD,SAAS2Z,EAAY3Z,GACnB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTka,GAEF9J,EAAIpQ,EACZ,CAYD,SAASka,EAAcla,GACrB,OAAa,OAATA,GAAiB+L,GAAmB/L,GAG/BmO,EAAanO,GAElBiM,GAAcjM,IAChBwM,EAAQO,QAAQ/M,GACTka,GAEF9J,EAAIpQ,EACZ,CAYD,SAASmO,EAAanO,GACpB,OAAa,KAATA,GAA0B,IAAX4Q,GACjBpE,EAAQO,QAAQ/M,GACTma,GAEI,KAATna,GAA0B,IAAX4Q,GACjBpE,EAAQO,QAAQ/M,GACToa,GAEI,KAATpa,GAA0B,IAAX4Q,GACjBpE,EAAQO,QAAQ/M,GACTqa,GAEI,KAATra,GAA0B,IAAX4Q,GACjBpE,EAAQO,QAAQ/M,GACTmZ,GAEI,KAATnZ,GAA0B,IAAX4Q,GACjBpE,EAAQO,QAAQ/M,GACTsa,IAELvO,GAAmB/L,IAAqB,IAAX4Q,GAA2B,IAAXA,EAQpC,OAAT5Q,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,gBACNuN,EAAkBva,KAE3BwM,EAAQO,QAAQ/M,GACTmO,IAZL3B,EAAQQ,KAAK,gBACNR,EAAQ0C,MACbsL,GACAC,EACAF,EAHK/N,CAILxM,GAQL,CAaD,SAASua,EAAkBva,GACzB,OAAOwM,EAAQ0C,MACbwL,GACAC,EACAF,EAHKjO,CAILxM,EACH,CAaD,SAAS2a,EAAyB3a,GAIhC,OAHAwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACN4N,CACR,CAaD,SAASA,EAAmB5a,GAC1B,OAAa,OAATA,GAAiB+L,GAAmB/L,GAC/Bua,EAAkBva,IAE3BwM,EAAQK,MAAM,gBACPsB,EAAanO,GACrB,CAYD,SAASma,EAA0Bna,GACjC,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTmZ,GAEFhL,EAAanO,EACrB,CAYD,SAASoa,EAAuBpa,GAC9B,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GAChBkC,EAAS,GACF2Y,GAEF1M,EAAanO,EACrB,CAYD,SAAS6a,EAAsB7a,GAC7B,GAAa,KAATA,EAAa,CACf,MAAM1B,EAAO4D,EAAOlF,cACpB,OAAI6b,GAAapW,SAASnE,IACxBkO,EAAQO,QAAQ/M,GACTqa,GAEFlM,EAAanO,EACrB,CACD,OAAIuL,EAAWvL,IAASkC,EAAOrF,OAAS,GACtC2P,EAAQO,QAAQ/M,GAEhBkC,GAAU0G,OAAO0D,aAAatM,GACvB6a,GAEF1M,EAAanO,EACrB,CAYD,SAASsa,EAAwBta,GAC/B,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTmZ,GAEFhL,EAAanO,EACrB,CAoBD,SAASmZ,EAA8BnZ,GACrC,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTqa,GAII,KAATra,GAA0B,IAAX4Q,GACjBpE,EAAQO,QAAQ/M,GACTmZ,GAEFhL,EAAanO,EACrB,CAYD,SAASqa,EAAkBra,GACzB,OAAa,OAATA,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,gBACNyN,EAAkBza,KAE3BwM,EAAQO,QAAQ/M,GACTqa,EACR,CAYD,SAASI,EAAkBza,GAMzB,OALAwM,EAAQQ,KAAK,YAKNP,EAAGzM,EACX,CACH,EArzBE8a,UAeF,SAA2BrM,GACzB,IAAI7R,EAAQ6R,EAAO5R,OACnB,KAAOD,MACoB,UAArB6R,EAAO7R,GAAO,IAA4C,aAA1B6R,EAAO7R,GAAO,GAAGiN,QAInDjN,EAAQ,GAAmC,eAA9B6R,EAAO7R,EAAQ,GAAG,GAAGiN,OAEpC4E,EAAO7R,GAAO,GAAGe,MAAQ8Q,EAAO7R,EAAQ,GAAG,GAAGe,MAE9C8Q,EAAO7R,EAAQ,GAAG,GAAGe,MAAQ8Q,EAAO7R,EAAQ,GAAG,GAAGe,MAElD8Q,EAAOjE,OAAO5N,EAAQ,EAAG,IAE3B,OAAO6R,CACT,EA9BEK,UAAU,GAIN0L,GAAkB,CACtBtN,SAk2BF,SAAiCV,EAASC,EAAI2D,GAC5C,OAaA,SAAepQ,GAIb,OAHAwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNR,EAAQY,QAAQgF,GAAW3F,EAAI2D,EACvC,CACH,EAr3BEiC,SAAS,GAELqI,GAA2B,CAC/BxN,SAizBF,SAA0CV,EAASC,EAAI2D,GACrD,MAAMxC,EAAOvP,KACb,OAaA,SAAe2B,GACb,GAAI+L,GAAmB/L,GAIrB,OAHAwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACN8D,EAET,OAAOV,EAAIpQ,EACZ,EAaD,SAAS8Q,EAAM9Q,GACb,OAAO4N,EAAKP,OAAOiC,KAAK1B,EAAK2B,MAAM/R,MAAQ4S,EAAIpQ,GAAQyM,EAAGzM,EAC3D,CACH,EAv1BEqS,SAAS,GCjBJ,MAAM0I,GAAW,CACtBzc,KAAM,WACN4O,SAOF,SAA0BV,EAASC,EAAI2D,GACrC,MAAMxC,EAAOvP,KAEb,IAAIuS,EAEAhU,EAEAoe,EACJ,OAYA,SAAehb,GAIb,OAHAwM,EAAQK,MAAM,YACdL,EAAQK,MAAM,gBACdL,EAAQO,QAAQ/M,GACT+Q,CACR,EAgBD,SAASA,EAAK/Q,GACZ,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTiZ,GAEI,KAATjZ,GACFwM,EAAQO,QAAQ/M,GACTkZ,GAEI,KAATlZ,GACFwM,EAAQO,QAAQ/M,GACTib,GAIL1P,EAAWvL,IACbwM,EAAQO,QAAQ/M,GACTkb,GAEF9K,EAAIpQ,EACZ,CAgBD,SAASiZ,EAAgBjZ,GACvB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTqZ,GAEI,KAATrZ,GACFwM,EAAQO,QAAQ/M,GAChBpD,EAAQ,EACD0c,GAEL/N,EAAWvL,IACbwM,EAAQO,QAAQ/M,GACTmb,GAEF/K,EAAIpQ,EACZ,CAYD,SAASqZ,EAAkBrZ,GACzB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTob,GAEFhL,EAAIpQ,EACZ,CAYD,SAASqb,EAAQrb,GACf,OAAa,OAATA,EACKoQ,EAAIpQ,GAEA,KAATA,GACFwM,EAAQO,QAAQ/M,GACTsb,GAELvP,GAAmB/L,IACrBgb,EAAcK,EACPE,EAAiBvb,KAE1BwM,EAAQO,QAAQ/M,GACTqb,EACR,CAYD,SAASC,EAAatb,GACpB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTob,GAEFC,EAAQrb,EAChB,CAYD,SAASob,EAAWpb,GAClB,OAAgB,KAATA,EACHpC,EAAIoC,GACK,KAATA,EACAsb,EAAatb,GACbqb,EAAQrb,EACb,CAYD,SAASsZ,EAAgBtZ,GACvB,MAAM3C,EAAQ,SACd,OAAI2C,IAAS3C,EAAMkC,WAAW3C,MAC5B4P,EAAQO,QAAQ/M,GACC3C,IAAVT,EAAyB4e,EAAQlC,GAEnClJ,EAAIpQ,EACZ,CAYD,SAASwb,EAAMxb,GACb,OAAa,OAATA,EACKoQ,EAAIpQ,GAEA,KAATA,GACFwM,EAAQO,QAAQ/M,GACTyb,GAEL1P,GAAmB/L,IACrBgb,EAAcQ,EACPD,EAAiBvb,KAE1BwM,EAAQO,QAAQ/M,GACTwb,EACR,CAYD,SAASC,EAAWzb,GAClB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACT0b,GAEFF,EAAMxb,EACd,CAYD,SAAS0b,EAAS1b,GAChB,OAAa,KAATA,EACKpC,EAAIoC,GAEA,KAATA,GACFwM,EAAQO,QAAQ/M,GACT0b,GAEFF,EAAMxb,EACd,CAYD,SAASmb,EAAYnb,GACnB,OAAa,OAATA,GAA0B,KAATA,EACZpC,EAAIoC,GAET+L,GAAmB/L,IACrBgb,EAAcG,EACPI,EAAiBvb,KAE1BwM,EAAQO,QAAQ/M,GACTmb,EACR,CAYD,SAASF,EAAYjb,GACnB,OAAa,OAATA,EACKoQ,EAAIpQ,GAEA,KAATA,GACFwM,EAAQO,QAAQ/M,GACT2b,GAEL5P,GAAmB/L,IACrBgb,EAAcC,EACPM,EAAiBvb,KAE1BwM,EAAQO,QAAQ/M,GACTib,EACR,CAYD,SAASU,EAAiB3b,GACxB,OAAgB,KAATA,EAAcpC,EAAIoC,GAAQib,EAAYjb,EAC9C,CAYD,SAASkZ,EAAclZ,GAErB,OAAIuL,EAAWvL,IACbwM,EAAQO,QAAQ/M,GACT4b,GAEFxL,EAAIpQ,EACZ,CAYD,SAAS4b,EAAS5b,GAEhB,OAAa,KAATA,GAAeyL,EAAkBzL,IACnCwM,EAAQO,QAAQ/M,GACT4b,GAEFC,EAAgB7b,EACxB,CAYD,SAAS6b,EAAgB7b,GACvB,OAAI+L,GAAmB/L,IACrBgb,EAAca,EACPN,EAAiBvb,IAEtBiM,GAAcjM,IAChBwM,EAAQO,QAAQ/M,GACT6b,GAEFje,EAAIoC,EACZ,CAYD,SAASkb,EAAQlb,GAEf,OAAa,KAATA,GAAeyL,EAAkBzL,IACnCwM,EAAQO,QAAQ/M,GACTkb,GAEI,KAATlb,GAAwB,KAATA,GAAegM,GAA0BhM,GACnD8b,EAAe9b,GAEjBoQ,EAAIpQ,EACZ,CAYD,SAAS8b,EAAe9b,GACtB,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTpC,GAII,KAAToC,GAAwB,KAATA,GAAeuL,EAAWvL,IAC3CwM,EAAQO,QAAQ/M,GACT+b,GAELhQ,GAAmB/L,IACrBgb,EAAcc,EACPP,EAAiBvb,IAEtBiM,GAAcjM,IAChBwM,EAAQO,QAAQ/M,GACT8b,GAEFle,EAAIoC,EACZ,CAYD,SAAS+b,EAAqB/b,GAE5B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACAyL,EAAkBzL,IAElBwM,EAAQO,QAAQ/M,GACT+b,GAEFC,EAA0Bhc,EAClC,CAaD,SAASgc,EAA0Bhc,GACjC,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GACTic,GAELlQ,GAAmB/L,IACrBgb,EAAcgB,EACPT,EAAiBvb,IAEtBiM,GAAcjM,IAChBwM,EAAQO,QAAQ/M,GACTgc,GAEFF,EAAe9b,EACvB,CAaD,SAASic,EAA4Bjc,GACnC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOoQ,EAAIpQ,GAEA,KAATA,GAAwB,KAATA,GACjBwM,EAAQO,QAAQ/M,GAChB4Q,EAAS5Q,EACFkc,GAELnQ,GAAmB/L,IACrBgb,EAAciB,EACPV,EAAiBvb,IAEtBiM,GAAcjM,IAChBwM,EAAQO,QAAQ/M,GACTic,IAETzP,EAAQO,QAAQ/M,GACTmc,EACR,CAYD,SAASD,EAA4Blc,GACnC,OAAIA,IAAS4Q,GACXpE,EAAQO,QAAQ/M,GAChB4Q,OAASxS,EACFge,GAEI,OAATpc,EACKoQ,EAAIpQ,GAET+L,GAAmB/L,IACrBgb,EAAckB,EACPX,EAAiBvb,KAE1BwM,EAAQO,QAAQ/M,GACTkc,EACR,CAYD,SAASC,EAA8Bnc,GACrC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOoQ,EAAIpQ,GAEA,KAATA,GAAwB,KAATA,GAAegM,GAA0BhM,GACnD8b,EAAe9b,IAExBwM,EAAQO,QAAQ/M,GACTmc,EACR,CAaD,SAASC,EAAiCpc,GACxC,OAAa,KAATA,GAAwB,KAATA,GAAegM,GAA0BhM,GACnD8b,EAAe9b,GAEjBoQ,EAAIpQ,EACZ,CAYD,SAASpC,EAAIoC,GACX,OAAa,KAATA,GACFwM,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,gBACbR,EAAQQ,KAAK,YACNP,GAEF2D,EAAIpQ,EACZ,CAgBD,SAASub,EAAiBvb,GAKxB,OAJAwM,EAAQQ,KAAK,gBACbR,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNqP,CACR,CAgBD,SAASA,EAAgBrc,GAGvB,OAAOiM,GAAcjM,GACjBuM,GACEC,EACA8P,EACA,aACA1O,EAAKP,OAAOjC,WAAWiF,QAAQC,KAAK7N,SAAS,qBACzCrE,EACA,EANNmO,CAOEvM,GACFsc,EAAsBtc,EAC3B,CAgBD,SAASsc,EAAsBtc,GAE7B,OADAwM,EAAQK,MAAM,gBACPmO,EAAYhb,EACpB,CACH,GCrrBO,MAAMuc,GAAW,CACtBje,KAAM,WACN4O,SA8IF,SAA0BV,EAASC,EAAI2D,GACrC,MAAMxC,EAAOvP,KACb,IAEIme,EAEAnE,EAJAzb,EAAQgR,EAAKa,OAAO5R,OAOxB,KAAOD,KACL,IACkC,eAA/BgR,EAAKa,OAAO7R,GAAO,GAAGiN,MACU,cAA/B+D,EAAKa,OAAO7R,GAAO,GAAGiN,QACvB+D,EAAKa,OAAO7R,GAAO,GAAG6f,UACvB,CACAD,EAAa5O,EAAKa,OAAO7R,GAAO,GAChC,KACD,CAEH,OAiBA,SAAeoD,GAEb,IAAKwc,EACH,OAAOpM,EAAIpQ,GAYb,GAAIwc,EAAWE,UACb,OAAOC,EAAY3c,GAerB,OAbAqY,EAAUzK,EAAKP,OAAOgL,QAAQ5V,SAC5BiV,GACE9J,EAAK4D,eAAe,CAClB7T,MAAO6e,EAAW5e,IAClBA,IAAKgQ,EAAK2B,UAIhB/C,EAAQK,MAAM,YACdL,EAAQK,MAAM,eACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,YACN8D,CACR,EAkBD,SAASA,EAAM9Q,GAKb,OAAa,KAATA,EACKwM,EAAQY,QACbwP,GACAC,EACAxE,EAAUwE,EAAaF,EAHlBnQ,CAILxM,GAIS,KAATA,EACKwM,EAAQY,QACb0P,GACAD,EACAxE,EAAU0E,EAAmBJ,EAHxBnQ,CAILxM,GAIGqY,EAAUwE,EAAW7c,GAAQ2c,EAAY3c,EACjD,CAgBD,SAAS+c,EAAiB/c,GACxB,OAAOwM,EAAQY,QACb4P,GACAH,EACAF,EAHKnQ,CAILxM,EACH,CAkBD,SAAS6c,EAAW7c,GAElB,OAAOyM,EAAGzM,EACX,CAkBD,SAAS2c,EAAY3c,GAEnB,OADAwc,EAAWC,WAAY,EAChBrM,EAAIpQ,EACZ,CACH,EA5TE8a,UAqCF,SAA2BrM,EAAQgC,GACjC,IAGIhD,EAEAsD,EAEAC,EAEAiM,EATArgB,EAAQ6R,EAAO5R,OACf2S,EAAS,EAWb,KAAO5S,KAEL,GADA6Q,EAAQgB,EAAO7R,GAAO,GAClBmU,EAAM,CAER,GACiB,SAAftD,EAAM5D,MACU,cAAf4D,EAAM5D,MAAwB4D,EAAMiP,UAErC,MAKuB,UAArBjO,EAAO7R,GAAO,IAAiC,cAAf6Q,EAAM5D,OACxC4D,EAAMiP,WAAY,EAErB,MAAM,GAAI1L,GACT,GACuB,UAArBvC,EAAO7R,GAAO,KACE,eAAf6Q,EAAM5D,MAAwC,cAAf4D,EAAM5D,QACrC4D,EAAMgP,YAEP1L,EAAOnU,EACY,cAAf6Q,EAAM5D,MAAsB,CAC9B2F,EAAS,EACT,KACD,MAEqB,aAAf/B,EAAM5D,OACfmH,EAAQpU,GAGZ,MAAMuU,EAAQ,CACZtH,KAA+B,cAAzB4E,EAAOsC,GAAM,GAAGlH,KAAuB,OAAS,QACtDlM,MAAO0F,OAAO4E,OAAO,CAAE,EAAEwG,EAAOsC,GAAM,GAAGpT,OACzCC,IAAKyF,OAAO4E,OAAO,CAAA,EAAIwG,EAAOA,EAAO5R,OAAS,GAAG,GAAGe,MAEhDsf,EAAQ,CACZrT,KAAM,QACNlM,MAAO0F,OAAO4E,OAAO,CAAE,EAAEwG,EAAOsC,GAAM,GAAGpT,OACzCC,IAAKyF,OAAO4E,OAAO,CAAE,EAAEwG,EAAOuC,GAAO,GAAGpT,MAEpCwT,EAAO,CACXvH,KAAM,YACNlM,MAAO0F,OAAO4E,OAAO,CAAA,EAAIwG,EAAOsC,EAAOvB,EAAS,GAAG,GAAG5R,KACtDA,IAAKyF,OAAO4E,OAAO,GAAIwG,EAAOuC,EAAQ,GAAG,GAAGrT,QAuC9C,OArCAsf,EAAQ,CACN,CAAC,QAAS9L,EAAOV,GACjB,CAAC,QAASyM,EAAOzM,IAInBwM,EAAQta,EAAKsa,EAAOxO,EAAO1R,MAAMgU,EAAO,EAAGA,EAAOvB,EAAS,IAG3DyN,EAAQta,EAAKsa,EAAO,CAAC,CAAC,QAAS7L,EAAMX,KAKrCwM,EAAQta,EACNsa,EACAzM,GACEC,EAAQpD,OAAOjC,WAAWsG,WAAWpB,KACrC7B,EAAO1R,MAAMgU,EAAOvB,EAAS,EAAGwB,EAAQ,GACxCP,IAKJwM,EAAQta,EAAKsa,EAAO,CAClB,CAAC,OAAQ7L,EAAMX,GACfhC,EAAOuC,EAAQ,GACfvC,EAAOuC,EAAQ,GACf,CAAC,OAAQkM,EAAOzM,KAIlBwM,EAAQta,EAAKsa,EAAOxO,EAAO1R,MAAMiU,EAAQ,IAGzCiM,EAAQta,EAAKsa,EAAO,CAAC,CAAC,OAAQ9L,EAAOV,KACrCjG,EAAOiE,EAAQsC,EAAMtC,EAAO5R,OAAQogB,GAC7BxO,CACT,EAtIE+B,WAiBF,SAA4B/B,GAC1B,IAAI7R,GAAS,EACb,OAASA,EAAQ6R,EAAO5R,QAAQ,CAC9B,MAAM4Q,EAAQgB,EAAO7R,GAAO,GAEX,eAAf6Q,EAAM5D,MACS,cAAf4D,EAAM5D,MACS,aAAf4D,EAAM5D,OAGN4E,EAAOjE,OAAO5N,EAAQ,EAAkB,eAAf6Q,EAAM5D,KAAwB,EAAI,GAC3D4D,EAAM5D,KAAO,OACbjN,IAEH,CACD,OAAO6R,CACT,GA7BMmO,GAAoB,CACxB1P,SA4TF,SAA0BV,EAASC,EAAI2D,GACrC,OAYA,SAAuBpQ,GAKrB,OAJAwM,EAAQK,MAAM,YACdL,EAAQK,MAAM,kBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,kBACNmQ,CACR,EAYD,SAASA,EAAend,GACtB,OAAOgM,GAA0BhM,GAC7ByX,GAAkBjL,EAAS4Q,EAA3B3F,CAAyCzX,GACzCod,EAAapd,EAClB,CAYD,SAASod,EAAapd,GACpB,OAAa,KAATA,EACKqd,EAAYrd,GAEduW,GACL/J,EACA8Q,EACAC,EACA,sBACA,6BACA,mCACA,yBACA,4BACA,GATKhH,CAULvW,EACH,CAYD,SAASsd,EAAyBtd,GAChC,OAAOgM,GAA0BhM,GAC7ByX,GAAkBjL,EAASgR,EAA3B/F,CAA4CzX,GAC5Cqd,EAAYrd,EACjB,CAYD,SAASud,EAA2Bvd,GAClC,OAAOoQ,EAAIpQ,EACZ,CAYD,SAASwd,EAAgBxd,GACvB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzBsX,GACL9K,EACAiR,EACArN,EACA,gBACA,sBACA,sBANKkH,CAOLtX,GAEGqd,EAAYrd,EACpB,CAYD,SAASyd,EAAmBzd,GAC1B,OAAOgM,GAA0BhM,GAC7ByX,GAAkBjL,EAAS6Q,EAA3B5F,CAAwCzX,GACxCqd,EAAYrd,EACjB,CAYD,SAASqd,EAAYrd,GACnB,OAAa,KAATA,GACFwM,EAAQK,MAAM,kBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,kBACbR,EAAQQ,KAAK,YACNP,GAEF2D,EAAIpQ,EACZ,CACH,GAndM8c,GAAyB,CAC7B5P,SAwdF,SAA+BV,EAASC,EAAI2D,GAC1C,MAAMxC,EAAOvP,KACb,OAYA,SAAuB2B,GACrB,OAAOkX,GAAapT,KAClB8J,EACApB,EACAkR,EACAC,EACA,YACA,kBACA,kBAPKzG,CAQLlX,EACH,EAYD,SAAS0d,EAAmB1d,GAC1B,OAAO4N,EAAKP,OAAOgL,QAAQ5V,SACzBiV,GACE9J,EAAK4D,eAAe5D,EAAKa,OAAOb,EAAKa,OAAO5R,OAAS,GAAG,IAAIE,MAAM,GAAI,KAGtE0P,EAAGzM,GACHoQ,EAAIpQ,EACT,CAYD,SAAS2d,EAAqB3d,GAC5B,OAAOoQ,EAAIpQ,EACZ,CACH,GAhhBMgd,GAA8B,CAClC9P,SAqhBF,SAAoCV,EAASC,EAAI2D,GAC/C,OAcA,SAAiCpQ,GAO/B,OAJAwM,EAAQK,MAAM,aACdL,EAAQK,MAAM,mBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,mBACN4Q,CACR,EAcD,SAASA,EAAuB5d,GAC9B,OAAa,KAATA,GACFwM,EAAQK,MAAM,mBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,mBACbR,EAAQQ,KAAK,aACNP,GAEF2D,EAAIpQ,EACZ,CACH,GC9lBO,MAAM6d,GAAkB,CAC7Bvf,KAAM,kBACN4O,SAQF,SAAiCV,EAASC,EAAI2D,GAC5C,MAAMxC,EAAOvP,KACb,OAYA,SAAe2B,GAKb,OAJAwM,EAAQK,MAAM,cACdL,EAAQK,MAAM,oBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,oBACN+D,CACR,EAYD,SAASA,EAAK/Q,GACZ,OAAa,KAATA,GACFwM,EAAQK,MAAM,eACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,cACN8D,GAEFV,EAAIpQ,EACZ,CA6BD,SAAS8Q,EAAM9Q,GAMb,OAAgB,KAATA,GAAe,2BAA4B4N,EAAKP,OAAOjC,WAC1DgF,EAAIpQ,GACJyM,EAAGzM,EACR,CACH,EAvFEwQ,WAAY+L,GAAS/L,YCHhB,MAAMsN,GAAiB,CAC5Bxf,KAAM,iBACN4O,SAQF,SAAgCV,EAASC,EAAI2D,GAC3C,MAAMxC,EAAOvP,KACb,OAYA,SAAe2B,GAMb,OALAwM,EAAQK,MAAM,aACdL,EAAQK,MAAM,eACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,aACN8D,CACR,EAGD,SAASA,EAAM9Q,GAKb,OAAgB,KAATA,GAAe,2BAA4B4N,EAAKP,OAAOjC,WAC1DgF,EAAIpQ,GACJyM,EAAGzM,EACR,CACH,EAxCEwQ,WAAY+L,GAAS/L,YCHhB,MAAMuN,GAAa,CACxBzf,KAAM,aACN4O,SAOF,SAA4BV,EAASC,GACnC,OAGA,SAAezM,GAIb,OAHAwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACNT,GAAaC,EAASC,EAAI,aAClC,CACH,GClBO,MAAMuR,GAAgB,CAC3B1f,KAAM,gBACN4O,SAOF,SAA+BV,EAASC,EAAI2D,GAC1C,IAEIQ,EAFAhE,EAAO,EAGX,OAYA,SAAe5M,GAGb,OAFAwM,EAAQK,MAAM,iBAehB,SAAgB7M,GAEd,OADA4Q,EAAS5Q,EACFwU,EAAQxU,EAChB,CAhBQsL,CAAOtL,EACf,EA2BD,SAASwU,EAAQxU,GACf,OAAIA,IAAS4Q,GACXpE,EAAQK,MAAM,yBACPoR,EAASje,IAEd4M,GAAQ,IAAe,OAAT5M,GAAiB+L,GAAmB/L,KACpDwM,EAAQQ,KAAK,iBACNP,EAAGzM,IAELoQ,EAAIpQ,EACZ,CAYD,SAASie,EAASje,GAChB,OAAIA,IAAS4Q,GACXpE,EAAQO,QAAQ/M,GAChB4M,IACOqR,IAETzR,EAAQQ,KAAK,yBACNf,GAAcjM,GACjBuM,GAAaC,EAASgI,EAAS,aAA/BjI,CAA6CvM,GAC7CwU,EAAQxU,GACb,CACH,GCpFO,MAAMyK,GAAO,CAClBnM,KAAM,OACN4O,SA0BF,SAA2BV,EAASC,EAAI2D,GACtC,MAAMxC,EAAOvP,KACPuV,EAAOhG,EAAKa,OAAOb,EAAKa,OAAO5R,OAAS,GAC9C,IAAIqhB,EACFtK,GAAyB,eAAjBA,EAAK,GAAG/J,KACZ+J,EAAK,GAAGpC,eAAeoC,EAAK,IAAI,GAAM/W,OACtC,EACF+P,EAAO,EACX,OAGA,SAAe5M,GACb,MAAMme,EACJvQ,EAAKM,eAAerE,OACV,KAAT7J,GAAwB,KAATA,GAAwB,KAATA,EAC3B,gBACA,eACN,GACW,kBAATme,GACKvQ,EAAKM,eAAe0C,QAAU5Q,IAAS4N,EAAKM,eAAe0C,OAC5DhF,GAAW5L,GACf,CAOA,GANK4N,EAAKM,eAAerE,OACvB+D,EAAKM,eAAerE,KAAOsU,EAC3B3R,EAAQK,MAAMsR,EAAM,CAClB3L,YAAY,KAGH,kBAAT2L,EAEF,OADA3R,EAAQK,MAAM,kBACE,KAAT7M,GAAwB,KAATA,EAClBwM,EAAQ0C,MAAM8O,GAAe5N,EAAKgO,EAAlC5R,CAA4CxM,GAC5Coe,EAASpe,GAEf,IAAK4N,EAAKoB,WAAsB,KAAThP,EAGrB,OAFAwM,EAAQK,MAAM,kBACdL,EAAQK,MAAM,iBACPgE,EAAO7Q,EAEjB,CACD,OAAOoQ,EAAIpQ,EACZ,EAGD,SAAS6Q,EAAO7Q,GACd,OAAI4L,GAAW5L,MAAW4M,EAAO,IAC/BJ,EAAQO,QAAQ/M,GACT6Q,KAGLjD,EAAKoB,WAAapC,EAAO,KAC1BgB,EAAKM,eAAe0C,OACjB5Q,IAAS4N,EAAKM,eAAe0C,OACpB,KAAT5Q,GAAwB,KAATA,IAEnBwM,EAAQQ,KAAK,iBACNoR,EAASpe,IAEXoQ,EAAIpQ,EACZ,CAKD,SAASoe,EAASpe,GAKhB,OAJAwM,EAAQK,MAAM,kBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,kBACbY,EAAKM,eAAe0C,OAAShD,EAAKM,eAAe0C,QAAU5Q,EACpDwM,EAAQ0C,MACbkD,GAEAxE,EAAKoB,UAAYoB,EAAMiO,EACvB7R,EAAQY,QACNkR,GACAC,EACAC,GAGL,CAGD,SAASH,EAAQre,GAGf,OAFA4N,EAAKM,eAAeuQ,kBAAmB,EACvCP,IACOK,EAAYve,EACpB,CAGD,SAASwe,EAAYxe,GACnB,OAAIiM,GAAcjM,IAChBwM,EAAQK,MAAM,4BACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,4BACNuR,GAEFnO,EAAIpQ,EACZ,CAGD,SAASue,EAAYve,GAInB,OAHA4N,EAAKM,eAAetB,KAClBsR,EACAtQ,EAAK4D,eAAehF,EAAQQ,KAAK,mBAAmB,GAAMnQ,OACrD4P,EAAGzM,EACX,CACH,EAnIEmO,aAAc,CACZjB,SAwIJ,SAAkCV,EAASC,EAAI2D,GAC7C,MAAMxC,EAAOvP,KAEb,OADAuP,EAAKM,eAAeI,gBAAalQ,EAC1BoO,EAAQ0C,MAAMkD,GAAWiM,EAASK,GAGzC,SAASL,EAAQre,GAOf,OANA4N,EAAKM,eAAeyQ,kBAClB/Q,EAAKM,eAAeyQ,mBACpB/Q,EAAKM,eAAeuQ,iBAIflS,GACLC,EACAC,EACA,iBACAmB,EAAKM,eAAetB,KAAO,EAJtBL,CAKLvM,EACH,CAGD,SAAS0e,EAAS1e,GAChB,OAAI4N,EAAKM,eAAeyQ,oBAAsB1S,GAAcjM,IAC1D4N,EAAKM,eAAeyQ,uBAAoBvgB,EACxCwP,EAAKM,eAAeuQ,sBAAmBrgB,EAChCwgB,EAAiB5e,KAE1B4N,EAAKM,eAAeyQ,uBAAoBvgB,EACxCwP,EAAKM,eAAeuQ,sBAAmBrgB,EAChCoO,EAAQY,QAAQyR,GAAiBpS,EAAImS,EAArCpS,CAAuDxM,GAC/D,CAGD,SAAS4e,EAAiB5e,GAOxB,OALA4N,EAAKM,eAAeI,YAAa,EAEjCV,EAAKoB,eAAY5Q,EAGVmO,GACLC,EACAA,EAAQY,QAAQ3C,GAAMgC,EAAI2D,GAC1B,aACAxC,EAAKP,OAAOjC,WAAWiF,QAAQC,KAAK7N,SAAS,qBACzCrE,EACA,EANCmO,CAOLvM,EACH,CACH,GAxLEgN,KAsNF,SAAyBR,GACvBA,EAAQQ,KAAK3O,KAAK6P,eAAerE,KACnC,GApNMyU,GAAoC,CACxCpR,SAyNF,SAA0CV,EAASC,EAAI2D,GACrD,MAAMxC,EAAOvP,KAIb,OAAOkO,GACLC,EASF,SAAqBxM,GACnB,MAAM4T,EAAOhG,EAAKa,OAAOb,EAAKa,OAAO5R,OAAS,GAC9C,OAAQoP,GAAcjM,IACpB4T,GACiB,6BAAjBA,EAAK,GAAG/J,KACN4C,EAAGzM,GACHoQ,EAAIpQ,EACT,EAdC,2BACA4N,EAAKP,OAAOjC,WAAWiF,QAAQC,KAAK7N,SAAS,qBACzCrE,EACA,EAYR,EA/OEiU,SAAS,GAILwM,GAAkB,CACtB3R,SAmLF,SAAwBV,EAASC,EAAI2D,GACnC,MAAMxC,EAAOvP,KACb,OAAOkO,GACLC,EAOF,SAAqBxM,GACnB,MAAM4T,EAAOhG,EAAKa,OAAOb,EAAKa,OAAO5R,OAAS,GAC9C,OAAO+W,GACY,mBAAjBA,EAAK,GAAG/J,MACR+J,EAAK,GAAGpC,eAAeoC,EAAK,IAAI,GAAM/W,SAAW+Q,EAAKM,eAAetB,KACnEH,EAAGzM,GACHoQ,EAAIpQ,EACT,EAZC,iBACA4N,EAAKM,eAAetB,KAAO,EAY/B,EApMEyF,SAAS,GCtBJ,MAAMyM,GAAkB,CAC7BxgB,KAAM,kBACN4O,SAkEF,SAAiCV,EAASC,EAAI2D,GAC5C,MAAMxC,EAAOvP,KAEb,IAAIuS,EACJ,OAaA,SAAe5Q,GACb,IAEI+e,EAFAniB,EAAQgR,EAAKa,OAAO5R,OAIxB,KAAOD,KAGL,GACiC,eAA/BgR,EAAKa,OAAO7R,GAAO,GAAGiN,MACS,eAA/B+D,EAAKa,OAAO7R,GAAO,GAAGiN,MACS,YAA/B+D,EAAKa,OAAO7R,GAAO,GAAGiN,KACtB,CACAkV,EAA2C,cAA/BnR,EAAKa,OAAO7R,GAAO,GAAGiN,KAClC,KACD,CAKH,IAAK+D,EAAKP,OAAOiC,KAAK1B,EAAK2B,MAAM/R,QAAUoQ,EAAKoB,WAAa+P,GAG3D,OAFAvS,EAAQK,MAAM,qBACd+D,EAAS5Q,EAiBb,SAAgBA,GAEd,OADAwM,EAAQK,MAAM,6BACPgE,EAAO7Q,EACf,CAnBUsL,CAAOtL,GAEhB,OAAOoQ,EAAIpQ,EACZ,EA6BD,SAAS6Q,EAAO7Q,GACd,OAAIA,IAAS4Q,GACXpE,EAAQO,QAAQ/M,GACT6Q,IAETrE,EAAQQ,KAAK,6BACNf,GAAcjM,GACjBuM,GAAaC,EAASsE,EAAO,aAA7BvE,CAA2CvM,GAC3C8Q,EAAM9Q,GACX,CAaD,SAAS8Q,EAAM9Q,GACb,OAAa,OAATA,GAAiB+L,GAAmB/L,IACtCwM,EAAQQ,KAAK,qBACNP,EAAGzM,IAELoQ,EAAIpQ,EACZ,CACH,EAtKE8a,UAIF,SAAkCrM,EAAQgC,GAExC,IAEIxD,EAEAmE,EAEAyG,EANAjb,EAAQ6R,EAAO5R,OAUnB,KAAOD,KACL,GAAyB,UAArB6R,EAAO7R,GAAO,GAAgB,CAChC,GAA8B,YAA1B6R,EAAO7R,GAAO,GAAGiN,KAAoB,CACvCoD,EAAUrQ,EACV,KACD,CAC6B,cAA1B6R,EAAO7R,GAAO,GAAGiN,OACnBuH,EAAOxU,EAEV,KAG+B,YAA1B6R,EAAO7R,GAAO,GAAGiN,MAEnB4E,EAAOjE,OAAO5N,EAAO,GAElBib,GAAwC,eAA1BpJ,EAAO7R,GAAO,GAAGiN,OAClCgO,EAAajb,GAInB,MAAMoiB,EAAU,CACdnV,KAAM,gBACNlM,MAAO0F,OAAO4E,OAAO,CAAE,EAAEwG,EAAO2C,GAAM,GAAGzT,OACzCC,IAAKyF,OAAO4E,OAAO,CAAA,EAAIwG,EAAOA,EAAO5R,OAAS,GAAG,GAAGe,MAItD6Q,EAAO2C,GAAM,GAAGvH,KAAO,oBAInBgO,GACFpJ,EAAOjE,OAAO4G,EAAM,EAAG,CAAC,QAAS4N,EAASvO,IAC1ChC,EAAOjE,OAAOqN,EAAa,EAAG,EAAG,CAAC,OAAQpJ,EAAOxB,GAAS,GAAIwD,IAC9DhC,EAAOxB,GAAS,GAAGrP,IAAMyF,OAAO4E,OAAO,CAAA,EAAIwG,EAAOoJ,GAAY,GAAGja,MAEjE6Q,EAAOxB,GAAS,GAAK+R,EAKvB,OADAvQ,EAAO9L,KAAK,CAAC,OAAQqc,EAASvO,IACvBhC,CACT,GC/DO,MAAMiB,GAAO,CAClBxC,SAOF,SAAwBV,GACtB,MAAMoB,EAAOvP,KACP4gB,EAAUzS,EAAQY,QAEtBgF,GAoBF,SAAuBpS,GACrB,GAAa,OAATA,EAEF,YADAwM,EAAQO,QAAQ/M,GAOlB,OAJAwM,EAAQK,MAAM,mBACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,mBACbY,EAAKiB,sBAAmBzQ,EACjB6gB,CACR,EA3BCzS,EAAQY,QACN/O,KAAKgP,OAAOjC,WAAW8T,YACvBC,EACA5S,GACEC,EACAA,EAAQY,QACN/O,KAAKgP,OAAOjC,WAAWsE,KACvByP,EACA3S,EAAQY,QAAQH,GAASkS,IAE3B,gBAIN,OAAOF,EAgBP,SAASE,EAAenf,GACtB,GAAa,OAATA,EAQJ,OAJAwM,EAAQK,MAAM,cACdL,EAAQO,QAAQ/M,GAChBwM,EAAQQ,KAAK,cACbY,EAAKiB,sBAAmBzQ,EACjB6gB,EAPLzS,EAAQO,QAAQ/M,EAQnB,CACH,GC1DO,MAAMof,GAAW,CACtB5O,WAAY6O,MAEDC,GAASC,GAAkB,UAC3BnO,GAAOmO,GAAkB,QAMtC,SAASA,GAAkBC,GACzB,MAAO,CACLtS,SAUF,SAAwBV,GACtB,MAAMoB,EAAOvP,KACP+M,EAAa/M,KAAKgP,OAAOjC,WAAWoU,GACpCpO,EAAO5E,EAAQY,QAAQhC,EAAYzN,EAAO8hB,GAChD,OAAO9hB,EAGP,SAASA,EAAMqC,GACb,OAAOwU,EAAQxU,GAAQoR,EAAKpR,GAAQyf,EAAQzf,EAC7C,CAGD,SAASyf,EAAQzf,GACf,GAAa,OAATA,EAMJ,OAFAwM,EAAQK,MAAM,QACdL,EAAQO,QAAQ/M,GACTmC,EALLqK,EAAQO,QAAQ/M,EAMnB,CAGD,SAASmC,EAAKnC,GACZ,OAAIwU,EAAQxU,IACVwM,EAAQQ,KAAK,QACNoE,EAAKpR,KAIdwM,EAAQO,QAAQ/M,GACTmC,EACR,CAMD,SAASqS,EAAQxU,GACf,GAAa,OAATA,EACF,OAAO,EAET,MAAMyK,EAAOW,EAAWpL,GACxB,IAAIpD,GAAS,EACb,GAAI6N,EAGF,OAAS7N,EAAQ6N,EAAK5N,QAAQ,CAC5B,MAAMoR,EAAOxD,EAAK7N,GAClB,IAAKqR,EAAKT,UAAYS,EAAKT,SAAS1J,KAAK8J,EAAMA,EAAKJ,UAClD,OAAO,CAEV,CAEH,OAAO,CACR,CACF,EAjECgD,WAAY6O,GACA,SAAVG,EAAmBE,QAAyBthB,GAiElD,CAMA,SAASihB,GAAeM,GACtB,OAGA,SAAwBlR,EAAQgC,GAC9B,IAEI5D,EAFAjQ,GAAS,EAMb,OAASA,GAAS6R,EAAO5R,aACTuB,IAAVyO,EACE4B,EAAO7R,IAAoC,SAA1B6R,EAAO7R,GAAO,GAAGiN,OACpCgD,EAAQjQ,EACRA,KAEQ6R,EAAO7R,IAAoC,SAA1B6R,EAAO7R,GAAO,GAAGiN,OAExCjN,IAAUiQ,EAAQ,IACpB4B,EAAO5B,GAAO,GAAGjP,IAAM6Q,EAAO7R,EAAQ,GAAG,GAAGgB,IAC5C6Q,EAAOjE,OAAOqC,EAAQ,EAAGjQ,EAAQiQ,EAAQ,GACzCjQ,EAAQiQ,EAAQ,GAElBA,OAAQzO,GAGZ,OAAOuhB,EAAgBA,EAAclR,EAAQgC,GAAWhC,CACzD,CACH,CAaA,SAASiR,GAAuBjR,EAAQgC,GACtC,IAAI+E,EAAa,EAEjB,OAASA,GAAc/G,EAAO5R,QAC5B,IACG2Y,IAAe/G,EAAO5R,QACU,eAA/B4R,EAAO+G,GAAY,GAAG3L,OACW,SAAnC4E,EAAO+G,EAAa,GAAG,GAAG3L,KAC1B,CACA,MAAM1H,EAAOsM,EAAO+G,EAAa,GAAG,GAC9BoK,EAASnP,EAAQT,YAAY7N,GACnC,IAII0d,EAJAjjB,EAAQgjB,EAAO/iB,OACfijB,GAAe,EACflT,EAAO,EAGX,KAAOhQ,KAAS,CACd,MAAMmjB,EAAQH,EAAOhjB,GACrB,GAAqB,iBAAVmjB,EAAoB,CAE7B,IADAD,EAAcC,EAAMljB,OACyB,KAAtCkjB,EAAMxgB,WAAWugB,EAAc,IACpClT,IACAkT,IAEF,GAAIA,EAAa,MACjBA,GAAe,CAChB,MAEI,IAAe,IAAXC,EACPF,GAAO,EACPjT,SACK,IAAe,IAAXmT,EAEJ,CAELnjB,IACA,KACD,CACF,CACD,GAAIgQ,EAAM,CACR,MAAMa,EAAQ,CACZ5D,KACE2L,IAAe/G,EAAO5R,QAAUgjB,GAAQjT,EAAO,EAC3C,aACA,oBACNjP,MAAO,CACLH,KAAM2E,EAAKvE,IAAIJ,KACfC,OAAQ0E,EAAKvE,IAAIH,OAASmP,EAC1B4C,OAAQrN,EAAKvE,IAAI4R,OAAS5C,EAC1BoT,OAAQ7d,EAAKxE,MAAMqiB,OAASpjB,EAC5B+U,aAAc/U,EACVkjB,EACA3d,EAAKxE,MAAMgU,aAAemO,GAEhCliB,IAAKyF,OAAO4E,OAAO,CAAA,EAAI9F,EAAKvE,MAE9BuE,EAAKvE,IAAMyF,OAAO4E,OAAO,CAAE,EAAEwF,EAAM9P,OAC/BwE,EAAKxE,MAAM6R,SAAWrN,EAAKvE,IAAI4R,OACjCnM,OAAO4E,OAAO9F,EAAMsL,IAEpBgB,EAAOjE,OACLgL,EACA,EACA,CAAC,QAAS/H,EAAOgD,GACjB,CAAC,OAAQhD,EAAOgD,IAElB+E,GAAc,EAEjB,CACDA,GACD,CAEH,OAAO/G,CACT,CClKO,SAASwR,GAAgB5S,EAAQ6S,EAAYrV,GAElD,IAAItN,EAAQ8F,OAAO4E,OACjB4C,EACIxH,OAAO4E,OAAO,CAAE,EAAE4C,GAClB,CACErN,KAAM,EACNC,OAAQ,EACR+R,OAAQ,GAEd,CACEwQ,OAAQ,EACRrO,cAAe,IAInB,MAAMwO,EAAc,CAAE,EAEhBC,EAAuB,GAE7B,IAAIR,EAAS,GAETphB,EAAQ,GASZ,MAAMgO,EAAU,CACdO,QAkJF,SAAiB/M,GACX+L,GAAmB/L,IACrBzC,EAAMC,OACND,EAAME,OAAS,EACfF,EAAMiS,SAAoB,IAAVxP,EAAc,EAAI,EAClCqgB,MACmB,IAAVrgB,IACTzC,EAAME,SACNF,EAAMiS,UAIJjS,EAAMoU,aAAe,EACvBpU,EAAMyiB,UAENziB,EAAMoU,eAKFpU,EAAMoU,eAAiBiO,EAAOriB,EAAMyiB,QAAQnjB,SAC9CU,EAAMoU,cAAgB,EACtBpU,EAAMyiB,WAKVvP,EAAQjD,SAAWxN,CAIpB,EAhLC6M,MAmLF,SAAehD,EAAMyW,GAGnB,MAAM7S,EAAQ6S,GAAU,CAAE,EAK1B,OAJA7S,EAAM5D,KAAOA,EACb4D,EAAM9P,MAAQ4R,IACdkB,EAAQhC,OAAO9L,KAAK,CAAC,QAAS8K,EAAOgD,IACrCjS,EAAMmE,KAAK8K,GACJA,CACR,EA3LCT,KA8LF,SAAcnD,GACZ,MAAM4D,EAAQjP,EAAMqH,MAGpB,OAFA4H,EAAM7P,IAAM2R,IACZkB,EAAQhC,OAAO9L,KAAK,CAAC,OAAQ8K,EAAOgD,IAC7BhD,CACR,EAlMCL,QAASmT,EAyMX,SAA+BC,EAAWxd,GACxCyd,EAAUD,EAAWxd,EAAK6H,KAC3B,GA1MCqE,MAAOqR,EAAiBG,GACxB1R,UAAWuR,EAAiBG,EAAmB,CAC7C1R,WAAW,KASTyB,EAAU,CACdjD,SAAU,KACVxN,KAAM,KACNkO,eAAgB,CAAE,EAClBO,OAAQ,GACRpB,SACA2C,cACAwB,eA6CF,SAAwB/D,EAAOkT,GAC7B,OAsYJ,SAAyBf,EAAQe,GAC/B,IAAI/jB,GAAS,EAEb,MAAM2D,EAAS,GAEf,IAAIqgB,EACJ,OAAShkB,EAAQgjB,EAAO/iB,QAAQ,CAC9B,MAAMkjB,EAAQH,EAAOhjB,GAErB,IAAIS,EACJ,GAAqB,iBAAV0iB,EACT1iB,EAAQ0iB,OAER,OAAQA,GACN,KAAM,EACJ1iB,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,OACR,MAEF,KAAM,EACJA,EAAQsjB,EAAa,IAAM,KAC3B,MAEF,KAAM,EACJ,IAAKA,GAAcC,EAAO,SAC1BvjB,EAAQ,IACR,MAEF,QAEEA,EAAQuL,OAAO0D,aAAayT,GAGlCa,GAAmB,IAAXb,EACRxf,EAAOoC,KAAKtF,EACb,CACD,OAAOkD,EAAON,KAAK,GACrB,CAlbW4gB,CAAgB7Q,EAAYvC,GAAQkT,EAC5C,EA9CCpR,MACAU,WAkEF,SAAoB5S,GAClB8iB,EAAY9iB,EAAMG,MAAQH,EAAMI,OAChC4iB,GACD,EApECnQ,MAsBF,SAAenT,GAKb,GAJA6iB,EAASjd,EAAKid,EAAQ7iB,GACtB+jB,IAGkC,OAA9BlB,EAAOA,EAAO/iB,OAAS,GACzB,MAAO,GAMT,OAJA4jB,EAAUP,EAAY,GAGtBzP,EAAQhC,OAAS+B,GAAW4P,EAAsB3P,EAAQhC,OAAQgC,GAC3DA,EAAQhC,MAChB,GA3BD,IAAI8D,EAAQ2N,EAAWhT,SAASpJ,KAAK2M,EAASjE,GAW9C,OAHI0T,EAAW1P,YACb4P,EAAqBzd,KAAKud,GAErBzP,EA4BP,SAAST,EAAYvC,GACnB,OA8VJ,SAAqBmS,EAAQnS,GAC3B,MAAMsT,EAAatT,EAAM9P,MAAMqiB,OACzBgB,EAAmBvT,EAAM9P,MAAMgU,aAC/BsP,EAAWxT,EAAM7P,IAAIoiB,OACrBkB,EAAiBzT,EAAM7P,IAAI+T,aAEjC,IAAIwP,EACJ,GAAIJ,IAAeE,EAEjBE,EAAO,CAACvB,EAAOmB,GAAYhkB,MAAMikB,EAAkBE,QAC9C,CAEL,GADAC,EAAOvB,EAAO7iB,MAAMgkB,EAAYE,GAC5BD,GAAoB,EAAG,CACzB,MAAMI,EAAOD,EAAK,GACE,iBAATC,EACTD,EAAK,GAAKC,EAAKrkB,MAAMikB,GAErBG,EAAKE,OAER,CACGH,EAAiB,GAEnBC,EAAKxe,KAAKid,EAAOqB,GAAUlkB,MAAM,EAAGmkB,GAEvC,CACD,OAAOC,CACT,CAxXWG,CAAY1B,EAAQnS,EAC5B,CAGD,SAAS8B,IAEP,MAAM/R,KAACA,EAAIC,OAAEA,EAAM+R,OAAEA,EAAMwQ,OAAEA,EAAMrO,aAAEA,GAAgBpU,EACrD,MAAO,CACLC,OACAC,SACA+R,SACAwQ,SACArO,eAEH,CAsBD,SAASmP,IAEP,IAAIS,EACJ,KAAOhkB,EAAMyiB,OAASJ,EAAO/iB,QAAQ,CACnC,MAAMkjB,EAAQH,EAAOriB,EAAMyiB,QAG3B,GAAqB,iBAAVD,EAKT,IAJAwB,EAAahkB,EAAMyiB,OACfziB,EAAMoU,aAAe,IACvBpU,EAAMoU,aAAe,GAGrBpU,EAAMyiB,SAAWuB,GACjBhkB,EAAMoU,aAAeoO,EAAMljB,QAE3B2kB,EAAGzB,EAAMxgB,WAAWhC,EAAMoU,oBAG5B6P,EAAGzB,EAEN,CACF,CAQD,SAASyB,EAAGxhB,GAGVuS,EAAQA,EAAMvS,EACf,CAsED,SAAS0gB,EAAkBe,EAAGze,GAC5BA,EAAK0e,SACN,CAQD,SAASnB,EAAiBoB,EAAUrB,GAClC,OAWA,SAAclV,EAAY4P,EAAa4G,GAErC,IAAIC,EAEAC,EAEAjT,EAEA7L,EACJ,OAAOa,MAAMF,QAAQyH,GACjB2W,EAAuB3W,GACvB,aAAcA,EAEd2W,EAAuB,CAAC3W,IAS5B,SAA+B7I,GAC7B,OAAO5E,EAGP,SAASA,EAAMqC,GACb,MAAMgiB,EAAe,OAAThiB,GAAiBuC,EAAIvC,GAC3BsK,EAAe,OAATtK,GAAiBuC,EAAI+N,KAOjC,OAAOyR,EANM,IAGPle,MAAMF,QAAQqe,GAAOA,EAAMA,EAAM,CAACA,GAAO,MACzCne,MAAMF,QAAQ2G,GAAOA,EAAMA,EAAM,CAACA,GAAO,IAExCyX,CAA6B/hB,EACrC,CACF,CAvBGiiB,CAAsB7W,GA+B1B,SAAS2W,EAAuBtX,GAG9B,OAFAoX,EAAmBpX,EACnBqX,EAAiB,EACG,IAAhBrX,EAAK5N,OACA+kB,EAEFM,EAAgBzX,EAAKqX,GAC7B,CAQD,SAASI,EAAgB1B,GACvB,OAGA,SAAexgB,GAKbgD,EAwER,WACE,MAAMmf,EAAa5S,IACb6S,EAAgB3R,EAAQjD,SACxB6U,EAAwB5R,EAAQ5B,iBAChCyT,EAAmB7R,EAAQhC,OAAO5R,OAClC0lB,EAAa1e,MAAMgH,KAAKrM,GAC9B,MAAO,CACLkjB,UACA7W,KAAMyX,GAQR,SAASZ,IACPnkB,EAAQ4kB,EACR1R,EAAQjD,SAAW4U,EACnB3R,EAAQ5B,iBAAmBwT,EAC3B5R,EAAQhC,OAAO5R,OAASylB,EACxB9jB,EAAQ+jB,EACRlC,GACD,CACF,CAhGcmC,GACP3T,EAAmB2R,EACdA,EAAUnO,UACb5B,EAAQ5B,iBAAmB2R,GAK7B,GACEA,EAAUliB,MACVmS,EAAQpD,OAAOjC,WAAWiF,QAAQC,KAAK7N,SAAS+d,EAAUliB,MAE1D,OAAO8R,IAET,OAAOoQ,EAAUtT,SAASpJ,KAIxBwc,EAASjd,OAAO4E,OAAO5E,OAAOof,OAAOhS,GAAU6P,GAAU7P,EACzDjE,EACAC,EACA2D,EAPKoQ,CAQLxgB,EACH,CACF,CAGD,SAASyM,EAAGzM,GAGV,OADA2hB,EAAS9S,EAAkB7L,GACpBgY,CACR,CAGD,SAAS5K,EAAIpQ,GAGX,OADAgD,EAAK0e,YACCI,EAAiBD,EAAiBhlB,OAC/BqlB,EAAgBL,EAAiBC,IAEnCF,CACR,CACF,CACF,CAOD,SAASnB,EAAUD,EAAW3V,GACxB2V,EAAUhQ,aAAe4P,EAAqB3d,SAAS+d,IACzDJ,EAAqBzd,KAAK6d,GAExBA,EAAUrX,SACZqB,EACEiG,EAAQhC,OACR5D,EACA4F,EAAQhC,OAAO5R,OAASgO,EACxB2V,EAAUrX,QAAQsH,EAAQhC,OAAO1R,MAAM8N,GAAO4F,IAG9C+P,EAAU1F,YACZrK,EAAQhC,OAAS+R,EAAU1F,UAAUrK,EAAQhC,OAAQgC,GAExD,CAuCD,SAAS4P,IACH9iB,EAAMC,QAAQ2iB,GAAe5iB,EAAME,OAAS,IAC9CF,EAAME,OAAS0iB,EAAY5iB,EAAMC,MACjCD,EAAMiS,QAAU2Q,EAAY5iB,EAAMC,MAAQ,EAE7C,CACH,CChdO,MAAMmQ,GAAW,CACtB,GAAMlD,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAM6H,IAIKhF,GAAiB,CAC5B,GAAMuK,IAIKqH,GAAc,CACzB,EAAE,GAAI5K,GACN,EAAE,GAAIA,GACN,GAAMA,IAIK5E,GAAO,CAClB,GAAMgJ,GACN,GAAMsF,GACN,GAAM,CAACc,GAAiBd,IACxB,GAAMlF,GACN,GAAMgG,GACN,GAAMd,GACN,GAAM5K,GACN,IAAOA,IAIIkM,GAAS,CACpB,GAAMxM,GACN,GAAMJ,IAIKtB,GAAO,CAClB,EAAE,GAAI2M,GACN,EAAE,GAAIA,GACN,EAAE,GAAIA,GACN,GAAMF,GACN,GAAM/K,GACN,GAAMpC,GACN,GAAM,CAACkB,GAAUmJ,IACjB,GAAM+C,GACN,GAAM,CAACrF,GAAiB/F,IACxB,GAAM6J,GACN,GAAM7L,GACN,GAAMgE,IAIKhD,GAAa,CACxBpB,KAAM,CAACI,GAAWgS,6EAIY,CAC9BpS,KAAM,CAAC,GAAI,+BAIU,CACrBA,KAAM,8GCpFD,SAAS/H,GAAMvG,GACpB,MACMoJ,E1CHD,SAA2BuX,GAEhC,MAAMrY,EAAM,CAAE,EACd,IAAI1N,GAAS,EAEb,OAASA,EAAQ+lB,EAAW9lB,QAC1BkO,EAAgBT,EAAKqY,EAAW/lB,IAGlC,OAAO0N,CACT,C0CLIsY,CAAkB,CAACC,OAHJ7gB,GAAW,CAAE,GAGuB2gB,YAAc,KAG7DtV,EAAS,CACbgL,QAAS,GACT/I,KAAM,CAAE,EACRlE,aACA6B,QAASwV,EAAOxV,IAChBU,SAAU8U,EAAO9U,IACjB+B,KAAM+S,EAAO/S,IACb4P,OAAQmD,EAAOnD,IACflO,KAAMqR,EAAOrR,KAEf,OAAO/D,EAKP,SAASoV,EAAOxD,GACd,OAEA,SAAiBpU,GACf,OAAOoV,GAAgB5S,EAAQ4R,EAASpU,EACzC,CACF,CACH,CClCA,MAAMiY,GAAS,cCDR,SAASC,GAAgC1lB,EAAOwJ,GACrD,MAAM7G,EAAO2H,OAAOqb,SAAS3lB,EAAOwJ,GACpC,OAEE7G,EAAO,GACE,KAATA,GACCA,EAAO,IAAMA,EAAO,IAEpBA,EAAO,KAAOA,EAAO,KAErBA,EAAO,OAASA,EAAO,OAEvBA,EAAO,OAASA,EAAO,SACL,OAAlBA,IACkB,QAAX,MAAPA,IAEDA,EAAO,QAEA,IAEF4I,OAAO0D,aAAatM,EAC7B,CCjCA,MAAMijB,GACJ,oEAwBF,SAASC,GAAOC,EAAIC,EAAIC,GACtB,GAAID,EAEF,OAAOA,EAKT,GAAa,KADAC,EAAG9jB,WAAW,GACV,CACf,MAAM6hB,EAAOiC,EAAG9jB,WAAW,GACrB+jB,EAAe,MAATlC,GAAyB,KAATA,EAC5B,OAAO2B,GAAgCM,EAAGtmB,MAAMumB,EAAM,EAAI,GAAIA,EAAM,GAAK,GAC1E,CACD,OAAOzQ,GAA8BwQ,IAAOF,CAC9C,CCkHA,MAAM9b,GAAM,CAAE,EAAC/D,eAYFigB,GAcX,SAAUlmB,EAAO0F,EAAUf,GAKzB,MAJwB,iBAAbe,IACTf,EAAUe,EACVA,OAAW3E,GAcjB,SAAkB4D,GAEhB,MAAMwhB,EAAS,CACbC,WAAY,GACZC,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,UACjE7W,MAAO,CACL+E,SAAU+R,EAAOC,IACjBC,iBAAkBC,EAClBC,cAAeD,EACfE,WAAYL,EAAO3E,IACnB1M,WAAYqR,EAAOrR,GACnBI,gBAAiBoR,EACjBhR,mBAAoBgR,EACpB1Q,WAAYuQ,EAAOM,GACnBC,oBAAqBhiB,EACrBiiB,oBAAqBjiB,EACrBoS,aAAcqP,EAAOM,EAAU/hB,GAC/BwS,SAAUiP,EAAOjP,EAAUxS,GAC3BkiB,aAAcN,EACd3hB,KAAM2hB,EACNO,cAAeP,EACfjM,WAAY8L,EAAO9L,GACnByM,4BAA6BpiB,EAC7BqiB,sBAAuBriB,EACvBsiB,sBAAuBtiB,EACvBuiB,SAAUd,EAAOc,IACjBhM,gBAAiBkL,EAAOe,IACxBC,kBAAmBhB,EAAOe,IAC1B5L,SAAU6K,EAAOiB,GAAM1iB,GACvB2iB,aAAcf,EACd/I,SAAU4I,EAAOiB,GAAM1iB,GACvB4iB,aAAchB,EACdiB,MAAOpB,EAAOoB,IACd7H,MAAOhb,EACP0hB,KAAMD,EAAOC,IACboB,SAAUrB,EAAOqB,IACjBC,cAAeC,EACfC,YAAaxB,EAAOlZ,GAAM2a,GAC1BC,cAAe1B,EAAOlZ,IACtBsU,UAAW4E,EAAO5E,IAClBuG,UAAWC,EACXC,gBAAiBtjB,EACjBujB,0BAA2BvjB,EAC3BwjB,oBAAqBxjB,EACrByjB,cAAehC,EAAO3E,IACtB4G,OAAQjC,EAAOiC,IACf5H,cAAe2F,EAAO3F,KAExBhR,KAAM,CACJgX,WAAY6B,IACZC,mBAAoBC,EACpBnU,SAAUiU,IACV9B,cAAeiC,EACfnC,iBAAkBoC,EAClB3T,WAAYuT,IACZK,qBAAsBC,EACtBC,oCAAqCC,EACrCC,gCAAiCD,EACjCE,wBAAyBC,EACzBpT,WAAYyS,EAAOY,GACnBC,gBAAiBC,EACjBzC,oBAAqB0C,EACrBzC,oBAAqB0C,EACrBxC,cAAe8B,EACf7R,aAAcuR,EAAOiB,GACrBpS,SAAUmR,EAAOkB,GACjB3C,aAAc+B,EACdhkB,KAAMgkB,EACNtO,WAAYgO,IACZvB,4BAA6B0C,EAC7BzC,sBAAuB0C,EACvBzC,sBAAuB0C,EACvBzC,SAAUoB,IACVpN,gBAAiBoN,EAAOsB,GACxBxC,kBAAmBkB,EAAOsB,GAC1BrO,SAAU+M,EAAOuB,GACjBvC,aAAcsB,EACdpL,SAAU8K,EAAOwB,GACjBvC,aAAcqB,EACdpB,MAAOc,EAAOyB,GACdpK,MAAOqK,EACPC,UAAWC,EACX1J,WAAY2J,EACZ9D,KAAMiC,EAAO8B,GACb3C,SAAUa,IACVV,YAAaU,IACbR,cAAeQ,IACf9G,UAAW8G,IACXL,gBAAiBoC,EACjBnC,0BAA2BoC,EAC3BnC,oBAAqBoC,EACrBC,SAAUC,EACVrC,cAAeE,EAAOoC,GACtBC,0BAA2BC,EAC3BC,kBAAmBC,EACnBzC,OAAQC,IACR7H,cAAe6H,MAGnByC,GAAU9E,GAASxhB,GAAW,CAAA,GAAIumB,iBAAmB,IAGrD,MAAMpmB,EAAO,CAAE,EACf,OAAO6G,EAUP,SAASA,EAAQyF,GAEf,IAAIpF,EAAO,CACTQ,KAAM,OACNU,SAAU,IAGZ,MAAMkG,EAAU,CACdjS,MAAO,CAAC6K,GACRmf,WAAY,GACZhF,SACA3W,QACAG,OACA9K,SACAumB,SACAC,UACAC,WAGIC,EAAY,GAClB,IAAIhsB,GAAS,EACb,OAASA,EAAQ6R,EAAO5R,QAGtB,GAC4B,gBAA1B4R,EAAO7R,GAAO,GAAGiN,MACS,kBAA1B4E,EAAO7R,GAAO,GAAGiN,KAEjB,GAAyB,UAArB4E,EAAO7R,GAAO,GAChBgsB,EAAUjmB,KAAK/F,OACV,CAELA,EAAQisB,EAAYpa,EADPma,EAAU/iB,MACWjJ,EACnC,CAIL,IADAA,GAAS,IACAA,EAAQ6R,EAAO5R,QAAQ,CAC9B,MAAMisB,EAAUtF,EAAO/U,EAAO7R,GAAO,IACjCyK,GAAIvD,KAAKglB,EAASra,EAAO7R,GAAO,GAAGiN,OACrCif,EAAQra,EAAO7R,GAAO,GAAGiN,MAAM/F,KAC7BT,OAAO4E,OACL,CACEuJ,eAAgB/C,EAAO7R,GAAO,GAAG4U,gBAEnCf,GAEFhC,EAAO7R,GAAO,GAGnB,CAGD,GAAI6T,EAAQ+X,WAAW3rB,OAAS,EAAG,CACjC,MAAM+W,EAAOnD,EAAQ+X,WAAW/X,EAAQ+X,WAAW3rB,OAAS,IAC5C+W,EAAK,IAAMmV,IACnBjlB,KAAK2M,OAASrS,EAAWwV,EAAK,GACvC,CA0BD,IAvBAvK,EAAK/L,SAAW,CACdK,MAAOJ,GACLkR,EAAO5R,OAAS,EACZ4R,EAAO,GAAG,GAAG9Q,MACb,CACEH,KAAM,EACNC,OAAQ,EACR+R,OAAQ,IAGhB5R,IAAKL,GACHkR,EAAO5R,OAAS,EACZ4R,EAAOA,EAAO5R,OAAS,GAAG,GAAGe,IAC7B,CACEJ,KAAM,EACNC,OAAQ,EACR+R,OAAQ,KAMlB5S,GAAS,IACAA,EAAQ4mB,EAAOC,WAAW5mB,QACjCwM,EAAOma,EAAOC,WAAW7mB,GAAOyM,IAASA,EAE3C,OAAOA,CACR,CAQD,SAASwf,EAAYpa,EAAQ9Q,EAAOd,GAClC,IAIImoB,EAEA/P,EAEA+T,EAEA5K,EAVAxhB,EAAQe,EAAQ,EAChBsrB,GAAoB,EACpBC,GAAa,EASjB,OAAStsB,GAASC,GAAQ,CACxB,MAAMmY,EAAQvG,EAAO7R,GAmCrB,GAjCoB,kBAAlBoY,EAAM,GAAGnL,MACS,gBAAlBmL,EAAM,GAAGnL,MACS,eAAlBmL,EAAM,GAAGnL,MAEQ,UAAbmL,EAAM,GACRiU,IAEAA,IAEF7K,OAAWhgB,GACgB,oBAAlB4W,EAAM,GAAGnL,KACD,UAAbmL,EAAM,MAENgQ,GACC5G,GACA6K,GACAD,IAEDA,EAAsBpsB,GAExBwhB,OAAWhgB,GAGK,eAAlB4W,EAAM,GAAGnL,MACS,kBAAlBmL,EAAM,GAAGnL,MACS,mBAAlBmL,EAAM,GAAGnL,MACS,mBAAlBmL,EAAM,GAAGnL,MACS,6BAAlBmL,EAAM,GAAGnL,OAITuU,OAAWhgB,IAGT6qB,GACa,UAAbjU,EAAM,IACY,mBAAlBA,EAAM,GAAGnL,OACY,IAAtBof,GACc,SAAbjU,EAAM,KACa,kBAAlBA,EAAM,GAAGnL,MACU,gBAAlBmL,EAAM,GAAGnL,MACb,CACA,GAAImb,EAAU,CACZ,IAAImE,EAAYvsB,EAEhB,IADAqY,OAAY7W,EACL+qB,KAAa,CAClB,MAAMC,EAAY3a,EAAO0a,GACzB,GACwB,eAAtBC,EAAU,GAAGvf,MACS,oBAAtBuf,EAAU,GAAGvf,KACb,CACA,GAAqB,SAAjBuf,EAAU,GAAe,SACzBnU,IACFxG,EAAOwG,GAAW,GAAGpL,KAAO,kBAC5Bqf,GAAa,GAEfE,EAAU,GAAGvf,KAAO,aACpBoL,EAAYkU,CAC1B,MAAmB,GACiB,eAAtBC,EAAU,GAAGvf,MACS,qBAAtBuf,EAAU,GAAGvf,MACS,+BAAtBuf,EAAU,GAAGvf,MACS,qBAAtBuf,EAAU,GAAGvf,MACS,mBAAtBuf,EAAU,GAAGvf,KAIb,KAEH,CAECmf,KACE/T,GAAa+T,EAAsB/T,KAErC+P,EAASqE,SAAU,GAIrBrE,EAASpnB,IAAMyF,OAAO4E,OACpB,CAAE,EACFgN,EAAYxG,EAAOwG,GAAW,GAAGtX,MAAQqX,EAAM,GAAGpX,KAEpD6Q,EAAOjE,OAAOyK,GAAarY,EAAO,EAAG,CAAC,OAAQooB,EAAUhQ,EAAM,KAC9DpY,IACAC,GACD,CAGqB,mBAAlBmY,EAAM,GAAGnL,OACXmb,EAAW,CACTnb,KAAM,WACNwf,SAAS,EACT1rB,MAAO0F,OAAO4E,OAAO,CAAA,EAAI+M,EAAM,GAAGrX,OAElCC,SAAKQ,GAGPqQ,EAAOjE,OAAO5N,EAAO,EAAG,CAAC,QAASooB,EAAUhQ,EAAM,KAClDpY,IACAC,IACAmsB,OAAsB5qB,EACtBggB,GAAW,EAEd,CACF,CAED,OADA3P,EAAO9Q,GAAO,GAAG0rB,QAAUH,EACpBrsB,CACR,CAcD,SAAS6rB,EAAQ1kB,EAAK3G,GACpB8E,EAAK6B,GAAO3G,CACb,CAYD,SAASsrB,EAAQ3kB,GACf,OAAO7B,EAAK6B,EACb,CAYD,SAAS2f,EAAOlB,EAAQ6G,GACtB,OAAOvY,EAOP,SAASA,EAAKtD,GACZZ,EAAM/I,KAAKzF,KAAMokB,EAAOhV,GAAQA,GAC5B6b,GAAKA,EAAIxlB,KAAKzF,KAAMoP,EACzB,CACF,CAMD,SAASvL,IACP7D,KAAKG,MAAMmE,KAAK,CACdkH,KAAM,WACNU,SAAU,IAEb,CAgBD,SAASsC,EAAMhE,EAAM4E,EAAO8b,GAU1B,OATelrB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAEvC0N,SAAS5H,KAAKkG,GACrBxK,KAAKG,MAAMmE,KAAKkG,GAChBxK,KAAKmqB,WAAW7lB,KAAK,CAAC8K,EAAO8b,IAE7B1gB,EAAKvL,SAAW,CACdK,MAAOJ,GAAMkQ,EAAM9P,QAEdkL,CACR,CAUD,SAASgd,EAAOyD,GACd,OAAOtY,EAOP,SAASA,EAAMvD,GACT6b,GAAKA,EAAIxlB,KAAKzF,KAAMoP,GACxBT,EAAKlJ,KAAKzF,KAAMoP,EACjB,CACF,CAYD,SAAST,EAAKS,EAAO+b,GACnB,MAAM3gB,EAAOxK,KAAKG,MAAMqH,MAClBkL,EAAO1S,KAAKmqB,WAAW3iB,MAC7B,IAAKkL,EACH,MAAM,IAAIjT,MACR,iBACE2P,EAAM5D,KACN,MACAzM,EAAkB,CAChBO,MAAO8P,EAAM9P,MACbC,IAAK6P,EAAM7P,MAEb,oBAEC,GAAImT,EAAK,GAAGlH,OAAS4D,EAAM5D,KAChC,GAAI2f,EACFA,EAAY1lB,KAAKzF,KAAMoP,EAAOsD,EAAK,QAC9B,EACWA,EAAK,IAAMgY,IACnBjlB,KAAKzF,KAAMoP,EAAOsD,EAAK,GAChC,CAGH,OADAlI,EAAKvL,SAASM,IAAML,GAAMkQ,EAAM7P,KACzBiL,CACR,CAMD,SAAS4f,IACP,OhDlpBG,SAAkBprB,EAAO2E,GAC9B,MAAM6F,EAAW7F,GAAWiI,EAQ5B,OAAOC,EAAI7M,EAN2B,kBAA7BwK,EAASsC,iBACZtC,EAASsC,gBAGmB,kBAAzBtC,EAASuC,aAA4BvC,EAASuC,YAGzD,CgDwoBWtH,CAASzE,KAAKG,MAAMqH,MAC5B,CAUD,SAASuf,IACPsD,EAAQ,+BAA+B,EACxC,CAMD,SAASxD,EAAqBzX,GAC5B,GAAIkb,EAAQ,+BAAgC,CACzBtqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCc,MAAQgK,OAAOqb,SAAS3kB,KAAKmT,eAAe/D,GAAQ,IAC7Dib,EAAQ,8BACT,CACF,CAMD,SAAS9B,IACP,MAAMzkB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvC4sB,KAAOtnB,CACb,CAMD,SAAS0kB,IACP,MAAM1kB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCqX,KAAO/R,CACb,CAMD,SAASwkB,IAEHgC,EAAQ,oBACZtqB,KAAK6D,SACLwmB,EAAQ,kBAAkB,GAC3B,CAMD,SAASjC,IACP,MAAMtkB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCQ,MAAQ8E,EAAKwV,QAAQ,2BAA4B,IACtD+Q,EAAQ,iBACT,CAMD,SAAS5B,IACP,MAAM3kB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCQ,MAAQ8E,EAAKwV,QAAQ,eAAgB,GAC3C,CAMD,SAASsP,EAA4BxZ,GACnC,MAAMyP,EAAQ7e,KAAKoqB,SACb5f,EAAOxK,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAC5CgM,EAAKqU,MAAQA,EACbrU,EAAKiP,WAAaJ,GAChBrZ,KAAKmT,eAAe/D,IACpBzQ,aACH,CAMD,SAASkqB,IACP,MAAM/kB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvC6sB,MAAQvnB,CACd,CAMD,SAAS6kB,IACP,MAAM7kB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCP,IAAM6F,CACZ,CAMD,SAAS4jB,EAAyBtY,GAChC,MAAM5E,EAAOxK,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAC5C,IAAKgM,EAAK8gB,MAAO,CACf,MAAMA,EAAQtrB,KAAKmT,eAAe/D,GAAO5Q,OACzCgM,EAAK8gB,MAAQA,CACd,CACF,CAMD,SAAStB,IACPK,EAAQ,gCAAgC,EACzC,CAMD,SAASP,EAAgC1a,GAC1BpP,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvC8sB,MAAqD,KAA7CtrB,KAAKmT,eAAe/D,GAAOlO,WAAW,GAAY,EAAI,CACpE,CAMD,SAAS0oB,IACPS,EAAQ,+BACT,CAOD,SAAS5E,EAAYrW,GACnB,MAAM5E,EAAOxK,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAC5C,IAAI+W,EAAO/K,EAAK0B,SAAS1B,EAAK0B,SAAS1N,OAAS,GAC3C+W,GAAsB,SAAdA,EAAK/J,OAEhB+J,EAAOxC,KAEPwC,EAAKtW,SAAW,CACdK,MAAOJ,GAAMkQ,EAAM9P,QAGrBkL,EAAK0B,SAAS5H,KAAKiR,IAErBvV,KAAKG,MAAMmE,KAAKiR,EACjB,CAOD,SAASuS,EAAW1Y,GAClB,MAAMmG,EAAOvV,KAAKG,MAAMqH,MACxB+N,EAAKvW,OAASgB,KAAKmT,eAAe/D,GAClCmG,EAAKtW,SAASM,IAAML,GAAMkQ,EAAM7P,IACjC,CAOD,SAAS8pB,EAAiBja,GACxB,MAAMgD,EAAUpS,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAE/C,GAAI8rB,EAAQ,eAAgB,CAI1B,OAHalY,EAAQlG,SAASkG,EAAQlG,SAAS1N,OAAS,GACnDS,SAASM,IAAML,GAAMkQ,EAAM7P,UAChC8qB,EAAQ,cAET,EAEEC,EAAQ,iCACTnF,EAAOE,eAAejhB,SAASgO,EAAQ5G,QAEvCia,EAAYhgB,KAAKzF,KAAMoP,GACvB0Y,EAAWriB,KAAKzF,KAAMoP,GAEzB,CAOD,SAAS0Z,IACPuB,EAAQ,eAAe,EACxB,CAOD,SAAStB,IACP,MAAMjlB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCQ,MAAQ8E,CACd,CAOD,SAASklB,IACP,MAAMllB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCQ,MAAQ8E,CACd,CAOD,SAAS4kB,IACP,MAAM5kB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCQ,MAAQ8E,CACd,CAOD,SAASwlB,IACP,MAAM9e,EAAOxK,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAI5C,GAAI8rB,EAAQ,eAAgB,CAE1B,MAAMiB,EAAgBjB,EAAQ,kBAAoB,WAClD9f,EAAKgB,MAAQ,YAEbhB,EAAK+gB,cAAgBA,SAEd/gB,EAAKvM,WACLuM,EAAK6gB,KAClB,aAEa7gB,EAAKiP,kBAELjP,EAAKqU,MAEdwL,EAAQ,gBACT,CAOD,SAASpB,IACP,MAAMze,EAAOxK,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAI5C,GAAI8rB,EAAQ,eAAgB,CAE1B,MAAMiB,EAAgBjB,EAAQ,kBAAoB,WAClD9f,EAAKgB,MAAQ,YAEbhB,EAAK+gB,cAAgBA,SAEd/gB,EAAKvM,WACLuM,EAAK6gB,KAClB,aAEa7gB,EAAKiP,kBAELjP,EAAKqU,MAEdwL,EAAQ,gBACT,CAOD,SAASjB,EAAgBha,GACvB,MAAM6R,EAASjhB,KAAKmT,eAAe/D,GAC7Boc,EAAWxrB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAGhDgtB,EAAS3M,MDp9BN,SAAsB7f,GAC3B,OAAOA,EAAMsa,QAAQsL,GAA4BC,GACnD,CCk9BqB4G,CAAaxK,GAE9BuK,EAAS/R,WAAaJ,GAAoB4H,GAAQtiB,aACnD,CAOD,SAASuqB,IACP,MAAMwC,EAAW1rB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAC1CQ,EAAQgB,KAAKoqB,SACb5f,EAAOxK,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAG5C,GADA6rB,EAAQ,eAAe,GACL,SAAd7f,EAAKgB,KAAiB,CAGxB,MAAMU,EAAWwf,EAASxf,SAC1B1B,EAAK0B,SAAWA,CACtB,MACM1B,EAAKwB,IAAMhN,CAEd,CAOD,SAASwqB,IACP,MAAM1lB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCP,IAAM6F,CACZ,CAOD,SAAS2lB,IACP,MAAM3lB,EAAO9D,KAAKoqB,SACLpqB,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvC6sB,MAAQvnB,CACd,CAOD,SAAS6lB,IACPU,EAAQ,cACT,CAOD,SAASnD,IACPmD,EAAQ,gBAAiB,YAC1B,CAOD,SAASd,EAAsBna,GAC7B,MAAMyP,EAAQ7e,KAAKoqB,SACb5f,EAAOxK,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GAG5CgM,EAAKqU,MAAQA,EAEbrU,EAAKiP,WAAaJ,GAChBrZ,KAAKmT,eAAe/D,IACpBzQ,cACF0rB,EAAQ,gBAAiB,OAC1B,CAOD,SAASrC,EAA+B5Y,GACtCib,EAAQ,yBAA0Bjb,EAAM5D,KACzC,CAMD,SAAS2c,EAA8B/Y,GACrC,MAAMtL,EAAO9D,KAAKmT,eAAe/D,GAC3B5D,EAAO8e,EAAQ,0BAErB,IAAItrB,EACJ,GAAIwM,EACFxM,EAAQ0lB,GACN5gB,EACS,oCAAT0H,EAA6C,GAAK,IAEpD6e,EAAQ,8BACH,CAELrrB,EADewV,GAA8B1Q,EAE9C,CACD,MAAMyR,EAAOvV,KAAKG,MAAMqH,MACxB+N,EAAKvW,OAASA,EACduW,EAAKtW,SAASM,IAAML,GAAMkQ,EAAM7P,IACjC,CAMD,SAASqoB,EAAuBxY,GAC9B0Y,EAAWriB,KAAKzF,KAAMoP,GACTpP,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCP,IAAM+B,KAAKmT,eAAe/D,EAChC,CAMD,SAASuY,EAAoBvY,GAC3B0Y,EAAWriB,KAAKzF,KAAMoP,GACTpP,KAAKG,MAAMH,KAAKG,MAAM3B,OAAS,GACvCP,IAAM,UAAY+B,KAAKmT,eAAe/D,EAC5C,CAOD,SAAS6E,IACP,MAAO,CACLzI,KAAM,aACNU,SAAU,GAEb,CAGD,SAAS0Z,IACP,MAAO,CACLpa,KAAM,OACN4f,KAAM,KACNvV,KAAM,KACN7W,MAAO,GAEV,CAGD,SAASqX,IACP,MAAO,CACL7K,KAAM,aACNxM,MAAO,GAEV,CAGD,SAASwa,IACP,MAAO,CACLhO,KAAM,aACNiO,WAAY,GACZoF,MAAO,KACPwM,MAAO,KACPptB,IAAK,GAER,CAGD,SAASmoB,KACP,MAAO,CACL5a,KAAM,WACNU,SAAU,GAEb,CAGD,SAASyU,KAEP,MAAO,CACLnV,KAAM,UACN8f,WAAOvrB,EACPmM,SAAU,GAEb,CAGD,SAASma,KACP,MAAO,CACL7a,KAAM,QAET,CAGD,SAAS+a,KACP,MAAO,CACL/a,KAAM,OACNxM,MAAO,GAEV,CAGD,SAAS0nB,KACP,MAAO,CACLlb,KAAM,QACN6f,MAAO,KACPptB,IAAK,GACL+N,IAAK,KAER,CAGD,SAASuZ,KACP,MAAO,CACL/Z,KAAM,OACN6f,MAAO,KACPptB,IAAK,GACLiO,SAAU,GAEb,CAMD,SAASE,GAAKgD,GACZ,MAAO,CACL5D,KAAM,OACNmgB,QAAwB,gBAAfvc,EAAM5D,KACflM,MAAO,KACPssB,OAAQxc,EAAM4b,QACd9e,SAAU,GAEb,CAMD,SAASya,GAASvX,GAChB,MAAO,CACL5D,KAAM,WACNogB,OAAQxc,EAAM4b,QACda,QAAS,KACT3f,SAAU,GAEb,CAGD,SAASwU,KACP,MAAO,CACLlV,KAAM,YACNU,SAAU,GAEb,CAGD,SAASqb,KACP,MAAO,CACL/b,KAAM,SACNU,SAAU,GAEb,CAGD,SAAS6G,KACP,MAAO,CACLvH,KAAM,OACNxM,MAAO,GAEV,CAGD,SAAS2gB,KACP,MAAO,CACLnU,KAAM,gBAET,CACH,CA3kCWsgB,CAASnoB,EAATmoB,CChLJ,SAAqB1b,GAC1B,MAAQqG,GAAYrG,KAGpB,OAAOA,CACT,CD4KM2b,CACE7hB,GAAMvG,GAAS2L,WAAWuC,MHxK3B,WACL,IAKIma,EALA5sB,EAAS,EACTyE,EAAS,GAETvE,GAAQ,EAGZ,OAGA,SAAsBN,EAAO0F,EAAUnF,GAErC,MAAMgiB,EAAS,GAEf,IAAI0K,EAEAxkB,EAEA2P,EAEA8U,EAEAvqB,EAaJ,IAVA3C,EAAQ6E,EAAS7E,EAAMyF,SAASC,GAChC0S,EAAgB,EAChBvT,EAAS,GACLvE,IAE0B,QAAxBN,EAAMkC,WAAW,IACnBkW,IAEF9X,OAAQS,GAEHqX,EAAgBpY,EAAMR,QAAQ,CAMnC,GALAimB,GAAO0H,UAAY/U,EACnB6U,EAAQxH,GAAO2H,KAAKptB,GACpBktB,EACED,QAAyBlsB,IAAhBksB,EAAM1tB,MAAsB0tB,EAAM1tB,MAAQS,EAAMR,OAC3DmD,EAAO3C,EAAMkC,WAAWgrB,IACnBD,EAAO,CACVpoB,EAAS7E,EAAMN,MAAM0Y,GACrB,KACD,CACD,GAAa,KAATzV,GAAeyV,IAAkB8U,GAAeF,EAClDzK,EAAOjd,MAAM,GACb0nB,OAAmBjsB,OAUnB,OARIisB,IACFzK,EAAOjd,MAAM,GACb0nB,OAAmBjsB,GAEjBqX,EAAgB8U,IAClB3K,EAAOjd,KAAKtF,EAAMN,MAAM0Y,EAAe8U,IACvC9sB,GAAU8sB,EAAc9U,GAElBzV,GACN,KAAK,EACH4f,EAAOjd,KAAK,OACZlF,IACA,MAEF,KAAK,EAGH,IAFAqI,EAA+B,EAAxB4kB,KAAKC,KAAKltB,EAAS,GAC1BmiB,EAAOjd,MAAM,GACNlF,IAAWqI,GAAM8Z,EAAOjd,MAAM,GACrC,MAEF,KAAK,GACHid,EAAOjd,MAAM,GACblF,EAAS,EACT,MAEF,QACE4sB,GAAmB,EACnB5sB,EAAS,EAIfgY,EAAgB8U,EAAc,CAC/B,CAMD,OALI3sB,IACEysB,GAAkBzK,EAAOjd,MAAM,GAC/BT,GAAQ0d,EAAOjd,KAAKT,GACxB0d,EAAOjd,KAAK,OAEPid,CACR,CACH,CG+EwCgL,GAAavtB,EAAO0F,GAAU,KAGnE,EAglCH,SAASxF,GAAMstB,GACb,MAAO,CACLrtB,KAAMqtB,EAAErtB,KACRC,OAAQotB,EAAEptB,OACV+R,OAAQqb,EAAErb,OAEd,CAOA,SAAS8Y,GAAUwC,EAAUnI,GAC3B,IAAI/lB,GAAS,EACb,OAASA,EAAQ+lB,EAAW9lB,QAAQ,CAClC,MAAMQ,EAAQslB,EAAW/lB,GACrBiH,MAAMF,QAAQtG,GAChBirB,GAAUwC,EAAUztB,GAEpB2N,GAAU8f,EAAUztB,EAEvB,CACH,CAOA,SAAS2N,GAAU8f,EAAU9f,GAE3B,IAAIhH,EACJ,IAAKA,KAAOgH,EACV,GAAI3D,GAAIvD,KAAKkH,EAAWhH,GACtB,GAAY,mBAARA,EAA0B,CAC5B,MAAMmH,EAAQH,EAAUhH,GACpBmH,GACF2f,EAAS9mB,GAAKrB,QAAQwI,EAEhC,MAAa,GAAY,eAARnH,EAAsB,CAC/B,MAAMmH,EAAQH,EAAUhH,GACpBmH,GACF2f,EAAS9mB,GAAKrB,QAAQwI,EAEzB,MAAM,GAAY,UAARnH,GAA2B,SAARA,EAAgB,CAC5C,MAAMmH,EAAQH,EAAUhH,GACpBmH,GACF9H,OAAO4E,OAAO6iB,EAAS9mB,GAAMmH,EAEhC,CAGP,CAGA,SAAS4d,GAAe7d,EAAMC,GAC5B,MAAID,EACI,IAAIpN,MACR,iBACEoN,EAAKrB,KACL,MACAzM,EAAkB,CAChBO,MAAOuN,EAAKvN,MACZC,IAAKsN,EAAKtN,MAEZ,0BACAuN,EAAMtB,KACN,MACAzM,EAAkB,CAChBO,MAAOwN,EAAMxN,MACbC,IAAKuN,EAAMvN,MAEb,aAGE,IAAIE,MACR,oCACEqN,EAAMtB,KACN,MACAzM,EAAkB,CAChBO,MAAOwN,EAAMxN,MACbC,IAAKuN,EAAMvN,MAEb,kBAGR,CE31Ce,SAASmtB,GAAY/oB,GAkBlCqB,OAAO4E,OAAO5J,KAAM,CAACiJ,OAhBLkB,IAEd,MAAMX,EAAmCxJ,KAAK8D,KAAK,YAEnD,OAAOohB,GACL/a,EACAnF,OAAO4E,OAAO,GAAIJ,EAAU7F,EAAS,CAInC2gB,WAAYtkB,KAAK8D,KAAK,wBAA0B,GAChDomB,gBAAiBlqB,KAAK8D,KAAK,2BAA6B,QAMhE,CC6BO,SAAS6oB,GAAa3tB,GAE3B,MAAMkD,EAAS,GACf,IAAI3D,GAAS,EACTe,EAAQ,EACRstB,EAAO,EACX,OAASruB,EAAQS,EAAMR,QAAQ,CAC7B,MAAMmD,EAAO3C,EAAMkC,WAAW3C,GAE9B,IAAI+a,EAAU,GAGd,GACW,KAAT3X,GACAyL,EAAkBpO,EAAMkC,WAAW3C,EAAQ,KAC3C6O,EAAkBpO,EAAMkC,WAAW3C,EAAQ,IAE3CquB,EAAO,OAGJ,GAAIjrB,EAAO,IACT,oBAAoBqM,KAAKzD,OAAO0D,aAAatM,MAChD2X,EAAU/O,OAAO0D,aAAatM,SAI7B,GAAIA,EAAO,OAASA,EAAO,MAAO,CACrC,MAAM8F,EAAOzI,EAAMkC,WAAW3C,EAAQ,GAGlCoD,EAAO,OAAS8F,EAAO,OAASA,EAAO,OACzC6R,EAAU/O,OAAO0D,aAAatM,EAAM8F,GACpCmlB,EAAO,GAIPtT,EAAU,GAEb,MAGCA,EAAU/O,OAAO0D,aAAatM,GAE5B2X,IACFpX,EAAOoC,KAAKtF,EAAMN,MAAMY,EAAOf,GAAQsuB,mBAAmBvT,IAC1Dha,EAAQf,EAAQquB,EAAO,EACvBtT,EAAU,IAERsT,IACFruB,GAASquB,EACTA,EAAO,EAEV,CACD,OAAO1qB,EAAON,KAAK,IAAM5C,EAAMN,MAAMY,EACvC,CC/FO,SAASwtB,GAAkB5Y,EAAO1J,GACvC,MAAMuiB,EAAKxiB,OAAOC,EAAKiP,YAAYF,cAC7ByT,EAASL,GAAaI,EAAGpuB,eACzBJ,EAAQ2V,EAAM+Y,cAAc3uB,QAAQyuB,GAE1C,IAAIG,GAEW,IAAX3uB,GACF2V,EAAM+Y,cAAc3oB,KAAKyoB,GACzB7Y,EAAMiZ,eAAeJ,GAAM,EAC3BG,EAAUhZ,EAAM+Y,cAAczuB,SAE9B0V,EAAMiZ,eAAeJ,KACrBG,EAAU3uB,EAAQ,GAGpB,MAAM6uB,EAAelZ,EAAMiZ,eAAeJ,GAGpCxH,EAAO,CACX/Z,KAAM,UACNuP,QAAS,IACTsS,WAAY,CACVrqB,KAAM,IAAMkR,EAAMoZ,cAAgB,MAAQN,EAC1CD,GACE7Y,EAAMoZ,cACN,SACAN,GACCI,EAAe,EAAI,IAAMA,EAAe,IAC3CG,iBAAiB,EACjBC,gBAAiB,CAAC,mBAEpBthB,SAAU,CAAC,CAACV,KAAM,OAAQxM,MAAOuL,OAAO2iB,MAE1ChZ,EAAMuZ,MAAMjjB,EAAM+a,GAGlB,MAAMmI,EAAM,CACVliB,KAAM,UACNuP,QAAS,MACTsS,WAAY,CAAE,EACdnhB,SAAU,CAACqZ,IAGb,OADArR,EAAMuZ,MAAMjjB,EAAMkjB,GACXxZ,EAAMyZ,UAAUnjB,EAAMkjB,EAC/B,CCpCO,SAASE,GAAO1Z,EAAO1J,GAC5B,MAAMqjB,EAAUrjB,EAAK+gB,cACrB,IAAIuC,EAAS,IAQb,GANgB,cAAZD,EACFC,GAAU,KACW,SAAZD,IACTC,GAAU,KAAOtjB,EAAKqU,OAASrU,EAAKiP,YAAc,KAGlC,mBAAdjP,EAAKgB,KACP,MAAO,CAACA,KAAM,OAAQxM,MAAO,KAAOwL,EAAKwB,IAAM8hB,GAGjD,MAAMC,EAAW7Z,EAAMjI,IAAIzB,GACrBuY,EAAOgL,EAAS,GAElBhL,GAAsB,SAAdA,EAAKvX,KACfuX,EAAK/jB,MAAQ,IAAM+jB,EAAK/jB,MAExB+uB,EAASthB,QAAQ,CAACjB,KAAM,OAAQxM,MAAO,MAGzC,MAAMuW,EAAOwY,EAASA,EAASvvB,OAAS,GAQxC,OANI+W,GAAsB,SAAdA,EAAK/J,KACf+J,EAAKvW,OAAS8uB,EAEdC,EAASzpB,KAAK,CAACkH,KAAM,OAAQxM,MAAO8uB,IAG/BC,CACT,CC+DA,SAASC,GAAcxjB,GACrB,MAAMohB,EAASphB,EAAKohB,OAEpB,OAAOA,QACHphB,EAAK0B,SAAS1N,OAAS,EACvBotB,CACN,CCnGO,MAAMqC,GAAa/uB,GAAM,SAUnBgvB,GAAWhvB,GAAM,OAsB9B,SAASA,GAAMsM,GACb,OAQA,SAAehB,GACb,MAAMtL,EAASsL,GAAQA,EAAKvL,UAAYuL,EAAKvL,SAASuM,IAAU,CAAE,EAGlE,MAAO,CAELrM,KAAMD,EAAMC,MAAQ,KAEpBC,OAAQF,EAAME,QAAU,KAExB+R,OAAQjS,EAAMiS,QAAU,EAAIjS,EAAMiS,OAAS,KAE9C,CACH,CCvEO,SAASgd,GAAUnvB,GACxB,MAAMqB,EAASkK,OAAOvL,GAChBylB,EAAS,YACf,IAAIwH,EAAQxH,EAAO2H,KAAK/rB,GACpB+tB,EAAO,EAEX,MAAMC,EAAQ,GAEd,KAAOpC,GACLoC,EAAM/pB,KACJgqB,GAASjuB,EAAO3B,MAAM0vB,EAAMnC,EAAM1tB,OAAQ6vB,EAAO,GAAG,GACpDnC,EAAM,IAGRmC,EAAOnC,EAAM1tB,MAAQ0tB,EAAM,GAAGztB,OAC9BytB,EAAQxH,EAAO2H,KAAK/rB,GAKtB,OAFAguB,EAAM/pB,KAAKgqB,GAASjuB,EAAO3B,MAAM0vB,GAAOA,EAAO,GAAG,IAE3CC,EAAMzsB,KAAK,GACpB,CAYA,SAAS0sB,GAAStvB,EAAOM,EAAOC,GAC9B,IAAImjB,EAAa,EACbE,EAAW5jB,EAAMR,OAErB,GAAIc,EAAO,CACT,IAAIqC,EAAO3C,EAAMuvB,YAAY7L,GAE7B,KApDQ,IAoDD/gB,GAnDG,KAmDaA,GACrB+gB,IACA/gB,EAAO3C,EAAMuvB,YAAY7L,EAE5B,CAED,GAAInjB,EAAK,CACP,IAAIoC,EAAO3C,EAAMuvB,YAAY3L,EAAW,GAExC,KA7DQ,IA6DDjhB,GA5DG,KA4DaA,GACrBihB,IACAjhB,EAAO3C,EAAMuvB,YAAY3L,EAAW,EAEvC,CAED,OAAOA,EAAWF,EAAa1jB,EAAMN,MAAMgkB,EAAYE,GAAY,EACrE,CCxCO,MAAM4L,GAAW,CACtBC,WCbK,SAAoBva,EAAO1J,GAEhC,MAAMtI,EAAS,CACbsJ,KAAM,UACNuP,QAAS,aACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAM9L,KAAK8L,EAAMjI,IAAIzB,IAAO,IAGxC,OADA0J,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EDIEwsB,MEbK,SAAmBxa,EAAO1J,GAE/B,MAAMtI,EAAS,CAACsJ,KAAM,UAAWuP,QAAS,KAAMsS,WAAY,CAAA,EAAInhB,SAAU,IAE1E,OADAgI,EAAMuZ,MAAMjjB,EAAMtI,GACX,CAACgS,EAAMyZ,UAAUnjB,EAAMtI,GAAS,CAACsJ,KAAM,OAAQxM,MAAO,MAC/D,EFSE2C,KGbK,SAAcuS,EAAO1J,GAC1B,MAAMxL,EAAQwL,EAAKxL,MAAQwL,EAAKxL,MAAQ,KAAO,GAGzCosB,EAAO5gB,EAAK4gB,KAAO5gB,EAAK4gB,KAAKa,MAAM,uBAAyB,KAE5DoB,EAAa,CAAE,EAEjBjC,IACFiC,EAAWsB,UAAY,CAAC,YAAcvD,IAKxC,IAAIlpB,EAAS,CACXsJ,KAAM,UACNuP,QAAS,OACTsS,aACAnhB,SAAU,CAAC,CAACV,KAAM,OAAQxM,WAa5B,OAVIwL,EAAKqL,OACP3T,EAAO4B,KAAO,CAAC+R,KAAMrL,EAAKqL,OAG5B3B,EAAMuZ,MAAMjjB,EAAMtI,GAClBA,EAASgS,EAAMyZ,UAAUnjB,EAAMtI,GAG/BA,EAAS,CAACsJ,KAAM,UAAWuP,QAAS,MAAOsS,WAAY,GAAInhB,SAAU,CAAChK,IACtEgS,EAAMuZ,MAAMjjB,EAAMtI,GACXA,CACT,EHlBE0sB,OIfK,SAAuB1a,EAAO1J,GAEnC,MAAMtI,EAAS,CACbsJ,KAAM,UACNuP,QAAS,MACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAMjI,IAAIzB,IAGtB,OADA0J,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EJMEkkB,SKjBK,SAAkBlS,EAAO1J,GAE9B,MAAMtI,EAAS,CACbsJ,KAAM,UACNuP,QAAS,KACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAMjI,IAAIzB,IAGtB,OADA0J,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,ELQE4qB,qBACA+B,SMXK,SAAkB3a,EAAO1J,GAC9B,MAAMskB,EAAe5a,EAAM4a,aAC3B,IAAIC,EAAK,EAET,KAAOA,KAAMD,GAAcC,IAE3B,MAAMtV,EAAalP,OAAOwkB,GAS1B,OAPAD,EAAarV,GAAc,CACzBjO,KAAM,qBACNiO,aACAvN,SAAU,CAAC,CAACV,KAAM,YAAaU,SAAU1B,EAAK0B,WAC9CjN,SAAUuL,EAAKvL,UAGV6tB,GAAkB5Y,EAAO,CAC9B1I,KAAM,oBACNiO,aACAxa,SAAUuL,EAAKvL,UAEnB,ENRE0hB,QOpBK,SAAiBzM,EAAO1J,GAE7B,MAAMtI,EAAS,CACbsJ,KAAM,UACNuP,QAAS,IAAMvQ,EAAK8gB,MACpB+B,WAAY,CAAE,EACdnhB,SAAUgI,EAAMjI,IAAIzB,IAGtB,OADA0J,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EPWAqkB,KQnBO,SAAcrS,EAAO1J,GAC1B,GAAI0J,EAAM8a,UAAW,CAEnB,MAAM9sB,EAAS,CAACsJ,KAAM,MAAOxM,MAAOwL,EAAKxL,OAEzC,OADAkV,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC9B,CAGD,OAAO,IACT,ERUE+sB,eSjBK,SAAwB/a,EAAO1J,GACpC,MAAMmZ,EAAMzP,EAAMsF,WAAWhP,EAAKiP,YAElC,IAAKkK,EACH,OAAOiK,GAAO1Z,EAAO1J,GAIvB,MAAM6iB,EAAa,CAAC/mB,IAAKqmB,GAAahJ,EAAI1lB,KAAO,IAAK+N,IAAKxB,EAAKwB,KAE9C,OAAd2X,EAAI0H,YAAgCtrB,IAAd4jB,EAAI0H,QAC5BgC,EAAWhC,MAAQ1H,EAAI0H,OAIzB,MAAMnpB,EAAS,CAACsJ,KAAM,UAAWuP,QAAS,MAAOsS,aAAYnhB,SAAU,IAEvE,OADAgI,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,ETAEwkB,MUpBK,SAAexS,EAAO1J,GAE3B,MAAM6iB,EAAa,CAAC/mB,IAAKqmB,GAAaniB,EAAKvM,MAE1B,OAAbuM,EAAKwB,UAA6BjM,IAAbyK,EAAKwB,MAC5BqhB,EAAWrhB,IAAMxB,EAAKwB,KAGL,OAAfxB,EAAK6gB,YAAiCtrB,IAAfyK,EAAK6gB,QAC9BgC,EAAWhC,MAAQ7gB,EAAK6gB,OAI1B,MAAMnpB,EAAS,CAACsJ,KAAM,UAAWuP,QAAS,MAAOsS,aAAYnhB,SAAU,IAEvE,OADAgI,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EVKEgtB,WWvBK,SAAoBhb,EAAO1J,GAEhC,MAAMuI,EAAO,CAACvH,KAAM,OAAQxM,MAAOwL,EAAKxL,MAAMsa,QAAQ,YAAa,MACnEpF,EAAMuZ,MAAMjjB,EAAMuI,GAGlB,MAAM7Q,EAAS,CACbsJ,KAAM,UACNuP,QAAS,OACTsS,WAAY,CAAE,EACdnhB,SAAU,CAAC6G,IAGb,OADAmB,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EXUEitB,cYpBK,SAAuBjb,EAAO1J,GACnC,MAAMmZ,EAAMzP,EAAMsF,WAAWhP,EAAKiP,YAElC,IAAKkK,EACH,OAAOiK,GAAO1Z,EAAO1J,GAIvB,MAAM6iB,EAAa,CAACrqB,KAAM2pB,GAAahJ,EAAI1lB,KAAO,KAEhC,OAAd0lB,EAAI0H,YAAgCtrB,IAAd4jB,EAAI0H,QAC5BgC,EAAWhC,MAAQ1H,EAAI0H,OAIzB,MAAMnpB,EAAS,CACbsJ,KAAM,UACNuP,QAAS,IACTsS,aACAnhB,SAAUgI,EAAMjI,IAAIzB,IAGtB,OADA0J,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EZFEqjB,KavBK,SAAcrR,EAAO1J,GAE1B,MAAM6iB,EAAa,CAACrqB,KAAM2pB,GAAaniB,EAAKvM,MAEzB,OAAfuM,EAAK6gB,YAAiCtrB,IAAfyK,EAAK6gB,QAC9BgC,EAAWhC,MAAQ7gB,EAAK6gB,OAI1B,MAAMnpB,EAAS,CACbsJ,KAAM,UACNuP,QAAS,IACTsS,aACAnhB,SAAUgI,EAAMjI,IAAIzB,IAGtB,OADA0J,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EbOEykB,SHfK,SAAkBzS,EAAO1J,EAAM4kB,GACpC,MAAMC,EAAUnb,EAAMjI,IAAIzB,GACpB8kB,EAAQF,EAyEhB,SAAmB5kB,GACjB,IAAI8kB,GAAQ,EACZ,GAAkB,SAAd9kB,EAAKgB,KAAiB,CACxB8jB,EAAQ9kB,EAAKohB,SAAU,EACvB,MAAM1f,EAAW1B,EAAK0B,SACtB,IAAI3N,GAAS,EAEb,MAAQ+wB,KAAW/wB,EAAQ2N,EAAS1N,QAClC8wB,EAAQtB,GAAc9hB,EAAS3N,GAElC,CAED,OAAO+wB,CACT,CAtFyBC,CAAUH,GAAUpB,GAAcxjB,GAEnD6iB,EAAa,CAAE,EAEfnhB,EAAW,GAEjB,GAA4B,kBAAjB1B,EAAKqhB,QAAuB,CACrC,MAAM9I,EAAOsM,EAAQ,GAErB,IAAI3O,EAEAqC,GAAsB,YAAdA,EAAKvX,MAAuC,MAAjBuX,EAAKhI,QAC1C2F,EAAYqC,GAEZrC,EAAY,CAAClV,KAAM,UAAWuP,QAAS,IAAKsS,WAAY,CAAA,EAAInhB,SAAU,IACtEmjB,EAAQ5iB,QAAQiU,IAGdA,EAAUxU,SAAS1N,OAAS,GAC9BkiB,EAAUxU,SAASO,QAAQ,CAACjB,KAAM,OAAQxM,MAAO,MAGnD0hB,EAAUxU,SAASO,QAAQ,CACzBjB,KAAM,UACNuP,QAAS,QACTsS,WAAY,CAAC7hB,KAAM,WAAYqgB,QAASrhB,EAAKqhB,QAAS2D,UAAU,GAChEtjB,SAAU,KAKZmhB,EAAWsB,UAAY,CAAC,iBACzB,CAED,IAAIpwB,GAAS,EAEb,OAASA,EAAQ8wB,EAAQ7wB,QAAQ,CAC/B,MAAMixB,EAAQJ,EAAQ9wB,IAIpB+wB,GACU,IAAV/wB,GACe,YAAfkxB,EAAMjkB,MACY,MAAlBikB,EAAM1U,UAEN7O,EAAS5H,KAAK,CAACkH,KAAM,OAAQxM,MAAO,OAGnB,YAAfywB,EAAMjkB,MAAwC,MAAlBikB,EAAM1U,SAAoBuU,EAGxDpjB,EAAS5H,KAAKmrB,GAFdvjB,EAAS5H,QAAQmrB,EAAMvjB,SAI1B,CAED,MAAMqJ,EAAO8Z,EAAQA,EAAQ7wB,OAAS,GAGlC+W,IAAS+Z,GAAuB,YAAd/Z,EAAK/J,MAAuC,MAAjB+J,EAAKwF,UACpD7O,EAAS5H,KAAK,CAACkH,KAAM,OAAQxM,MAAO,OAItC,MAAMkD,EAAS,CAACsJ,KAAM,UAAWuP,QAAS,KAAMsS,aAAYnhB,YAE5D,OADAgI,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EGrDEkK,Kc3BK,SAAc8H,EAAO1J,GAE1B,MAAM6iB,EAAa,CAAE,EACfgC,EAAUnb,EAAMjI,IAAIzB,GAC1B,IAAIjM,GAAS,EAOb,IAL0B,iBAAfiM,EAAKlL,OAAqC,IAAfkL,EAAKlL,QACzC+tB,EAAW/tB,MAAQkL,EAAKlL,SAIjBf,EAAQ8wB,EAAQ7wB,QAAQ,CAC/B,MAAMixB,EAAQJ,EAAQ9wB,GAEtB,GACiB,YAAfkxB,EAAMjkB,MACY,OAAlBikB,EAAM1U,SACN0U,EAAMpC,YACN7nB,MAAMF,QAAQmqB,EAAMpC,WAAWsB,YAC/Bc,EAAMpC,WAAWsB,UAAUvqB,SAAS,kBACpC,CACAipB,EAAWsB,UAAY,CAAC,sBACxB,KACD,CACF,CAGD,MAAMzsB,EAAS,CACbsJ,KAAM,UACNuP,QAASvQ,EAAKmhB,QAAU,KAAO,KAC/B0B,aACAnhB,SAAUgI,EAAM9L,KAAKinB,GAAS,IAGhC,OADAnb,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EdPEwe,Ue7BK,SAAmBxM,EAAO1J,GAE/B,MAAMtI,EAAS,CACbsJ,KAAM,UACNuP,QAAS,IACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAMjI,IAAIzB,IAGtB,OADA0J,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EfoBEwtB,KgB7BK,SAAcxb,EAAO1J,GAE1B,MAAMtI,EAAS,CAACsJ,KAAM,OAAQU,SAAUgI,EAAM9L,KAAK8L,EAAMjI,IAAIzB,KAE7D,OADA0J,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EhByBEqlB,OiB/BK,SAAgBrT,EAAO1J,GAE5B,MAAMtI,EAAS,CACbsJ,KAAM,UACNuP,QAAS,SACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAMjI,IAAIzB,IAGtB,OADA0J,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EjBsBEytB,MkB9BK,SAAezb,EAAO1J,GAC3B,MAAMolB,EAAO1b,EAAMjI,IAAIzB,GACjBqlB,EAAWD,EAAK5M,QAEhB8M,EAAe,GAErB,GAAID,EAAU,CAEZ,MAAM9M,EAAO,CACXvX,KAAM,UACNuP,QAAS,QACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAM9L,KAAK,CAACynB,IAAW,IAEnC3b,EAAMuZ,MAAMjjB,EAAK0B,SAAS,GAAI6W,GAC9B+M,EAAaxrB,KAAKye,EACnB,CAED,GAAI6M,EAAKpxB,OAAS,EAAG,CAEnB,MAAMuxB,EAAO,CACXvkB,KAAM,UACNuP,QAAS,QACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAM9L,KAAKwnB,GAAM,IAGvBtwB,EAAQ2uB,GAAWzjB,EAAK0B,SAAS,IACjC3M,EAAM2uB,GAAS1jB,EAAK0B,SAAS1B,EAAK0B,SAAS1N,OAAS,IACtDc,EAAMH,MAAQI,EAAIJ,OAAM4wB,EAAK9wB,SAAW,CAACK,QAAOC,QACpDuwB,EAAaxrB,KAAKyrB,EACnB,CAGD,MAAM7tB,EAAS,CACbsJ,KAAM,UACNuP,QAAS,QACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAM9L,KAAK0nB,GAAc,IAGrC,OADA5b,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,ElBXE8tB,UmBjCK,SAAmB9b,EAAO1J,GAI/B,MAAMtI,EAAS,CACbsJ,KAAM,UACNuP,QAAS,KACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAMjI,IAAIzB,IAGtB,OADA0J,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EnBsBE+tB,SoBtBK,SAAkB/b,EAAO1J,EAAM4kB,GACpC,MAAMc,EAAWd,EAASA,EAAOljB,cAAWnM,EAGtCgb,EAAuB,KADZmV,EAAWA,EAAS5xB,QAAQkM,GAAQ,GACpB,KAAO,KAClC2lB,EAAQf,GAA0B,UAAhBA,EAAO5jB,KAAmB4jB,EAAOe,WAAQpwB,EAC3DvB,EAAS2xB,EAAQA,EAAM3xB,OAASgM,EAAK0B,SAAS1N,OACpD,IAAI4xB,GAAa,EAEjB,MAAMC,EAAQ,GAEd,OAASD,EAAY5xB,GAAQ,CAE3B,MAAM8xB,EAAO9lB,EAAK0B,SAASkkB,GAErB/C,EAAa,CAAE,EACfkD,EAAaJ,EAAQA,EAAMC,QAAarwB,EAE1CwwB,IACFlD,EAAW8C,MAAQI,GAIrB,IAAIruB,EAAS,CAACsJ,KAAM,UAAWuP,UAASsS,aAAYnhB,SAAU,IAE1DokB,IACFpuB,EAAOgK,SAAWgI,EAAMjI,IAAIqkB,GAC5Bpc,EAAMuZ,MAAM6C,EAAMpuB,GAClBA,EAASgS,EAAMyZ,UAAUnjB,EAAMtI,IAGjCmuB,EAAM/rB,KAAKpC,EACZ,CAGD,MAAMA,EAAS,CACbsJ,KAAM,UACNuP,QAAS,KACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAM9L,KAAKioB,GAAO,IAG9B,OADAnc,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EpBpBE6Q,KqBhCK,SAAcmB,EAAO1J,GAE1B,MAAMtI,EAAS,CAACsJ,KAAM,OAAQxM,MAAOmvB,GAAU5jB,OAAOC,EAAKxL,SAE3D,OADAkV,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,ErB4BEyd,csBpCK,SAAuBzL,EAAO1J,GAEnC,MAAMtI,EAAS,CACbsJ,KAAM,UACNuP,QAAS,KACTsS,WAAY,CAAE,EACdnhB,SAAU,IAGZ,OADAgI,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,EtB2BEsuB,KAAMC,GACNC,KAAMD,GACNjX,WAAYiX,GACZE,mBAAoBF,IAItB,SAASA,KAEP,OAAO,IACT,CuBsGO,MAAMG,GAOb,SAKc5iB,GACR,GAAIA,QACF,OAAOI,GAGT,GAAoB,iBAATJ,EACT,OA8ER,SAAqB6C,GACnB,OAAOggB,GAAYrlB,GAKnB,SAASA,EAAKhB,GACZ,OAAOA,GAAQA,EAAKgB,OAASqF,CAC9B,CACH,CAvFeigB,CAAY9iB,GAGrB,GAAoB,iBAATA,EACT,OAAOxI,MAAMF,QAAQ0I,GAe7B,SAAoB+iB,GAElB,MAAMC,EAAS,GACf,IAAIzyB,GAAS,EAEb,OAASA,EAAQwyB,EAAMvyB,QACrBwyB,EAAOzyB,GAASqyB,GAAQG,EAAMxyB,IAGhC,OAAOsyB,GAAYI,GAOnB,SAASA,KAAOlpB,GACd,IAAIxJ,GAAS,EAEb,OAASA,EAAQyyB,EAAOxyB,QACtB,GAAIwyB,EAAOzyB,GAAOkH,KAAKzF,QAAS+H,GAAa,OAAO,EAGtD,OAAO,CACR,CACH,CAxCqCmpB,CAAWljB,GAgDhD,SAAsB6C,GACpB,OAAOggB,GAAY5kB,GAMnB,SAASA,EAAIzB,GAEX,IAAI7E,EAEJ,IAAKA,KAAOkL,EAEV,GAAIrG,EAAK7E,KAASkL,EAAMlL,GAAM,OAAO,EAGvC,OAAO,CACR,CACH,CAlEwDwrB,CAAanjB,GAG/D,GAAoB,mBAATA,EACT,OAAO6iB,GAAY7iB,GAGrB,MAAM,IAAIvO,MAAM,+CAEnB,EAkFH,SAASoxB,GAAYhgB,GACnB,OAQA,SAAmBrG,KAASzC,GAC1B,OAAO2D,QACLlB,GACkB,iBAATA,GACP,SAAUA,GAEVkB,QAAQmF,EAAMpL,KAAKzF,KAAMwK,KAASzC,IAEvC,CACH,CAEA,SAASqG,KACP,OAAO,CACT,CC5NO,MAAMgjB,IAAW,EAKXC,IAAO,EAoCPC,GAOb,SAQctmB,EAAMgD,EAAMujB,EAASC,GACT,mBAATxjB,GAA0C,mBAAZujB,IACvCC,EAAUD,EAEVA,EAAUvjB,EACVA,EAAO,MAGT,MAAMyjB,EAAKb,GAAQ5iB,GACb0jB,EAAOF,GAAW,EAAI,GAS5B,SAASG,EAAQnnB,EAAMjM,EAAOqzB,GAG5B,MAAM5yB,EAAQwL,GAAwB,iBAATA,EAAoBA,EAAO,CAAE,EAE1D,GAA0B,iBAAfxL,EAAMwM,KAAmB,CAClC,MAAMvL,EAEqB,iBAAlBjB,EAAM+b,QACT/b,EAAM+b,QAEc,iBAAf/b,EAAMiB,KACXjB,EAAMiB,UACNF,EAENiF,OAAOG,eAAe0sB,EAAO,OAAQ,CACnC7yB,MACE,SAAiBwL,EAAKgB,MAAQvL,EAAO,IAAMA,EAAO,IAAM,IAAO,KAEpE,CAED,OAAO4xB,EAEP,SAASA,IAEP,IAEIC,EAEA3gB,EAEA4gB,EANA7vB,EAAS,GAQb,KAAK8L,GAAQyjB,EAAGjnB,EAAMjM,EAAOqzB,EAAQA,EAAQpzB,OAAS,IAAM,SAC1D0D,EA0CZ,SAAkBlD,GAChB,GAAIwG,MAAMF,QAAQtG,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CAACoyB,GAAUpyB,GAGpB,MAAO,CAACA,EACV,CApDqBgzB,CAAST,EAAQ/mB,EAAMonB,IAE5B1vB,EAAO,KAAOmvB,IAChB,OAAOnvB,EAKX,GAAIsI,EAAK0B,UA1GC,SA0GWhK,EAAO,GAO1B,IALAiP,GAAUqgB,EAAUhnB,EAAK0B,SAAS1N,QAAU,GAAKkzB,EAEjDK,EAAeH,EAAQK,OAAOznB,GAGvB2G,GAAU,GAAKA,EAAS3G,EAAK0B,SAAS1N,QAAQ,CAInD,GAFAszB,EAAYH,EAAQnnB,EAAK0B,SAASiF,GAASA,EAAQ4gB,EAAvCJ,GAERG,EAAU,KAAOT,GACnB,OAAOS,EAGT3gB,EAC0B,iBAAjB2gB,EAAU,GAAkBA,EAAU,GAAK3gB,EAASugB,CAC9D,CAGH,OAAOxvB,CACR,CACF,CAvEDyvB,CAAQ3mB,OAAMjL,EAAW,GAAzB4xB,EAyEH,EC9EI,MAAME,GAOb,SAQc7mB,EAAMgD,EAAMujB,EAASC,GACT,mBAATxjB,GAA0C,mBAAZujB,IACvCC,EAAUD,EACVA,EAAUvjB,EACVA,EAAO,MAGTsjB,GAAatmB,EAAMgD,EAMnB,SAAkBxD,EAAMonB,GACtB,MAAMxC,EAASwC,EAAQA,EAAQpzB,OAAS,GACxC,OAAO+yB,EACL/mB,EACA4kB,EAASA,EAAOljB,SAAS5N,QAAQkM,GAAQ,KACzC4kB,EAEH,EAbkCoC,EAezC,EChKA,MAAMxoB,GAAM,CAAE,EAAC/D,eA0Cf,SAASitB,GAAMlzB,GACb,OAAOuL,OAAOvL,GAAS,IAAIua,aAC7B,CCwGA,MAAMvQ,GAAM,CAAE,EAAC/D,eAYR,SAASktB,GAAYnnB,EAAMrH,GAChC,MAAM6F,EAAW7F,GAAW,CAAE,EACxBqrB,EAAYxlB,EAAS4oB,qBAAsB,EAE3CtD,EAAe,CAAE,EA2DvB,OAnDA5a,EAAM8a,UAAYA,EAElB9a,EAAMoZ,mBACuBvtB,IAA3ByJ,EAAS8jB,eAA0D,OAA3B9jB,EAAS8jB,cAC7C,gBACA9jB,EAAS8jB,cAEfpZ,EAAMme,cAAgB7oB,EAAS6oB,eAAiB,YAEhDne,EAAMoe,qBAAuB9oB,EAAS8oB,sBAAwB,KAE9Dpe,EAAMqe,wBAA0B/oB,EAAS+oB,yBAA2B,CAClE5D,UAAW,CAAC,YAGdza,EAAMse,kBAAoBhpB,EAASgpB,mBAAqB,kBAExDte,EAAMue,eAAiBjpB,EAASipB,eAEhCve,EAAMwe,YAAclpB,EAASkpB,YAE7Bxe,EAAMsa,SAAW,IAAIA,MAAahlB,EAASglB,UAI3Cta,EAAMsF,WDxLD,SAAqBxO,GAE1B,MAAM2nB,EAAQ3tB,OAAOof,OAAO,MAE5B,IAAKpZ,IAASA,EAAKQ,KACjB,MAAM,IAAI/L,MAAM,wCAUlB,OAPAoyB,GAAM7mB,EAAM,aAAewO,IACzB,MAAMuT,EAAKmF,GAAM1Y,EAAWC,YACxBsT,IAAO/jB,GAAIvD,KAAKktB,EAAO5F,KACzB4F,EAAM5F,GAAMvT,KAOhB,SAAoBC,GAClB,MAAMsT,EAAKmF,GAAMzY,GAEjB,OAAOsT,GAAM/jB,GAAIvD,KAAKktB,EAAO5F,GAAM4F,EAAM5F,GAAM,IAChD,CACH,CCiKqB6F,CAAY5nB,GAC/BkJ,EAAM4a,aAAeA,EAErB5a,EAAM+Y,cAAgB,GAEtB/Y,EAAMiZ,eAAiB,CAAE,EAEzBjZ,EAAMuZ,MAAQA,GACdvZ,EAAMyZ,UAAYA,GAClBzZ,EAAMrI,IAsGN,SAAkBrB,EAAM4kB,GAEtB,OAAOvjB,GAAIqI,EAAO1J,EAAM4kB,EACzB,EAxGDlb,EAAMjI,IAkHN,SAAkBmjB,GAEhB,OAAOnjB,GAAIiI,EAAOkb,EACnB,EApHDlb,EAAM9L,KAAOA,GAEb8L,EAAM2e,QAAUA,EAEhBhB,GAAM7mB,EAAM,qBAAuBwO,IACjC,MAAMuT,EAAKxiB,OAAOiP,EAAWC,YAAYF,cAIpCvQ,GAAIvD,KAAKqpB,EAAc/B,KAC1B+B,EAAa/B,GAAMvT,KAKhBtF,EAWP,SAAS2e,EAAQhmB,EAAMC,GAErB,GAAID,GAAQ,SAAUA,GAAQA,EAAK/I,KAAM,CAEvC,MAAMA,EAAO+I,EAAK/I,KAEdA,EAAKgvB,QACY,YAAfhmB,EAAMtB,OACRsB,EAAQ,CACNtB,KAAM,UACNuP,QAAS,GACTsS,WAAY,CAAE,EACdnhB,SAAU,KAIdY,EAAMiO,QAAUjX,EAAKgvB,OAGJ,YAAfhmB,EAAMtB,MAAsB1H,EAAKivB,cACnCjmB,EAAMugB,WAAa,IAAIvgB,EAAMugB,cAAevpB,EAAKivB,cAG/C,aAAcjmB,GAASA,EAAMZ,UAAYpI,EAAKkvB,YAChDlmB,EAAMZ,SAAWpI,EAAKkvB,UAEzB,CAED,GAAInmB,EAAM,CACR,MAAMomB,EAAM,SAAUpmB,EAAOA,EAAO,CAAC5N,SAAU4N,ICpQ9C,SAAmBrC,GACxB,QACGA,GACAA,EAAKvL,UACLuL,EAAKvL,SAASK,OACdkL,EAAKvL,SAASK,MAAMH,MACpBqL,EAAKvL,SAASK,MAAMF,QACpBoL,EAAKvL,SAASM,KACdiL,EAAKvL,SAASM,IAAIJ,MAClBqL,EAAKvL,SAASM,IAAIH,OAEvB,ED2PW8zB,CAAUD,KAEbnmB,EAAM7N,SAAW,CAACK,MAAO2uB,GAAWgF,GAAM1zB,IAAK2uB,GAAS+E,IAE3D,CAED,OAAOnmB,CACR,CAUD,SAASoH,EAAM1J,EAAMuQ,EAASoY,EAAOjnB,GAOnC,OANI1G,MAAMF,QAAQ6tB,KAChBjnB,EAAWinB,EACXA,EAAQ,CAAE,GAILN,EAAQroB,EAAM,CACnBgB,KAAM,UACNuP,UACAsS,WAAY8F,GAAS,CAAE,EACvBjnB,SAAUA,GAAY,IAEzB,CA8BH,CAYA,SAASuhB,GAAMjhB,EAAM4mB,GACf5mB,EAAKvN,WAAUm0B,EAAGn0B,S7BpTjB,SAAkBuL,GACvB,MAAO,CAAClL,MAAO2uB,GAAWzjB,GAAOjL,IAAK2uB,GAAS1jB,GACjD,C6BkTmCvL,CAASuN,GAC5C,CAcA,SAASmhB,GAAUnhB,EAAM4mB,GAEvB,IAAIlxB,EAASkxB,EAGb,GAAI5mB,GAAQA,EAAK1I,KAAM,CACrB,MAAMgvB,EAAQtmB,EAAK1I,KAAKgvB,MAClBE,EAAYxmB,EAAK1I,KAAKkvB,UACtBD,EAAcvmB,EAAK1I,KAAKivB,YAET,iBAAVD,IAGW,YAAhB5wB,EAAOsJ,KACTtJ,EAAO6Y,QAAU+X,EAOjB5wB,EAAS,CACPsJ,KAAM,UACNuP,QAAS+X,EACTzF,WAAY,CAAE,EACdnhB,SAAU,KAeI,YAAhBhK,EAAOsJ,MAAsBunB,IAC/B7wB,EAAOmrB,WAAa,IAAInrB,EAAOmrB,cAAe0F,IAI9C,aAAc7wB,GACdA,EAAOgK,UADP,MAEA8mB,IAIA9wB,EAAOgK,SAAW8mB,EAErB,CAED,OAAO9wB,CACT,CAeO,SAAS2J,GAAIqI,EAAO1J,EAAM4kB,GAC/B,MAAM5jB,EAAOhB,GAAQA,EAAKgB,KAG1B,IAAKA,EACH,MAAM,IAAI/L,MAAM,uBAAyB+K,EAAO,KAGlD,OAAIxB,GAAIvD,KAAKyO,EAAMsa,SAAUhjB,GACpB0I,EAAMsa,SAAShjB,GAAM0I,EAAO1J,EAAM4kB,GAGvClb,EAAMwe,aAAexe,EAAMwe,YAAYtuB,SAASoH,GAG3C,aAAchB,EAAO,IAAIA,EAAM0B,SAAUD,GAAIiI,EAAO1J,IAASA,EAGlE0J,EAAMue,eACDve,EAAMue,eAAeve,EAAO1J,EAAM4kB,GAiE7C,SAA+Blb,EAAO1J,GACpC,MAAM1G,EAAO0G,EAAK1G,MAAQ,CAAE,EAEtB5B,IACJ,UAAWsI,IACTxB,GAAIvD,KAAK3B,EAAM,gBAAkBkF,GAAIvD,KAAK3B,EAAM,aAE9C,CACE0H,KAAM,UACNuP,QAAS,MACTsS,WAAY,CAAE,EACdnhB,SAAUD,GAAIiI,EAAO1J,IALvB,CAACgB,KAAM,OAAQxM,MAAOwL,EAAKxL,OASjC,OADAkV,EAAMuZ,MAAMjjB,EAAMtI,GACXgS,EAAMyZ,UAAUnjB,EAAMtI,EAC/B,CA9ESmxB,CAAsBnf,EAAO1J,EACtC,CAaO,SAASyB,GAAIiI,EAAOkb,GAEzB,MAAM/nB,EAAS,GAEf,GAAI,aAAc+nB,EAAQ,CACxB,MAAMkE,EAAQlE,EAAOljB,SACrB,IAAI3N,GAAS,EACb,OAASA,EAAQ+0B,EAAM90B,QAAQ,CAC7B,MAAM0D,EAAS2J,GAAIqI,EAAOof,EAAM/0B,GAAQ6wB,GAGxC,GAAIltB,EAAQ,CACV,GAAI3D,GAAmC,UAA1B+0B,EAAM/0B,EAAQ,GAAGiN,OACvBhG,MAAMF,QAAQpD,IAA2B,SAAhBA,EAAOsJ,OACnCtJ,EAAOlD,MAAQkD,EAAOlD,MAAMsa,QAAQ,OAAQ,MAGzC9T,MAAMF,QAAQpD,IAA2B,YAAhBA,EAAOsJ,MAAoB,CACvD,MAAMuX,EAAO7gB,EAAOgK,SAAS,GAEzB6W,GAAsB,SAAdA,EAAKvX,OACfuX,EAAK/jB,MAAQ+jB,EAAK/jB,MAAMsa,QAAQ,OAAQ,IAE3C,CAGC9T,MAAMF,QAAQpD,GAChBmF,EAAO/C,QAAQpC,GAEfmF,EAAO/C,KAAKpC,EAEf,CACF,CACF,CAED,OAAOmF,CACT,CA0CO,SAASe,GAAKkrB,EAAOhE,GAE1B,MAAMptB,EAAS,GACf,IAAI3D,GAAS,EAMb,IAJI+wB,GACFptB,EAAOoC,KAAK,CAACkH,KAAM,OAAQxM,MAAO,SAG3BT,EAAQ+0B,EAAM90B,QACjBD,GAAO2D,EAAOoC,KAAK,CAACkH,KAAM,OAAQxM,MAAO,OAC7CkD,EAAOoC,KAAKgvB,EAAM/0B,IAOpB,OAJI+wB,GAASgE,EAAM90B,OAAS,GAC1B0D,EAAOoC,KAAK,CAACkH,KAAM,OAAQxM,MAAO,OAG7BkD,CACT,CEheO,SAASqxB,GAAOvoB,EAAMrH,GAC3B,MAAMuQ,EAAQie,GAAYnnB,EAAMrH,GAC1B6G,EAAO0J,EAAMrI,IAAIb,EAAM,MACvBwoB,EClFD,SAAgBtf,GAErB,MAAMuf,EAAY,GAClB,IAAIl1B,GAAS,EAEb,OAASA,EAAQ2V,EAAM+Y,cAAczuB,QAAQ,CAC3C,MAAMmlB,EAAMzP,EAAM4a,aAAa5a,EAAM+Y,cAAc1uB,IAEnD,IAAKolB,EACH,SAGF,MAAM/U,EAAUsF,EAAMjI,IAAI0X,GACpBoJ,EAAKxiB,OAAOoZ,EAAIlK,YAAYF,cAC5ByT,EAASL,GAAaI,EAAGpuB,eAC/B,IAAI+0B,EAAiB,EAErB,MAAMC,EAAiB,GAEvB,OAASD,GAAkBxf,EAAMiZ,eAAeJ,IAAK,CAEnD,MAAM6G,EAAgB,CACpBpoB,KAAM,UACNuP,QAAS,IACTsS,WAAY,CACVrqB,KACE,IACAkR,EAAMoZ,cACN,SACAN,GACC0G,EAAiB,EAAI,IAAMA,EAAiB,IAC/CG,qBAAqB,EACrBlF,UAAW,CAAC,yBACZmF,UAAW5f,EAAMse,mBAEnBtmB,SAAU,CAAC,CAACV,KAAM,OAAQxM,MAAO,OAG/B00B,EAAiB,GACnBE,EAAc1nB,SAAS5H,KAAK,CAC1BkH,KAAM,UACNuP,QAAS,MACT7O,SAAU,CAAC,CAACV,KAAM,OAAQxM,MAAOuL,OAAOmpB,OAIxCC,EAAen1B,OAAS,GAC1Bm1B,EAAervB,KAAK,CAACkH,KAAM,OAAQxM,MAAO,MAG5C20B,EAAervB,KAAKsvB,EACrB,CAED,MAAMre,EAAO3G,EAAQA,EAAQpQ,OAAS,GAEtC,GAAI+W,GAAsB,YAAdA,EAAK/J,MAAuC,MAAjB+J,EAAKwF,QAAiB,CAC3D,MAAMgZ,EAAWxe,EAAKrJ,SAASqJ,EAAKrJ,SAAS1N,OAAS,GAClDu1B,GAA8B,SAAlBA,EAASvoB,KACvBuoB,EAAS/0B,OAAS,IAElBuW,EAAKrJ,SAAS5H,KAAK,CAACkH,KAAM,OAAQxM,MAAO,MAG3CuW,EAAKrJ,SAAS5H,QAAQqvB,EAC5B,MACM/kB,EAAQtK,QAAQqvB,GAIlB,MAAMhN,EAAW,CACfnb,KAAM,UACNuP,QAAS,KACTsS,WAAY,CAACN,GAAI7Y,EAAMoZ,cAAgB,MAAQN,GAC/C9gB,SAAUgI,EAAM9L,KAAKwG,GAAS,IAGhCsF,EAAMuZ,MAAM9J,EAAKgD,GAEjB8M,EAAUnvB,KAAKqiB,EAChB,CAED,GAAyB,IAArB8M,EAAUj1B,OAId,MAAO,CACLgN,KAAM,UACNuP,QAAS,UACTsS,WAAY,CAAC2G,eAAe,EAAMrF,UAAW,CAAC,cAC9CziB,SAAU,CACR,CACEV,KAAM,UACNuP,QAAS7G,EAAMoe,qBACfjF,WAAY,IAEP3qB,KAAKwH,MAAMxH,KAAKC,UAAUuR,EAAMqe,0BACnCxF,GAAI,kBAEN7gB,SAAU,CAAC,CAACV,KAAM,OAAQxM,MAAOkV,EAAMme,iBAEzC,CAAC7mB,KAAM,OAAQxM,MAAO,MACtB,CACEwM,KAAM,UACNuP,QAAS,KACTsS,WAAY,CAAE,EACdnhB,SAAUgI,EAAM9L,KAAKqrB,GAAW,IAElC,CAACjoB,KAAM,OAAQxM,MAAO,OAG5B,CD5Bei1B,CAAO/f,GAUpB,OARIsf,GAIFhpB,EAAK0B,SAAS5H,KAAK,CAACkH,KAAM,OAAQxM,MAAO,MAAOw0B,GAI3ChuB,MAAMF,QAAQkF,GAAQ,CAACgB,KAAM,OAAQU,SAAU1B,GAAQA,CAChE,CE3EA,MAUA0pB,GARA,SACc5oB,EAAa3H,GACrB,OAAO2H,GAAe,QAASA,EAcrC,SAAgBA,EAAa3H,GAC3B,MAAO,CAAC6G,EAAMjK,EAAMkH,KAClB6D,EAAYlE,IAAImsB,GAAO/oB,EAAM7G,GAAUpD,EAAO4C,IAC5CsE,EAAKtE,KAGX,CAnBUgxB,CAAO7oB,EAAa3H,GA2B9B,SAAgBA,GAEd,OAAQ6G,GAAS+oB,GAAO/oB,EAAM7G,EAChC,CA7BUywB,CAAO9oB,GAAe3H,EAE7B,ECrCI,MAAM0wB,GAOX,WAAAx1B,CAAYy1B,EAAUC,EAAQC,GAC5Bx0B,KAAKs0B,SAAWA,EAChBt0B,KAAKu0B,OAASA,EACVC,IACFx0B,KAAKw0B,MAAQA,EAEhB,ECPI,SAASC,GAAM7B,EAAa4B,GAEjC,MAAMF,EAAW,CAAE,EAEbC,EAAS,CAAE,EACjB,IAAIh2B,GAAS,EAEb,OAASA,EAAQq0B,EAAYp0B,QAC3BwG,OAAO4E,OAAO0qB,EAAU1B,EAAYr0B,GAAO+1B,UAC3CtvB,OAAO4E,OAAO2qB,EAAQ3B,EAAYr0B,GAAOg2B,QAG3C,OAAO,IAAIF,GAAOC,EAAUC,EAAQC,EACtC,CCrBO,SAAShyB,GAAUxD,GACxB,OAAOA,EAAML,aACf,CFiBA01B,GAAO1zB,UAAU2zB,SAAW,CAAE,EAE9BD,GAAO1zB,UAAU4zB,OAAS,CAAE,EAE5BF,GAAO1zB,UAAU6zB,MAAQ,KG3BlB,MAAME,GAMX,WAAA71B,CAAYy1B,EAAUK,GAEpB30B,KAAKs0B,SAAWA,EAEhBt0B,KAAK20B,UAAYA,CAClB,EAIHD,GAAK/zB,UAAU6zB,MAAQ,KACvBE,GAAK/zB,UAAUi0B,SAAU,EACzBF,GAAK/zB,UAAUk0B,YAAa,EAC5BH,GAAK/zB,UAAUm0B,mBAAoB,EACnCJ,GAAK/zB,UAAUo0B,QAAS,EACxBL,GAAK/zB,UAAUq0B,gBAAiB,EAChCN,GAAK/zB,UAAUs0B,gBAAiB,EAChCP,GAAK/zB,UAAUu0B,uBAAwB,EACvCR,GAAK/zB,UAAUw0B,iBAAkB,EACjCT,GAAK/zB,UAAUqZ,SAAU,ECxBzB,IAAIob,GAAS,EAEN,MAAMR,GAAUS,KACVR,GAAaQ,KACbP,GAAoBO,KACpBN,GAASM,KACTJ,GAAiBI,KACjBL,GAAiBK,KACjBH,GAAwBG,KAErC,SAASA,KACP,OAAO,KAAOD,EAChB,0NCPMpE,GAAShsB,OAAOuG,KAAK+pB,IAEpB,MAAMC,WAAoBb,GAQ/B,WAAA71B,CAAYy1B,EAAUK,EAAWa,EAAMhB,GACrC,IAAIj2B,GAAS,EAMb,GAJAuB,MAAMw0B,EAAUK,GAEhBc,GAAKz1B,KAAM,QAASw0B,GAEA,iBAATgB,EACT,OAASj3B,EAAQyyB,GAAOxyB,QAAQ,CAC9B,MAAMqS,EAAQmgB,GAAOzyB,GACrBk3B,GAAKz1B,KAAMgxB,GAAOzyB,IAASi3B,EAAOF,GAAMzkB,MAAYykB,GAAMzkB,GAC3D,CAEJ,EAUH,SAAS4kB,GAAKpuB,EAAQ1B,EAAK3G,GACrBA,IAEFqI,EAAO1B,GAAO3G,EAElB,CAZAu2B,GAAY50B,UAAUqZ,SAAU,ECbhC,MAAMhR,GAAM,CAAE,EAAC/D,eAMR,SAASmf,GAAO5K,GAErB,MAAM8a,EAAW,CAAE,EAEbC,EAAS,CAAE,EAEjB,IAAIpwB,EAEJ,IAAKA,KAAQqV,EAAW6T,WACtB,GAAIrkB,GAAIvD,KAAK+T,EAAW6T,WAAYlpB,GAAO,CACzC,MAAMnF,EAAQwa,EAAW6T,WAAWlpB,GAC9BQ,EAAO,IAAI4wB,GACfpxB,EACAqV,EAAWkc,UAAUlc,EAAWmc,YAAc,CAAA,EAAIxxB,GAClDnF,EACAwa,EAAWgb,OAIXhb,EAAW2b,iBACX3b,EAAW2b,gBAAgB/wB,SAASD,KAEpCQ,EAAKwwB,iBAAkB,GAGzBb,EAASnwB,GAAQQ,EAEjB4vB,EAAO/xB,GAAU2B,IAASA,EAC1BowB,EAAO/xB,GAAUmC,EAAKgwB,YAAcxwB,CACrC,CAGH,OAAO,IAAIkwB,GAAOC,EAAUC,EAAQ/a,EAAWgb,MACjD,CCvDO,MAAMoB,GAAQxR,GAAO,CAC1BoQ,MAAO,QACPkB,UAAS,CAACtS,EAAGjf,IACJ,SAAWA,EAAKzF,MAAM,GAAGC,cAElC0uB,WAAY,CACVwI,aAAc,KACdC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,UAAW,QCZFC,GAAMhS,GAAO,CACxBoQ,MAAO,MACPkB,UAAS,CAACtS,EAAGjf,IACJ,OAASA,EAAKzF,MAAM,GAAGC,cAEhC0uB,WAAY,CAACgJ,QAAS,KAAMC,QAAS,KAAMC,SAAU,QCFhD,SAASC,GAAuBb,EAAYhB,GACjD,OAAOA,KAAagB,EAAaA,EAAWhB,GAAaA,CAC3D,CCAO,SAAS8B,GAAyBd,EAAYrB,GACnD,OAAOkC,GAAuBb,EAAYrB,EAAS31B,cACrD,CCNO,MAAM+3B,GAAQtS,GAAO,CAC1BoQ,MAAO,QACPmB,WAAY,CAACgB,WAAY,eACzBjB,UAAWe,GACXpJ,WAAY,CAACqJ,MAAO,KAAME,WAAY,QCJ3BC,GAAOzS,GAAO,CACzBsR,UAAS,CAACtS,EAAGjf,IACK,SAATA,EAAkBA,EAAO,QAAUA,EAAKzF,MAAM,GAAGC,cAE1D0uB,WAAY,CACVyJ,qBAAsB,KACtBC,WAAYlC,GACZmC,iBAAkB,KAClBC,SAAUpC,GACVqC,YAAarC,GACbsC,aAAcpC,GACdqC,aAAcrC,GACdsC,YAAatC,GACbuC,aAAcrC,GACdsC,YAAa,KACb/J,gBAAiByH,GACjBuC,YAAa,KACbC,aAAc5C,GACd6C,eAAgBzC,GAChB0C,iBAAkB,KAClBC,aAAc/C,GACdgD,WAAY5C,GACZ6C,YAAajD,GACbkD,aAAc,KACdC,WAAYnD,GACZoD,YAAa,KACbC,iBAAkB,KAClBpE,UAAW,KACXqE,eAAgBlD,GAChBmD,UAAWrD,GACXsD,SAAU,KACVC,UAAWzD,GACX0D,cAAe1D,GACf2D,oBAAqB3D,GACrB4D,gBAAiB,KACjBC,SAAUzD,GACV0D,gBAAiB,KACjBC,aAAc7D,GACd8D,YAAahE,GACbiE,aAAcjE,GACdkE,aAAc,KACdC,aAAcnE,GACdoE,oBAAqBhE,GACrBiE,aAAcnE,GACdoE,aAAcpE,GACdqE,YAAarE,GACbsE,aAAcxE,GACdyE,YAAavE,GACbwE,SAAU,KACVC,aAAczE,GACd0E,aAAc1E,GACd2E,aAAc3E,GACd4E,cAAe,KACfC,KAAM,QC7CGrT,GAAOnC,GAAO,CACzBoQ,MAAO,OACPmB,WAAY,CACVkE,cAAe,iBACfC,UAAW,QACXC,QAAS,MACTC,UAAW,cAEbtE,UAAWe,GACXtB,gBAAiB,CAAC,UAAW,WAAY,QAAS,YAClD9H,WAAY,CAEV4M,KAAM,KACNC,OAAQlF,GACRmF,cAAelF,GACfmF,UAAWnF,GACXoF,OAAQ,KACRC,MAAO,KACPC,gBAAiB3F,GACjB4F,oBAAqB5F,GACrB6F,eAAgB7F,GAChB5oB,IAAK,KACL0uB,GAAI,KACJC,MAAO/F,GACPgG,eAAgB,KAChBC,aAAc5F,GACd6F,UAAWlG,GACXmG,SAAUnG,GACVoG,SAAU/F,GACVgG,QAAS,KACTC,QAAS,KACTrP,QAAS+I,GACTuG,KAAM,KACNxM,UAAWsG,GACXmG,KAAMrG,GACNsG,QAAS,KACTzsB,QAAS,KACT0sB,gBAAiBzG,GACjB0G,SAAU3G,GACV4G,aAAcvG,GACdwG,OAAQ1G,GAASC,GACjB0G,YAAa,KACb53B,KAAM,KACN63B,SAAU,KACVC,SAAU,KACVC,QAASjH,GACTkH,MAAOlH,GACPmH,IAAK,KACLC,QAAS,KACTxM,SAAUoF,GACVqH,SAAUnH,GACVoH,UAAWrH,GACXsH,QAAS,KACTC,aAAc,KACdC,cAAe,KACfC,KAAM,KACNC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,eAAgB9H,GAChB+H,WAAY,KACZC,QAAS3H,GACT4H,OAAQ9H,GACR+H,OAAQlI,GACRmI,KAAMhI,GACN/xB,KAAM,KACNg6B,SAAU,KACVC,QAAShI,GACTiI,UAAWjI,GACXlI,GAAI,KACJoQ,WAAY,KACZC,YAAa,KACbC,MAAOzI,GACP0I,UAAW,KACXC,UAAW,KACX9L,GAAI,KACJ+L,MAAO5I,GACP6I,OAAQ,KACRC,SAAUzI,GACV0I,QAAS1I,GACT2I,UAAWhJ,GACXiJ,SAAU5I,GACVnV,KAAM,KACNjB,MAAO,KACPuM,KAAM,KACN0S,SAAU,KACV1xB,KAAM,KACN2xB,QAAS,KACTC,KAAMpJ,GACNqJ,IAAKlJ,GACLmJ,SAAU,KACV7vB,IAAK,KACL8vB,UAAWpJ,GACXnW,MAAO,KACPwf,OAAQ,KACRC,IAAK,KACLC,UAAWvJ,GACXwJ,SAAU3J,GACV4J,MAAO5J,GACP30B,KAAM,KACNw+B,MAAO,KACPC,SAAU9J,GACV+J,WAAY/J,GACZgK,QAAS,KACTC,aAAc,KACdC,WAAY,KACZC,cAAe,KACfC,cAAe,KACfC,eAAgB,KAChBC,eAAgB,KAChBC,OAAQ,KACRC,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTC,cAAe,KACfC,cAAe,KACfC,kBAAmB,KACnBC,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,WAAY,KACZC,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTC,iBAAkB,KAClBC,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBC,UAAW,KACXC,YAAa,KACbC,UAAW,KACXC,eAAgB,KAChBC,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdC,mBAAoB,KACpBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,YAAa,KACbC,0BAA2B,KAC3BC,SAAU,KACVC,UAAW,KACXC,SAAU,KACVC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVC,qBAAsB,KACtBC,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXC,QAAS,KACTzxB,KAAMkiB,GACNwP,QAASrP,GACTsP,QAAS,KACTC,KAAMrP,GACNsP,YAAa,KACbC,YAAa5P,GACb6P,QAAS,KACTC,cAAe,KACfC,oBAAqB,KACrBC,OAAQ,KACRC,QAAS,KACTC,SAAUlQ,GACVmQ,eAAgB,KAChBC,IAAK/P,GACLgQ,SAAUrQ,GACVsQ,SAAUtQ,GACVhF,KAAMmF,GACNoQ,QAASpQ,GACTqQ,QAASnQ,GACToQ,MAAO,KACPC,OAAQ1Q,GACR2Q,SAAU3Q,GACV4Q,SAAU5Q,GACV6Q,mBAAoB7Q,GACpB8Q,yBAA0B9Q,GAC1B+Q,eAAgB,KAChBC,MAAO,KACPr3B,KAAMwmB,GACN8Q,MAAO,KACPC,KAAM,KACNC,KAAMhR,GACNiR,WAAYnR,GACZvuB,IAAK,KACL2/B,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACR7mC,MAAOy1B,GACPrD,KAAM,KACN0U,MAAO,KACPC,SAAUtR,GACVhvB,OAAQ,KACRslB,MAAO,KACPib,UAAW,KACX96B,KAAM,KACN+6B,cAAe3R,GACf4R,OAAQ,KACRxnC,MAAO61B,GACP4R,MAAO1R,GACP3sB,KAAM,KACNs+B,mBAAoB,KAIpBvW,MAAO,KACPwW,MAAO,KACPC,QAAS3R,GACT4R,KAAM,KACNC,WAAY,KACZC,QAAS,KACTC,OAAQjS,GACRkS,YAAa,KACbC,aAAcnS,GACdoS,YAAa,KACbC,YAAa,KACbC,KAAM,KACNC,QAAS,KACTC,QAAS,KACTC,MAAO,KACP7lC,KAAM,KACN8lC,SAAU,KACVC,SAAU,KACVC,MAAO,KACPC,QAAShT,GACTiT,QAASjT,GACTje,MAAO,KACPmxB,KAAM,KACNC,MAAO,KACPC,YAAa,KACbC,OAAQlT,GACRmT,WAAYnT,GACZxP,KAAM,KACN4iB,SAAU,KACVC,OAAQ,KACRC,aAActT,GACduT,YAAavT,GACbwT,SAAU3T,GACV4T,OAAQ5T,GACR6T,QAAS7T,GACT8T,OAAQ9T,GACR+T,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRC,IAAK,KACLC,YAAahU,GACbiU,MAAO,KACPC,OAAQ,KACRC,UAAWrU,GACXsU,QAAS,KACTC,QAAS,KACTr2B,KAAM,KACNs2B,UAAWtU,GACXuU,UAAW,KACXC,QAAS,KACTC,OAAQ,KACRC,MAAO,KACPC,OAAQ3U,GAGR4U,kBAAmB,KACnBC,YAAa,KACbC,SAAU,KACVC,wBAAyBlV,GACzBmV,sBAAuBnV,GACvBnmB,OAAQ,KACR6lB,SAAU,KACVjF,QAAS0F,GACTiV,SAAU,KACVC,aAAc,QCrTLC,GAAM9lB,GAAO,CACxBoQ,MAAO,MACPmB,WAAY,CACVwU,aAAc,gBACdC,kBAAmB,qBACnBC,WAAY,cACZC,cAAe,iBACfC,UAAW,aACX5b,UAAW,QACX6b,SAAU,YACVC,SAAU,YACVC,mBAAoB,sBACpBC,0BAA2B,8BAC3BC,aAAc,gBACdC,eAAgB,kBAChBnP,YAAa,cACboP,SAAU,WACVC,iBAAkB,oBAClBC,iBAAkB,oBAClBC,YAAa,eACbC,SAAU,YACVC,WAAY,cACZC,aAAc,gBACdC,WAAY,cACZC,SAAU,YACVC,eAAgB,mBAChBC,YAAa,eACbC,UAAW,aACXC,YAAa,eACbC,WAAY,cACZC,UAAW,aACXC,2BAA4B,+BAC5BC,yBAA0B,6BAC1B9O,SAAU,WACV+O,UAAW,cACXC,aAAc,iBACdC,aAAc,iBACdC,eAAgB,kBAChBC,cAAe,iBACfC,cAAe,iBACfC,UAAW,aACXC,UAAW,aACXC,YAAa,eACbC,QAAS,WACTC,YAAa,gBACbC,aAAc,iBACdC,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,SAAU,YACVC,MAAO,SACPC,UAAW,cACXC,WAAY,eACZrO,QAAS,UACTsO,WAAY,aACZrO,aAAc,eACdG,cAAe,gBACfmO,QAAS,UACT/N,SAAU,WACVC,UAAW,YACXC,iBAAkB,mBAClBC,SAAU,WACVC,QAAS,UACTC,QAAS,UACTI,OAAQ,SACRC,YAAa,cACbC,MAAO,QACPC,WAAY,aACZC,OAAQ,SACRC,UAAW,YACXC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,OAAQ,SACRC,iBAAkB,mBAClBC,UAAW,YACX0M,MAAO,QACPzM,QAAS,UACTC,QAAS,UACTC,QAAS,UACTwM,UAAW,YACXC,WAAY,aACZvM,aAAc,eACdC,QAAS,UACTC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,QAAS,UACTE,OAAQ,SACRC,aAAc,eACdC,iBAAkB,mBAClBE,YAAa,cACbC,UAAW,YACXE,YAAa,cACbC,aAAc,eACdC,aAAc,eACdC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,UAAW,YACXoL,aAAc,eACdnL,UAAW,YACXC,SAAU,WACVC,WAAY,aACZC,WAAY,aACZC,QAAS,UACTC,QAAS,UACTC,OAAQ,SACRC,UAAW,YACXC,WAAY,aACZC,WAAY,aACZC,aAAc,eACd0K,SAAU,WACVxK,QAAS,UACTC,SAAU,WACVC,SAAU,WACVG,SAAU,WACVC,UAAW,YACXC,SAAU,WACVkK,OAAQ,SACRhK,UAAW,YACXC,UAAW,YACXC,SAAU,WACVC,UAAW,YACXC,aAAc,eACdC,SAAU,WACVE,SAAU,WACVC,eAAgB,iBAChBC,UAAW,YACXwJ,OAAQ,SACRC,iBAAkB,oBAClBC,kBAAmB,qBACnBC,WAAY,cACZC,QAAS,WACTC,cAAe,iBACfhJ,eAAgB,iBAChBiJ,gBAAiB,mBACjBC,eAAgB,kBAChBC,UAAW,aACXC,YAAa,eACbC,sBAAuB,yBACvBC,uBAAwB,0BACxBC,gBAAiB,mBACjBC,iBAAkB,oBAClBC,cAAe,iBACfC,eAAgB,kBAChBC,iBAAkB,oBAClBC,cAAe,iBACfC,YAAa,eACbvI,SAAU,WACVwI,WAAY,cACZC,eAAgB,kBAChBC,cAAe,iBACfC,gBAAiB,mBACjBC,OAAQ,SACRC,kBAAmB,qBACnBC,mBAAoB,sBACpBC,YAAa,eACbC,aAAc,gBACdC,WAAY,eACZC,YAAa,eACbC,SAAU,YACVC,aAAc,gBACdC,cAAe,iBACfC,aAAc,gBACdC,SAAU,aACVC,YAAa,gBACbC,YAAa,gBACbC,YAAa,eACbC,YAAa,eACbC,QAAS,WAETC,cAAe,gBACfC,cAAe,iBAEjBza,UAAWc,GACXnJ,WAAY,CACV+iB,MAAOlb,GACPiV,aAAcpV,GACdsb,WAAY,KACZC,SAAU,KACVlG,kBAAmB,KACnBmG,WAAYxb,GACZyb,UAAWzb,GACXsV,WAAY,KACZoG,OAAQ1b,GACR2b,cAAe,KACfC,cAAe,KACfC,QAAS7b,GACT8b,UAAW,KACXvG,cAAe,KACfwG,cAAe,KACfC,YAAa,KACbC,KAAM,KACN93B,MAAO,KACP+3B,KAAMlc,GACNmc,GAAI,KACJC,SAAU,KACV5G,UAAWxV,GACXpG,UAAWsG,GACXmc,KAAM,KACN5G,SAAU,KACV6G,cAAe,KACf5G,SAAU,KACV9C,MAAO,KACP+C,mBAAoB,KACpBC,0BAA2B,KAC3BC,aAAc,KACdC,eAAgB,KAChBj8B,QAAS,KACT0iC,kBAAmB,KACnBC,iBAAkB,KAClB7V,YAAa,KACb8V,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJllB,EAAG,KACHse,SAAU,KACV6G,cAAe,KACfC,QAAS7c,GACT8c,gBAAiB9c,GACjB+c,UAAW,KACXC,QAAS,KACTC,IAAK,KACLC,QAASld,GACTgW,iBAAkB,KAClB9O,SAAUrH,GACVsd,GAAI,KACJC,GAAI,KACJC,SAAU,KACVC,SAAU,KACVC,UAAWvd,GACXiW,iBAAkB,KAClBzrC,IAAK,KACLoX,MAAO,KACP47B,SAAUxd,GACVyd,0BAA2B,KAC3BC,KAAM,KACNxH,YAAalW,GACbmW,SAAU,KACVwH,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbzH,WAAY,KACZC,aAAc,KACdyH,UAAW,KACXC,eAAgB,KAChBzH,WAAY,KACZC,SAAU,KACVC,eAAgB,KAChBC,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZoH,OAAQ,KACRC,GAAI,KACJxmC,KAAM,KACNymC,GAAI,KACJC,GAAI,KACJC,GAAIne,GACJoe,GAAIpe,GACJ4W,UAAW5W,GACX6W,2BAA4B,KAC5BC,yBAA0B,KAC1BuH,SAAU,KACVC,kBAAmB,KACnBC,cAAe,KACf9oB,QAAS,KACT+oB,QAASze,GACT0e,kBAAmB,KACnBC,WAAY,KACZ7W,OAAQ,KACR75B,KAAM,KACNg6B,SAAU,KACV+O,UAAWhX,GACXiX,aAAcjX,GACdkX,aAAclX,GACdhI,GAAI,KACJ4mB,YAAa5e,GACbmX,eAAgB,KAChB0H,kBAAmB,KACnBC,GAAI,KACJC,IAAK,KACLC,UAAWhf,GACXif,EAAGjf,GACHkf,GAAIlf,GACJmf,GAAInf,GACJof,GAAIpf,GACJqf,GAAIrf,GACJsf,aAAcnf,GACdof,iBAAkB,KAClBC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,QAAS,KACTtpB,KAAM,KACNupB,aAAc,KACdxI,cAAe,KACfC,cAAe,KACfwI,kBAAmB7f,GACnB8f,MAAO,KACPxI,UAAW,KACXC,UAAW,KACXC,YAAa,KACbuI,aAAc,KACdC,YAAa,KACbC,YAAa,KACbxf,KAAM,KACNyf,iBAAkB,KAClBC,UAAW,KACXC,aAAc,KACd9mC,IAAK,KACLuQ,MAAO,KACPw2B,uBAAwB,KACxBC,sBAAuB,KACvBC,UAAWvgB,GACXwgB,UAAW,KACXnX,OAAQ,KACRC,IAAK,KACLmX,KAAM,KACNv1C,KAAM,KACNusC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,UAAW,KACXC,WAAY,KACZwI,WAAY,KACZC,SAAU,KACVvkC,OAAQ,KACRytB,QAAS,KACTsO,WAAY,KACZrO,aAAc,KACdG,cAAe,KACfmO,QAAS,KACT/N,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTI,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACX0M,MAAO,KACPzM,QAAS,KACTC,QAAS,KACTC,QAAS,KACTwM,UAAW,KACXC,WAAY,KACZvM,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTE,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBE,YAAa,KACbC,UAAW,KACXE,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXoL,aAAc,KACdnL,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACd0K,SAAU,KACVxK,QAAS,KACTC,SAAU,KACVC,SAAU,KACVG,SAAU,KACVC,UAAW,KACXC,SAAU,KACVkK,OAAQ,KACRhK,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVE,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXwJ,OAAQ,KACRiI,QAAS,KACTC,SAAU,KACVnyC,MAAO,KACPoyC,OAAQ,KACRC,YAAa,KACbl2C,OAAQ,KACRm2C,SAAU,KACVC,QAAS,KACTrI,iBAAkB5Y,GAClB6Y,kBAAmB7Y,GACnB8Y,WAAY,KACZC,QAAS,KACTltC,KAAM,KACNq1C,WAAYlhB,GACZmhB,oBAAqB,KACrBC,iBAAkB,KAClBC,aAAc,KACdC,MAAO,KACP/R,KAAMrP,GACNqhB,MAAO,KACPpG,cAAe,KACfnC,cAAe,KACfwI,OAAQ,KACRC,UAAWzhB,GACX0hB,UAAW1hB,GACX2hB,UAAW3hB,GACX4hB,cAAe,KACfC,oBAAqB,KACrBC,eAAgB,KAChBC,UAAW,KACXxiB,SAAUY,GACV6hB,EAAG,KACHC,OAAQ,KACRjS,eAAgB,KAChBkS,KAAM,KACNC,KAAM,KACNlS,IAAK9P,GACL4T,IAAK5T,GACL8Y,gBAAiB,KACjBmJ,YAAa,KACbC,UAAW,KACXC,mBAAoBniB,GACpBoiB,iBAAkBpiB,GAClBqiB,cAAeriB,GACfsiB,gBAAiBtiB,GACjBxL,SAAU,KACV+tB,QAAS,KACTv1C,OAAQ,KACRw1C,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJC,MAAO,KACPC,KAAM,KACN7J,eAAgB,KAChB8J,KAAM,KACNC,MAAO,KACPC,aAAc,KACdC,iBAAkBnjB,GAClBojB,iBAAkBpjB,GAClBqjB,aAAc,KACdC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,MAAO,KACPC,MAAO,KACPC,YAAa,KACbxK,UAAW,KACXC,YAAa,KACbC,sBAAuBrZ,GACvBsZ,uBAAwBtZ,GACxB9T,OAAQ,KACR03B,OAAQ,KACRrK,gBAAiBpZ,GACjBqZ,iBAAkB,KAClBC,cAAe,KACfC,eAAgB,KAChBC,iBAAkB3Z,GAClB4Z,cAAe5Z,GACf6Z,YAAa,KACbxI,MAAO,KACPwS,aAAc7jB,GACd8jB,aAAc,KACdC,oBAAqB,KACrBC,WAAY,KACZC,cAAe,KACfC,qBAAsB,KACtBC,eAAgBhkB,GAChBmR,SAAUtR,GACVokB,YAAa,KACbpzC,OAAQ,KACRqzC,QAASrkB,GACTskB,QAAStkB,GACT8Z,WAAY,KACZC,eAAgB,KAChBC,cAAe,KACfuK,WAAY,KACZnJ,cAAe,KACf9kB,MAAO,KACPkuB,kBAAmB,KACnB/tC,KAAM,KACNyjC,OAAQ/Z,GACR9B,GAAI,KACJsC,UAAW,KACXsZ,gBAAiB,KACjBwK,GAAI,KACJC,GAAI,KACJvK,kBAAmBna,GACnBoa,mBAAoBpa,GACpB2kB,QAAS,KACTtK,YAAa,KACbC,aAAc,KACdC,WAAYva,GACZ1tB,OAAQ,KACRkoC,YAAaxa,GACb2a,cAAe3a,GACf4a,aAAc,KACdH,SAAUza,GACV0a,aAAc1a,GACdwU,QAAS,KACTqG,SAAU7a,GACV8a,YAAa9a,GACb+a,YAAa/a,GACb4kB,QAAS,KACTC,WAAY,KACZC,WAAY,KACZpT,MAAO,KACPqT,OAAQ,KACR/J,YAAa,KACbC,YAAa,KACb+J,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBjK,QAASlb,GACTolB,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBC,EAAG,KACHC,WAAY,QC5iBVC,GAAQ,kBACRC,GAAO,UACPC,GAAM,SA+CZ,SAASC,GAAM91B,GACb,MAAO,IAAMA,EAAGnmB,aAClB,CAMA,SAASk8C,GAAU/1B,GACjB,OAAOA,EAAG1mB,OAAO,GAAGmb,aACtB,CC1DO,MAAMuhC,GAAc,CACzBvT,QAAS,UACTuD,SAAU,WACVrN,OAAQ,SACR6Q,gBAAiB,kBACjBC,iBAAkB,mBAClBC,cAAe,gBACfC,eAAgB,iBAChBC,iBAAkB,mBAClBO,OAAQ,SACRpZ,aAAc,eACdC,aAAc,eACdC,UAAW,YACXC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,UAAW,YACXS,WAAY,cCVDrQ,GAAOkO,GAAM,CAAC2B,GAAKR,GAAOc,GAAOG,GAAMkkB,IAAW,QAClD7Q,GAAMzV,GAAM,CAAC2B,GAAKR,GAAOc,GAAOG,GAAMmkB,IAAU,OCM9C,SAASC,GAAat3C,GACnC,GAAIA,EAAQu3C,iBAAmBv3C,EAAQw3C,mBACrC,MAAM,IAAIp6C,UACR,4EAIJ,GACE4C,EAAQu3C,iBACRv3C,EAAQw3C,oBACRx3C,EAAQy3C,aAER,OAAQpwC,IACN6mB,GAAM7mB,EAAM,UAAW,CAACR,EAAMjM,EAAO88C,KACnC,MAAMjsB,EAAsC,EAE5C,IAAI/iB,EAYJ,GAVI1I,EAAQu3C,gBACV7uC,GAAU1I,EAAQu3C,gBAAgB92C,SAASoG,EAAKuQ,SACvCpX,EAAQw3C,qBACjB9uC,EAAS1I,EAAQw3C,mBAAmB/2C,SAASoG,EAAKuQ,WAG/C1O,GAAU1I,EAAQy3C,cAAiC,iBAAV78C,IAC5C8N,GAAU1I,EAAQy3C,aAAa5wC,EAAMjM,EAAO6wB,IAG1C/iB,GAA2B,iBAAV9N,EAOnB,OANIoF,EAAQ23C,kBAAoB9wC,EAAK0B,SACnCkjB,EAAOljB,SAASC,OAAO5N,EAAO,KAAMiM,EAAK0B,UAEzCkjB,EAAOljB,SAASC,OAAO5N,EAAO,GAGzBA,IAOjB,CCrDO,SAASg9C,GAAWC,GAEzB,MAAMx8C,EAEJw8C,GAA0B,iBAAVA,GAAqC,SAAfA,EAAMhwC,KAExCgwC,EAAMx8C,OAAS,GACfw8C,EAIN,MAAwB,iBAAVx8C,GAA4D,KAAtCA,EAAMsa,QAAQ,eAAgB,GACpE,qBCtBImiC,GAAgB,kCAEhBC,GAAgB,MAChBC,GAAmB,OAGnBC,GAAiB,yCACjBC,GAAc,QACdC,GAAc,uDACdC,GAAkB,UAGlBC,GAAa,aAMbC,GAAe,GA8OnB,SAAS/9C,GAAKg+C,GACZ,OAAOA,EAAMA,EAAI5iC,QAAQ0iC,GAAYC,IAAgBA,EACvD,CCpQA,IAAI/xC,GDiCa,SAASk8B,EAAOziC,GAC/B,GAAqB,iBAAVyiC,EACT,MAAM,IAAIrlC,UAAU,mCAGtB,IAAKqlC,EAAO,MAAO,GAEnBziC,EAAUA,GAAW,GAKrB,IAAIw4C,EAAS,EACT/8C,EAAS,EAOb,SAASg9C,EAAeF,GACtB,IAAI7tB,EAAQ6tB,EAAIjwB,MAAMyvB,IAClBrtB,IAAO8tB,GAAU9tB,EAAM7vB,QAC3B,IAAImI,EAAIu1C,EAAI55C,YAvCF,MAwCVlD,GAAUuH,EAAIu1C,EAAI19C,OAASmI,EAAIvH,EAAS88C,EAAI19C,MAC7C,CAOD,SAASS,IACP,IAAIK,EAAQ,CAAEH,KAAMg9C,EAAQ/8C,OAAQA,GACpC,OAAO,SAASoL,GAGd,OAFAA,EAAKvL,SAAW,IAAIo9C,EAAS/8C,GAC7Bi8C,IACO/wC,CACb,CACG,CAUD,SAAS6xC,EAAS/8C,GAChBU,KAAKV,MAAQA,EACbU,KAAKT,IAAM,CAAEJ,KAAMg9C,EAAQ/8C,OAAQA,GACnCY,KAAKK,OAASsD,EAAQtD,MACvB,CAeD,SAAS8C,EAAMm5C,GACb,IAAIC,EAAM,IAAI98C,MACZkE,EAAQtD,OAAS,IAAM87C,EAAS,IAAM/8C,EAAS,KAAOk9C,GAQxD,GANAC,EAAI78C,OAAS48C,EACbC,EAAIC,SAAW74C,EAAQtD,OACvBk8C,EAAIp9C,KAAOg9C,EACXI,EAAIn9C,OAASA,EACbm9C,EAAIl8C,OAAS+lC,GAETziC,EAAQ84C,OAGV,MAAMF,CAET,CAQD,SAAStwB,EAAMywB,GACb,IAAIC,EAAID,EAAGtwB,KAAKga,GAChB,GAAKuW,EAAL,CACA,IAAIT,EAAMS,EAAE,GAGZ,OAFAP,EAAeF,GACf9V,EAAQA,EAAM1nC,MAAMw9C,EAAI19C,QACjBm+C,CAJQ,CAKhB,CAKD,SAASpB,IACPtvB,EAAM0vB,GACP,CAQD,SAASiB,EAAS5T,GAChB,IAAI6T,EAEJ,IADA7T,EAAQA,GAAS,GACT6T,EAAI7/B,MACA,IAAN6/B,GACF7T,EAAM1kC,KAAKu4C,GAGf,OAAO7T,CACR,CAQD,SAAShsB,IACP,IAAI3d,EAAMJ,IACV,GAnJgB,KAmJKmnC,EAAMhoC,OAAO,IAlJvB,KAkJyCgoC,EAAMhoC,OAAO,GAAjE,CAGA,IADA,IAAIuI,EAAI,EAENs1C,IAAgB7V,EAAMhoC,OAAOuI,KAtJpB,KAuJIy/B,EAAMhoC,OAAOuI,IAxJZ,KAwJmCy/B,EAAMhoC,OAAOuI,EAAI,OAEhEA,EAIJ,GAFAA,GAAK,EAEDs1C,KAAiB7V,EAAMhoC,OAAOuI,EAAI,GACpC,OAAOxD,EAAM,0BAGf,IAAI+4C,EAAM9V,EAAM1nC,MAAM,EAAGiI,EAAI,GAM7B,OALAvH,GAAU,EACVg9C,EAAeF,GACf9V,EAAQA,EAAM1nC,MAAMiI,GACpBvH,GAAU,EAEHC,EAAI,CACTmM,KApKa,UAqKbwR,QAASk/B,GAvBiE,CAyB7E,CAQD,SAASp/B,IACP,IAAIzd,EAAMJ,IAGNkF,EAAO8nB,EAAM2vB,IACjB,GAAKz3C,EAAL,CAIA,GAHA6Y,KAGKiP,EAAM4vB,IAAc,OAAO14C,EAAM,wBAGtC,IAAI25C,EAAM7wB,EAAM6vB,IAEZiB,EAAM19C,EAAI,CACZmM,KA7LiB,cA8LjB8oB,SAAUp2B,GAAKiG,EAAK,GAAGmV,QAAQmiC,GAAeQ,KAC9Cj9C,MAAO89C,EACH5+C,GAAK4+C,EAAI,GAAGxjC,QAAQmiC,GAAeQ,KACnCA,KAMN,OAFAhwB,EAAM8vB,IAECgB,CApBW,CAqBnB,CAyBD,OA9JAV,EAAS17C,UAAUiO,QAAUw3B,EA6J7BmV,IAjBA,WACE,IAKIyB,EALAC,EAAQ,GAMZ,IAJAL,EAASK,GAIDD,EAAOlgC,MACA,IAATkgC,IACFC,EAAM34C,KAAK04C,GACXJ,EAASK,IAIb,OAAOA,CACR,CAGMC,EACT,EC7OA,SAASC,GAAc/W,EAAOp/B,GAC5B,IAKI8V,EALApV,EAAS,KACb,IAAK0+B,GAA0B,iBAAVA,EACnB,OAAO1+B,EAST,IALA,IAEI4sB,EACAt1B,EAHAk+C,EAAehzC,GAAMk8B,GACrBgX,EAAkC,mBAAbp2C,EAIhBL,EAAI,EAAG02C,EAAMH,EAAa1+C,OAAQmI,EAAI02C,EAAK12C,IAElD2tB,GADAxX,EAAcogC,EAAav2C,IACJ2tB,SACvBt1B,EAAQ8d,EAAY9d,MAEhBo+C,EACFp2C,EAASstB,EAAUt1B,EAAO8d,GACjB9d,IACT0I,IAAWA,EAAS,CAAA,GACpBA,EAAO4sB,GAAYt1B,GAIvB,OAAO0I,CACT,CAEA41C,GAAcC,QAAGJ,GACKG,GAAAC,QAAA1hB,QAAGshB,0BCqEnBn0C,GAAM,CAAE,EAAC/D,eAITu4C,GAAgB,IAAIC,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,OAM5D,SAASC,GAAgBtrC,EAAS5H,GAEvC,MAAM0B,EAAW,GACjB,IAEIujB,EAFAkuB,GAAc,EAIlB,OAASA,EAAanzC,EAAK0B,SAAS1N,QAClCixB,EAAQjlB,EAAK0B,SAASyxC,GAEH,YAAfluB,EAAMjkB,KACRU,EAAS5H,KAAKs5C,GAAQxrC,EAASqd,EAAOkuB,EAAYnzC,IAC1B,SAAfilB,EAAMjkB,KASC,YAAdhB,EAAKgB,MACJgyC,GAAcK,IAAIrzC,EAAKuQ,UACvBwgC,GAAW9rB,IAEZvjB,EAAS5H,KAAKmrB,EAAMzwB,OAEE,QAAfywB,EAAMjkB,MAAmB4G,EAAQzO,QAAQm6C,UAElD5xC,EAAS5H,KAAKmrB,EAAMzwB,OAIxB,OAAOkN,CACT,CAQA,SAAS0xC,GAAQxrC,EAAS5H,EAAMjM,EAAO6wB,GACrC,MAAMzrB,EAAUyO,EAAQzO,QAClB+xB,OACyB31B,IAA7B4D,EAAQo6C,iBACJhgD,EACA4F,EAAQo6C,iBACRC,EAAe5rC,EAAQ6rC,OAGvBh+C,EAAOuK,EAAKuQ,QAEZsS,EAAa,CAAE,EACrB,IAEIiH,EAFA2pB,EAASD,EASb,GAL2B,SAAvBA,EAAaxpB,OAA6B,QAATv0B,IACnCg+C,EAAS/T,GACT93B,EAAQ6rC,OAASA,GAGfzzC,EAAK6iB,WACP,IAAKiH,KAAY9pB,EAAK6iB,WAChBrkB,GAAIvD,KAAK+E,EAAK6iB,WAAYiH,IAC5B4pB,GAAY7wB,EAAYiH,EAAU9pB,EAAK6iB,WAAWiH,GAAWliB,GAKtD,OAATnS,GAA0B,OAATA,GACnBmS,EAAQ+rC,YAGV,MAAMjyC,EAAWwxC,GAAgBtrC,EAAS5H,GAE7B,OAATvK,GAA0B,OAATA,GACnBmS,EAAQ+rC,YAIV/rC,EAAQ6rC,OAASD,EAIjB,MAAM/+C,EAAWuL,EAAKvL,UAAY,CAChCK,MAAO,CAACH,KAAM,KAAMC,OAAQ,KAAM+R,OAAQ,MAC1C5R,IAAK,CAACJ,KAAM,KAAMC,OAAQ,KAAM+R,OAAQ,OAEpCitC,EACJz6C,EAAQ06C,YAAcr1C,GAAIvD,KAAK9B,EAAQ06C,WAAYp+C,GAC/C0D,EAAQ06C,WAAWp+C,GACnBA,EACAq+C,EAA6B,iBAAdF,GAA0BA,IAAcG,EAAMC,SAEnE,IAAKC,EAAQC,mBAAmBN,GAC9B,MAAM,IAAIr9C,UACR,wBAAwBd,wCAsD5B,GAlDAotB,EAAW1nB,IAAMpH,EAEJ,MAAT0B,GAAgB0D,EAAQg7C,aAC1BtxB,EAAWtnB,OACqB,mBAAvBpC,EAAQg7C,WACXh7C,EAAQg7C,WACNp0C,OAAO8iB,EAAWrqB,MAAQ,IAC1BwH,EAAK0B,SACuB,iBAArBmhB,EAAWhC,MAAqBgC,EAAWhC,MAAQ,MAE5D1nB,EAAQg7C,YAGH,MAAT1+C,GAAgBy1B,IAClBrI,EAAWrqB,KAAO0yB,EAChBnrB,OAAO8iB,EAAWrqB,MAAQ,IAC1BwH,EAAK0B,SACuB,iBAArBmhB,EAAWhC,MAAqBgC,EAAWhC,MAAQ,OAK3DizB,GACQ,SAATr+C,GACgB,YAAhBmvB,EAAO5jB,MACY,QAAnB4jB,EAAOrU,UAEPsS,EAAWuxB,QAAS,GAInBN,GACS,OAATr+C,GACU,OAATA,GACS,OAATA,GACS,OAATA,GACS,OAATA,GACS,OAATA,IAEFotB,EAAWwxB,MAAQv1C,OAAOqb,SAAS1kB,EAAK7B,OAAO,GAAI,KAGxC,QAAT6B,GAAkB0D,EAAQm7C,oBAC5BzxB,EAAW/mB,IAAM3C,EAAQm7C,kBACvBv0C,OAAO8iB,EAAW/mB,KAAO,IACzBiE,OAAO8iB,EAAWrhB,KAAO,IACG,iBAArBqhB,EAAWhC,MAAqBgC,EAAWhC,MAAQ,QAIzDizB,GAAkB,OAATr+C,GAAiC,YAAhBmvB,EAAO5jB,KAAoB,CACxD,MAAMuzC,EA0DV,SAAyBv0C,GACvB,IAAIjM,GAAS,EAEb,OAASA,EAAQiM,EAAK0B,SAAS1N,QAAQ,CACrC,MAAMixB,EAAQjlB,EAAK0B,SAAS3N,GAE5B,GAAmB,YAAfkxB,EAAMjkB,MAAwC,UAAlBikB,EAAM1U,QACpC,OAAO0U,CAEV,CAED,OAAO,IACT,CAtEkBuvB,CAAgBx0C,GAC9B6iB,EAAWxB,QACTkzB,GAASA,EAAM1xB,WAAa3hB,QAAQqzC,EAAM1xB,WAAWxB,SAAW,KAClEwB,EAAW9uB,MAAQ0gD,GAAuB7vB,EAAQ5kB,GAClD6iB,EAAW1B,QAA6B,OAAnByD,EAAOrU,OAC7B,CA+JH,IAAyB1b,EAnHvB,OA1CKi/C,GAAmB,OAATr+C,GAA0B,OAATA,IAC9BotB,EAAW1B,QAAmB,OAAT1rB,EACrBotB,EAAW/B,MAAQlZ,EAAQ+rC,WAGhB,OAATl+C,GAA0B,OAATA,IACfotB,EAAW8C,QACR9C,EAAW+Y,QAAO/Y,EAAW+Y,MAAQ,CAAE,GAE5C/Y,EAAW+Y,MAAM8Y,UAAY7xB,EAAW8C,aACjC9C,EAAW8C,OAGfmuB,IACHjxB,EAAW8xB,SAAoB,OAATl/C,IAIrBq+C,GAAkB,OAATr+C,GAAiC,YAAhBmvB,EAAO5jB,OACpC6hB,EAAW8xB,SAAWzzC,QAA2B,UAAnB0jB,EAAOrU,UAInCpX,EAAQy7C,YACV/xB,EAAW,kBAsIN,EADgBhuB,EArI0BJ,GAuI3CK,MAAMH,KACV,IACAE,EAAIC,MAAMF,OACV,IACAC,EAAIE,IAAIJ,KACR,IACAE,EAAIE,IAAIH,QAEP8E,IAAIqG,QACJ3I,KAAK,MA7IH08C,GAAS36C,EAAQ07C,eACpBhyB,EAAWiyB,eAAiB90C,EAAKvL,WAI9Bq/C,GAAS36C,EAAQ47C,sBACpBlyB,EAAW9uB,MAAQ0gD,GAAuB7vB,EAAQ5kB,GAClD6iB,EAAWmyB,aAAeP,GAAuB7vB,IAG9CkvB,IACHjxB,EAAW7iB,KAAOA,GAIb0B,EAAS1N,OAAS,EACrB+/C,EAAMhqC,cAAc6pC,EAAW/wB,EAAYnhB,GAC3CqyC,EAAMhqC,cAAc6pC,EAAW/wB,EACrC,CAyBA,SAAS4xB,GAAuB7vB,EAAQ5kB,GACtC,IAAIjM,GAAS,EACTkhD,EAAQ,EAEZ,OAASlhD,EAAQ6wB,EAAOljB,SAAS1N,QAC3B4wB,EAAOljB,SAAS3N,KAAWiM,GACK,YAAhC4kB,EAAOljB,SAAS3N,GAAOiN,MAAoBi0C,IAGjD,OAAOA,CACT,CAQA,SAASvB,GAAY/qB,EAAOhvB,EAAMnF,EAAOi0B,GACvC,MAAMtuB,EPjWD,SAAcs5C,EAAQj/C,GAC3B,MAAMu1B,EAAS/xB,GAAUxD,GACzB,IAAImF,EAAOnF,EACP0gD,EAAOhrB,GAEX,GAAIH,KAAU0pB,EAAO1pB,OACnB,OAAO0pB,EAAO3pB,SAAS2pB,EAAO1pB,OAAOA,IAGvC,GAAIA,EAAO/1B,OAAS,GAA4B,SAAvB+1B,EAAO71B,MAAM,EAAG,IAAiB+7C,GAAMzsC,KAAKhP,GAAQ,CAE3E,GAAwB,MAApBA,EAAMZ,OAAO,GAAY,CAE3B,MAAMuhD,EAAO3gD,EAAMN,MAAM,GAAG4a,QAAQohC,GAAMG,IAC1C12C,EAAO,OAASw7C,EAAKvhD,OAAO,GAAGmb,cAAgBomC,EAAKjhD,MAAM,EAChE,KAAW,CAEL,MAAMihD,EAAO3gD,EAAMN,MAAM,GAEzB,IAAKg8C,GAAK1sC,KAAK2xC,GAAO,CACpB,IAAIC,EAASD,EAAKrmC,QAAQqhC,GAAKC,IAEN,MAArBgF,EAAOxhD,OAAO,KAChBwhD,EAAS,IAAMA,GAGjB5gD,EAAQ,OAAS4gD,CAClB,CACF,CAEDF,EAAOnqB,EACR,CAED,OAAO,IAAImqB,EAAKv7C,EAAMnF,EACxB,CO+Te6gD,CAAK5sB,EAAIgrB,OAAQ95C,GAC9B,IAAIjC,EAASlD,EAITkD,SAA2CA,GAAWA,IAMtDsD,MAAMF,QAAQpD,KAChBA,EAASyC,EAAKqwB,eClUX,SAAmB3tB,EAAQ1D,GAChC,MAAM6F,EAAW7F,GAAW,CAAE,EAK9B,OAF4C,KAA9B0D,EAAOA,EAAO7I,OAAS,GAAY,IAAI6I,EAAQ,IAAMA,GAGhEzF,MACE4H,EAASs2C,SAAW,IAAM,IACzB,MACsB,IAArBt2C,EAASu2C,QAAoB,GAAK,MAEtC7hD,MACL,CDqTmC8hD,CAAO99C,GAAiBA,EExW3CN,KAAK,KAAK1D,QF2WF,UAAlByG,EAAK2vB,UAA0C,iBAAXpyB,IACtCA,EAkBJ,SAAoBlD,GAElB,MAAMkD,EAAS,CAAE,EAEjB,IACEkkC,GAAMpnC,EAAOgI,EACjB,CAAI,MAED,CAED,OAAO9E,EAMP,SAAS8E,EAAS/G,EAAMggD,GACtB,MAAMjM,EAAyB,SAArB/zC,EAAKvB,MAAM,EAAG,GAAgB,MAAMuB,EAAKvB,MAAM,KAAOuB,EAChEiC,EAAO8xC,EAAE16B,QAAQ,YAAa4mC,KAAkBD,CACjD,CACH,CAtCaE,CAAWj+C,IAGlByC,EAAK6vB,OAAS7vB,EAAK2vB,SACrBnB,EACEnqB,GAAIvD,KAAKq1C,GAAan2C,EAAK2vB,UACvBwmB,GAAYn2C,EAAK2vB,UACjB3vB,EAAK2vB,UACPpyB,EACKyC,EAAKgwB,YACdxB,EAAMxuB,EAAKgwB,WAAazyB,GAE5B,CAgCA,SAASg+C,GAAc98B,EAAG2B,GACxB,OAAOA,EAAGxL,aACZ,CG5YA,MAAMvQ,GAAM,CAAE,EAAC/D,eAKTm7C,GAAa,CACjBr2C,QAAS,CAACqpB,GAAI,gBAAiBrG,GAAI,mCACnCszB,UAAW,CAACjtB,GAAI,aAAcrG,GAAI,kCAClCuzB,WAAY,CAACvzB,GAAI,wCACjBqF,mBAAoB,CAACrF,GAAI,wCACzBwzB,WAAY,CAACxzB,GAAI,wCACjB1sB,OAAQ,CAAC+yB,GAAI,WAAYrG,GAAI,6BAC7ByzB,UAAW,CACTptB,GAAI,eACJrG,GAAI,sDAEN0zB,aAAc,CACZrtB,GAAI,kBACJrG,GAAI,sDAEN2zB,gBAAiB,CACfttB,GAAI,qBACJrG,GAAI,sDAEN4zB,iBAAkB,CAChBvtB,GAAI,sBACJrG,GAAI,mDAUD,SAAS6zB,GAAcj9C,GAC5B,IAAK,MAAMgC,KAAOy6C,GAChB,GAAIp3C,GAAIvD,KAAK26C,GAAYz6C,IAAQqD,GAAIvD,KAAK9B,EAASgC,GAAM,CACnCy6C,GAAWz6C,UAMxBy6C,GAAWz6C,EACnB,CAGH,MAAMmD,EAAYP,IACfF,IAAIqkB,IACJrkB,IAAI1E,EAAQk9C,eAAiB,IAC7Bx4C,IAAIy4C,GAAc,IACdn9C,EAAQo9C,oBACX3uB,oBAAoB,IAErB/pB,IAAI1E,EAAQq9C,eAAiB,IAC7B34C,IAAI4yC,GAAct3C,GAEfpD,EAAO,IAAImD,EAEe,iBAArBC,EAAQuI,SACjB3L,EAAKvB,MAAQ2E,EAAQuI,cACSnM,IAArB4D,EAAQuI,UAA0BvI,EAAQuI,SAMrD,MAAM+0C,EAAWn4C,EAAUmC,QAAQnC,EAAUoB,MAAM3J,GAAOA,GAE1D,GAAsB,SAAlB0gD,EAASz1C,KACX,MAAM,IAAIzK,UAAU,0BAItB,IAAImB,EAASq8C,EAAMhqC,cACjBgqC,EAAMC,SACN,CAAE,EACFd,GAAgB,CAAC/5C,UAASs6C,OAAQ13B,GAAM43B,UAAW,GAAI8C,IAOzD,OAJIt9C,EAAQgrB,YACVzsB,EAASq8C,EAAMhqC,cAAc,MAAO,CAACoa,UAAWhrB,EAAQgrB,WAAYzsB,IAG/DA,CACT,CAEA0+C,GAAcM,UAAY,CAExBh1C,SAAUi1C,EAAUlgC,OAEpB0N,UAAWwyB,EAAUlgC,OAErBm6B,aAAc+F,EAAUC,KACxBlG,gBAAiBiG,EAAUE,QAAQF,EAAUlgC,QAC7Ck6B,mBAAoBgG,EAAUE,QAAQF,EAAUlgC,QAChDq6B,iBAAkB6F,EAAUG,KAE5BT,cAAeM,EAAUE,QACvBF,EAAUI,UAAU,CAClBJ,EAAUxY,OACVwY,EAAUC,KACVD,EAAUE,QACRF,EAAUI,UAAU,CAClBJ,EAAUG,KACVH,EAAUlgC,OACVkgC,EAAUxY,OACVwY,EAAUC,KACVD,EAAUE,QAGRF,EAAUlwB,WAMpB+vB,cAAeG,EAAUE,QACvBF,EAAUI,UAAU,CAClBJ,EAAUxY,OACVwY,EAAUC,KACVD,EAAUE,QACRF,EAAUI,UAAU,CAClBJ,EAAUG,KACVH,EAAUlgC,OACVkgC,EAAUxY,OACVwY,EAAUC,KACVD,EAAUE,QAGRF,EAAUlwB,WAOpBmuB,UAAW+B,EAAUG,KACrBjC,aAAc8B,EAAUG,KACxBxD,SAAUqD,EAAUG,KACpB/B,oBAAqB4B,EAAUG,KAC/BvD,iBAAkBoD,EAAUI,UAAU,CAACJ,EAAUC,KAAMD,EAAUG,OACjE3C,WAAYwC,EAAUI,UAAU,CAACJ,EAAUC,KAAMD,EAAUlgC,SAC3D69B,kBAAmBqC,EAAUC,KAC7B/C,WAAY8C,EAAUxY","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128]}