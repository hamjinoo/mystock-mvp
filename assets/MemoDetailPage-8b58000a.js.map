{"version":3,"file":"MemoDetailPage-8b58000a.js","sources":["../../src/pages/MemoDetailPage.tsx"],"sourcesContent":["import { PencilIcon } from \"@heroicons/react/24/outline\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { LoadingSpinner } from \"../components/LoadingSpinner\";\r\nimport { db } from \"../services/db\";\r\nimport { Memo, NewMemo } from \"../types\";\r\n\r\nexport const MemoDetailPage: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const [memo, setMemo] = useState<Memo | null>(null);\r\n  const [isEditing, setIsEditing] = useState(id === \"new\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (id === \"new\") {\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    const loadMemo = async () => {\r\n      try {\r\n        // DB가 준비되었는지 확인\r\n        if (!db.isOpen()) {\r\n          await db.open();\r\n        }\r\n        const memo = await db.getMemoById(Number(id));\r\n        if (memo) {\r\n          setMemo(memo);\r\n          setTitle(memo.title);\r\n          setContent(memo.content);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"메모 로딩 중 오류:\", error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadMemo();\r\n  }, [id]);\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      if (!title.trim() || !content.trim()) {\r\n        alert(\"제목과 내용을 모두 입력해주세요.\");\r\n        return;\r\n      }\r\n\r\n      // DB가 준비되었는지 확인\r\n      if (!db.isOpen()) {\r\n        await db.open();\r\n      }\r\n\r\n      if (id === \"new\") {\r\n        const newMemo: NewMemo = {\r\n          title: title.trim(),\r\n          content: content.trim(),\r\n          createdAt: Date.now(),\r\n          updatedAt: Date.now(),\r\n        };\r\n        await db.addMemo(newMemo);\r\n      } else if (memo) {\r\n        await db.updateMemo({\r\n          ...memo,\r\n          title: title.trim(),\r\n          content: content.trim(),\r\n        });\r\n      }\r\n      navigate(\"/memos\");\r\n    } catch (error) {\r\n      console.error(\"메모 저장 중 오류:\", error);\r\n      alert(\"메모 저장 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!window.confirm(\"정말로 이 메모를 삭제하시겠습니까?\")) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // DB가 준비되었는지 확인\r\n      if (!db.isOpen()) {\r\n        await db.open();\r\n      }\r\n      await db.deleteMemo(Number(id));\r\n      navigate(\"/memos\");\r\n    } catch (error) {\r\n      console.error(\"메모 삭제 중 오류:\", error);\r\n      alert(\"메모 삭제 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"text-center py-8\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-screen flex flex-col\">\r\n      <div className=\"p-4 border-b border-gray-700 bg-gray-900\">\r\n        <div className=\"max-w-3xl mx-auto\">\r\n          <div className=\"flex justify-between items-center\">\r\n            {isEditing ? (\r\n              <input\r\n                type=\"text\"\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                placeholder=\"제목을 입력하세요\"\r\n                className=\"text-2xl font-bold bg-transparent border-b border-gray-600 focus:border-blue-500 focus:outline-none w-full\"\r\n              />\r\n            ) : (\r\n              <h1 className=\"text-2xl font-bold\">{title}</h1>\r\n            )}\r\n\r\n            {!isEditing && id !== \"new\" && (\r\n              <button\r\n                onClick={() => setIsEditing(true)}\r\n                className=\"inline-flex items-center px-3 py-1 text-blue-400 hover:text-blue-300 transition-colors\"\r\n              >\r\n                <PencilIcon className=\"h-5 w-5 mr-1\" />\r\n                수정\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex-1 overflow-hidden\">\r\n        <div className=\"h-full p-4 overflow-auto\">\r\n          <div className=\"max-w-3xl mx-auto\">\r\n            {isEditing ? (\r\n              <div className=\"space-y-4\">\r\n                <textarea\r\n                  value={content}\r\n                  onChange={(e) => setContent(e.target.value)}\r\n                  placeholder=\"내용을 입력하세요 (마크다운 사용 가능)&#10;# 제목 1&#10;## 제목 2&#10;- 목록&#10;1. 번호 목록&#10;**굵게** _기울임_&#10;```코드 블록```\"\r\n                  className=\"w-full h-[calc(100vh-240px)] p-4 bg-gray-800 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono\"\r\n                />\r\n                <div className=\"flex justify-end gap-2\">\r\n                  <button\r\n                    onClick={() => {\r\n                      if (id === \"new\") {\r\n                        navigate(\"/memos\");\r\n                      } else {\r\n                        setIsEditing(false);\r\n                        setTitle(memo?.title || \"\");\r\n                        setContent(memo?.content || \"\");\r\n                      }\r\n                    }}\r\n                    className=\"px-4 py-2 text-gray-400 hover:text-gray-300 transition-colors\"\r\n                  >\r\n                    취소\r\n                  </button>\r\n                  <button\r\n                    onClick={handleSave}\r\n                    className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\r\n                  >\r\n                    저장\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"prose prose-invert prose-lg max-w-none\">\r\n                <div className=\"markdown-content\">\r\n                  <ReactMarkdown\r\n                    components={{\r\n                      h1: ({ node, ...props }) => (\r\n                        <h1\r\n                          className=\"text-3xl font-bold mt-8 mb-4\"\r\n                          {...props}\r\n                        />\r\n                      ),\r\n                      h2: ({ node, ...props }) => (\r\n                        <h2\r\n                          className=\"text-2xl font-bold mt-6 mb-3\"\r\n                          {...props}\r\n                        />\r\n                      ),\r\n                      h3: ({ node, ...props }) => (\r\n                        <h3\r\n                          className=\"text-xl font-bold mt-4 mb-2\"\r\n                          {...props}\r\n                        />\r\n                      ),\r\n                      p: ({ node, ...props }) => (\r\n                        <p className=\"my-4 leading-relaxed\" {...props} />\r\n                      ),\r\n                      ul: ({ node, ...props }) => (\r\n                        <ul\r\n                          className=\"list-disc list-inside my-4 space-y-2\"\r\n                          {...props}\r\n                        />\r\n                      ),\r\n                      ol: ({ node, ...props }) => (\r\n                        <ol\r\n                          className=\"list-decimal list-inside my-4 space-y-2\"\r\n                          {...props}\r\n                        />\r\n                      ),\r\n                      li: ({ node, ...props }) => (\r\n                        <li className=\"ml-4\" {...props} />\r\n                      ),\r\n                      code: ({ node, children, className, ...props }) => {\r\n                        const match = /language-(\\w+)/.exec(className || \"\");\r\n                        const isInline = !className;\r\n                        return isInline ? (\r\n                          <code\r\n                            className=\"bg-gray-700 rounded px-1 py-0.5 font-mono text-sm\"\r\n                            {...props}\r\n                          >\r\n                            {children}\r\n                          </code>\r\n                        ) : (\r\n                          <code\r\n                            className=\"block bg-gray-700 rounded p-4 font-mono text-sm my-4 overflow-x-auto\"\r\n                            {...props}\r\n                          >\r\n                            {children}\r\n                          </code>\r\n                        );\r\n                      },\r\n                      blockquote: ({ node, ...props }) => (\r\n                        <blockquote\r\n                          className=\"border-l-4 border-gray-500 pl-4 my-4 italic\"\r\n                          {...props}\r\n                        />\r\n                      ),\r\n                      a: ({ node, ...props }) => (\r\n                        <a\r\n                          className=\"text-blue-400 hover:text-blue-300 underline\"\r\n                          {...props}\r\n                        />\r\n                      ),\r\n                    }}\r\n                  >\r\n                    {content}\r\n                  </ReactMarkdown>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {!isEditing && id !== \"new\" && (\r\n        <div className=\"mt-10 p-4 bg-gray-900\">\r\n          <div className=\"max-w-3xl mx-auto text-center\">\r\n            <button\r\n              onClick={handleDelete}\r\n              className=\"text-red-500 hover:text-red-400 underline\"\r\n            >\r\n              삭제하기\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["MemoDetailPage","id","useParams","navigate","useNavigate","memo","setMemo","useState","isEditing","setIsEditing","title","setTitle","content","setContent","isLoading","setIsLoading","useEffect","async","db","isOpen","open","getMemoById","Number","error","loadMemo","className","children","jsx","LoadingSpinner","jsxs","type","value","onChange","e","target","placeholder","onClick","PencilIcon","trim","alert","newMemo","createdAt","Date","now","updatedAt","addMemo","updateMemo","ReactMarkdown","components","h1","node","props","h2","h3","p","ul","ol","li","code","blockquote","a","window","confirm","deleteMemo"],"mappings":"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"}