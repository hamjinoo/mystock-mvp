# MyStock MVP - Cursor AI Rules

## 프로젝트 개요
- **프로젝트명**: MyStock MVP
- **기술 스택**: React 18 + TypeScript + Vite + Tailwind CSS + IndexedDB(Dexie.js)
- **목적**: 개인 투자자를 위한 포트폴리오 관리 웹 애플리케이션

## 코딩 규칙

### TypeScript
- 모든 파일에서 strict 타입 검사 사용
- `any` 타입 사용 금지 (불가피한 경우 명시적 주석 필요)
- 인터페이스와 타입을 명확히 정의
- 옵셔널 체이닝(`?.`) 적극 활용

### React
- 함수형 컴포넌트만 사용
- 커스텀 훅을 통한 로직 분리
- `useEffect` 의존성 배열 정확히 명시
- 컴포넌트명은 PascalCase 사용

### 파일 구조
```
src/
├── components/     # 재사용 가능한 컴포넌트
├── pages/         # 페이지 컴포넌트
├── services/      # 비즈니스 로직 및 데이터 처리
├── hooks/         # 커스텀 훅
├── types/         # TypeScript 타입 정의
└── utils/         # 유틸리티 함수
```

### 스타일링
- Tailwind CSS 사용
- 다크 테마 기본 적용
- 모바일 우선 반응형 디자인
- 일관된 색상 팔레트 사용 (gray-900, gray-800, blue-500 등)

### 데이터베이스
- IndexedDB (Dexie.js) 사용
- 트랜잭션 처리 필수
- 에러 처리 및 롤백 로직 포함
- 데이터 유효성 검사 실시

### 에러 처리
- try-catch 블록 사용
- 사용자 친화적 에러 메시지 제공
- console.error로 디버깅 정보 출력
- 적절한 fallback UI 제공

### 성능 최적화
- React.lazy를 통한 코드 분할
- Suspense를 통한 로딩 상태 관리
- 불필요한 리렌더링 방지
- 메모이제이션 적절히 활용

## 주요 기능별 가이드

### 포트폴리오 관리
- 계좌 > 포트폴리오 > 포지션 계층 구조 유지
- 투자 전략 카테고리 (LONG_TERM, MID_TERM, SHORT_TERM, UNCATEGORIZED)
- 자산 배분 및 수익률 계산 로직

### 백업 시스템
- 자동/수동 백업 지원
- 데이터 유효성 검사 필수
- 복원 실패 시 롤백 기능
- localStorage 기반 백업 저장

### UI/UX
- 하단 네비게이션 바 사용
- 로딩 스피너 일관성 유지
- 확인 다이얼로그 적절히 사용
- 접근성 고려한 디자인

## AI 어시스턴트 지침

### 코드 생성 시
1. 기존 코드 스타일과 일관성 유지
2. 타입 안전성 최우선 고려
3. 에러 처리 로직 포함
4. 주석은 한국어로 작성
5. 테스트 가능한 구조로 작성

### 코드 리뷰 시
1. 타입 안전성 검토
2. 성능 최적화 가능성 확인
3. 에러 처리 적절성 검토
4. 코드 중복 제거 제안
5. 접근성 및 사용성 개선 제안

### 문제 해결 시
1. 근본 원인 분석 우선
2. 최소한의 변경으로 해결
3. 부작용 가능성 검토
4. 대안 솔루션 제시
5. 향후 예방 방안 제안

## 금지 사항
- `any` 타입 무분별 사용
- 인라인 스타일 사용
- 하드코딩된 값 사용
- 에러 처리 생략
- 타입 정의 없는 props
- 비동기 처리 시 에러 핸들링 생략

## 권장 사항
- 함수는 단일 책임 원칙 준수
- 컴포넌트는 100줄 이하로 유지
- 커스텀 훅으로 로직 재사용
- 상수는 별도 파일로 분리
- 유틸리티 함수 적극 활용
- 테스트 코드 작성 고려 